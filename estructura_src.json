{
  "app": {
    "__archivos__": {
      "layout.tsx": "import type {Metadata} from 'next';\nimport {Geist, Geist_Mono} from 'next/font/google';\nimport './globals.css';\nimport { Toaster } from \"@/components/ui/toaster\";\n\nconst geistSans = Geist({\n  variable: '--font-geist-sans',\n  subsets: ['latin'],\n});\n\nconst geistMono = Geist_Mono({\n  variable: '--font-geist-mono',\n  subsets: ['latin'],\n});\n\nexport const metadata: Metadata = {\n  title: 'EstilosIA',\n  description: 'Tu gestion para el armario',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"es\">\n      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`} suppressHydrationWarning>\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n",
      "actions.ts": "\n'use server';\n\nimport { generateOutfitExplanation, type GenerateOutfitExplanationInput } from '@/ai/flows/generate-outfit-explanation';\nimport type { SuggestedOutfit, OutfitItem, Prenda, Look, LookFormData, CalendarAssignment, CalendarAssignmentFormData, PrendaCalendarAssignment, LookCalendarAssignment, StatisticsSummary, ColorFrequency, StyleUsageStat, TimeActivityStat, IntelligentInsightData, TipoPrenda, PrendaColor, OptimizedOutfitParams, TemporadaPrenda } from '@/types';\nimport { PRENDA_COLORS, TIPO_PRENDA_ENUM_VALUES, SEASONS, NEUTRAL_COLORS, DIFFICULT_COLOR_PAIRS } from '@/types';\nimport { supabase } from '@/lib/supabaseClient';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { format, parseISO, isValid, startOfMonth, endOfMonth, formatISO, subMonths, getMonth, getYear } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { mapDbPrendaToClient } from '@/lib/dataMappers';\n\ninterface GetOutfitSuggestionParams {\n  temperature: [number, number];\n  styleId: string;\n  useClosetInfo: boolean;\n}\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n}\n\nexport async function getAISuggestionAction(\n  params: GetOutfitSuggestionParams\n): Promise<SuggestedOutfit | { error: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in getAISuggestionAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  try {\n    const { temperature, styleId, useClosetInfo } = params;\n\n    const prendasResult = await getPrendasAction();\n    if (prendasResult.error || !prendasResult.data) {\n      return { error: prendasResult.error || \"No se pudieron obtener los artículos de tu armario.\" };\n    }\n\n    const activeClientPrendas = prendasResult.data.filter(p => !p.is_archived);\n\n    if (activeClientPrendas.length === 0) {\n      return { error: \"Tu armario está vacío o no tiene artículos activos. Por favor, añade algunas prendas primero.\" };\n    }\n\n    const [minUserTemp, maxUserTemp] = temperature;\n\n    const filteredPrendas = activeClientPrendas.filter(p => {\n      const styleMatch = p.estilo.toLowerCase() === styleId.toLowerCase();\n      const tempMatch = (\n        typeof p.temperatura_min === 'number' &&\n        typeof p.temperatura_max === 'number' &&\n        p.temperatura_min <= maxUserTemp &&\n        p.temperatura_max >= minUserTemp\n      );\n      return styleMatch && tempMatch;\n    });\n\n    if (filteredPrendas.length === 0) {\n      return { error: \"No se encontraron artículos adecuados en tu armario para el estilo y la temperatura seleccionados.\" };\n    }\n\n    const shuffledPrendas = shuffleArray(filteredPrendas);\n    const outfitItemCount = Math.min(shuffledPrendas.length, 3); // Suggest up to 3 items\n    const selectedClientItems = shuffledPrendas.slice(0, outfitItemCount);\n\n    if (selectedClientItems.length === 0) {\n         return { error: \"No se pudieron seleccionar artículos para un atuendo de tu armario que coincidan con los criterios.\" };\n    }\n\n    const outfitItems: OutfitItem[] = selectedClientItems.map(p => ({\n      id: p.id.toString(),\n      name: p.nombre,\n      imageUrl: p.imagen_url || `https://placehold.co/300x400.png?text=${encodeURIComponent(p.nombre)}`,\n      category: p.tipo as string, \n      color: p.color as PrendaColor,\n      aiHint: `${p.tipo.toLowerCase()} ${p.color ? p.color.toLowerCase() : ''}`.trim().substring(0,50) || p.nombre.toLowerCase(),\n    }));\n\n    const outfitDescription = outfitItems.map(item => item.name).join(', ');\n    const temperatureRangeString = `${temperature[0]}-${temperature[1]} grados Celsius`;\n\n    const aiInput: GenerateOutfitExplanationInput = {\n      temperatureRange: temperatureRangeString,\n      selectedStyle: styleId.charAt(0).toUpperCase() + styleId.slice(1),\n      outfitDescription: outfitDescription,\n      userClosetInformationNeeded: useClosetInfo,\n    };\n\n    const aiOutput = await generateOutfitExplanation(aiInput);\n\n    return {\n      items: outfitItems,\n      explanation: aiOutput.explanation,\n    };\n  } catch (error) {\n    console.error('Error generating outfit suggestion:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al generar la sugerencia.';\n    return { error: `No se pudo obtener la sugerencia: ${errorMessage}` };\n  }\n}\n\nconst PrendaFormSchema = z.object({\n  nombre: z.string().min(1, \"El nombre es requerido.\"),\n  tipo: z.enum(TIPO_PRENDA_ENUM_VALUES, { required_error: \"Por favor selecciona un tipo válido.\"}),\n  color: z.enum(PRENDA_COLORS, { errorMap: () => ({ message: \"Por favor selecciona un color válido.\" }) }),\n  modelo: z.string().min(1, \"El modelo es requerido.\"),\n  temporada: z.enum(SEASONS, {required_error: \"Por favor selecciona una temporada válida.\"}),\n  fechacompra: z.string().refine((val) => { \n    if (val === '' || val === null || val === undefined) return true; \n    const parsedDate = parseISO(val);\n    return isValid(parsedDate);\n  }, {\n    message: \"La fecha de compra debe ser válida (YYYY-MM-DD) o estar vacía.\",\n  }).optional().nullable(),\n  imagen_url: z.string().url(\"Debe ser una URL válida.\").or(z.literal(\"\")).optional(),\n  temperatura_min: z.coerce.number().optional().nullable(),\n  temperatura_max: z.coerce.number().optional().nullable(),\n  estilo: z.string().min(1, \"El estilo es requerido.\"),\n  is_archived: z.preprocess(val => val === 'on' || val === 'true' || val === true, z.boolean()).optional().default(false),\n});\n\n\nexport async function addPrendaAction(formData: FormData): Promise<{ data?: Prenda; error?: string; validationErrors?: z.ZodIssue[] }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in addPrendaAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validatedFields = PrendaFormSchema.safeParse(rawFormData);\n\n  if (!validatedFields.success) {\n    return {\n      validationErrors: validatedFields.error.issues,\n      error: \"Falló la validación.\"\n    };\n  }\n\n  const { nombre, tipo, color, modelo, temporada, fechacompra, imagen_url, temperatura_min, temperatura_max, estilo, is_archived } = validatedFields.data;\n\n  const itemToInsertToDb = {\n    nombre,\n    tipo,\n    color,\n    modelo,\n    temporada,\n    fechacompra: fechacompra || null,\n    imagen_url: imagen_url || `https://placehold.co/200x300.png?text=${encodeURIComponent(nombre)}`,\n    temperatura_min,\n    temperatura_max,\n    estilo,\n    is_archived,\n  };\n\n  try {\n    const { data: dbData, error } = await supabase\n      .from('prendas')\n      .insert([itemToInsertToDb])\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    revalidatePath('/closet');\n    revalidatePath('/'); \n    revalidatePath('/archivo');\n    revalidatePath('/statistics');\n    return { data: mapDbPrendaToClient(dbData) };\n  } catch (error) {\n    console.error('Error adding prenda:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al agregar el artículo.';\n    return { error: errorMessage };\n  }\n}\n\nexport async function getPrendasAction(): Promise<{ data?: Prenda[]; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in getPrendasAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\", data: [] };\n  }\n  try {\n    const { data: dbData, error } = await supabase\n      .from('prendas')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n\n    const clientData: Prenda[] = dbData.map(mapDbPrendaToClient);\n    return { data: clientData };\n  } catch (error) {\n    console.error('Error fetching prendas:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al obtener los artículos.';\n    return { error: errorMessage, data: [] };\n  }\n}\n\nexport async function updatePrendaAction(itemId: number, formData: FormData): Promise<{ data?: Prenda; error?: string; validationErrors?: z.ZodIssue[] }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in updatePrendaAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  const rawFormData = Object.fromEntries(formData.entries());\n  const validatedFields = PrendaFormSchema.safeParse(rawFormData);\n\n  if (!validatedFields.success) {\n    return {\n      validationErrors: validatedFields.error.issues,\n      error: \"Falló la validación.\"\n    };\n  }\n\n  const { nombre, tipo, color, modelo, temporada, fechacompra, imagen_url, temperatura_min, temperatura_max, estilo, is_archived } = validatedFields.data;\n\n  const itemToUpdateInDb = {\n    nombre,\n    tipo,\n    color,\n    modelo,\n    temporada,\n    fechacompra: fechacompra || null,\n    imagen_url: imagen_url || `https://placehold.co/200x300.png?text=${encodeURIComponent(nombre)}`,\n    temperatura_min,\n    temperatura_max,\n    estilo,\n    is_archived,\n  };\n\n  try {\n    const { data: dbData, error } = await supabase\n      .from('prendas')\n      .update(itemToUpdateInDb)\n      .eq('id', itemId)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    revalidatePath('/closet');\n    revalidatePath('/'); \n    revalidatePath('/archivo');\n    revalidatePath('/statistics');\n    return { data: mapDbPrendaToClient(dbData) };\n  } catch (error) {\n    console.error('Error updating prenda:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al actualizar el artículo.';\n    return { error: errorMessage };\n  }\n}\n\nexport async function deletePrendaAction(itemId: number): Promise<{ success?: boolean; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in deletePrendaAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n\n  try {\n    const { error: lookPrendasError } = await supabase\n      .from('look_prendas')\n      .delete()\n      .eq('prenda_id', itemId);\n\n    if (lookPrendasError) {\n      console.error('Error deleting related look_prendas entries:', lookPrendasError);\n    }\n    \n    const { error } = await supabase\n      .from('prendas')\n      .delete()\n      .eq('id', itemId);\n\n    if (error) throw error;\n\n    revalidatePath('/closet');\n    revalidatePath('/');\n    revalidatePath('/archivo');\n    revalidatePath('/looks');\n    revalidatePath('/calendario');\n    revalidatePath('/statistics');\n    return { success: true };\n  } catch (error) {\n    console.error('Error deleting prenda:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al eliminar el artículo.';\n    return { error: errorMessage };\n  }\n}\n\n// --- Looks Actions ---\n\nexport async function getLooksAction(): Promise<{ data?: Look[]; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in getLooksAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\", data: [] };\n  }\n  try {\n    const { data: looksData, error: looksError } = await supabase\n      .from('looks')\n      .select(`\n        *,\n        look_prendas (\n          prenda_id,\n          prendas (*)\n        )\n      `)\n      .order('created_at', { ascending: false });\n\n    if (looksError) throw looksError;\n    if (!looksData) return { data: [] };\n\n    const formattedLooks: Look[] = looksData.map(look => ({\n      ...look,\n      prendas: look.look_prendas.map((lp: any) => mapDbPrendaToClient(lp.prendas)).filter(Boolean) as Prenda[]\n    }));\n\n    return { data: formattedLooks };\n  } catch (error) {\n    console.error('Error fetching looks:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al obtener los looks.';\n    return { error: errorMessage, data: [] };\n  }\n}\n\nexport async function getLookByIdAction(lookId: number): Promise<{ data?: Look; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in getLookByIdAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  try {\n    const { data: lookData, error: lookError } = await supabase\n      .from('looks')\n      .select(`\n        *,\n        look_prendas (\n          prenda_id,\n          prendas (*)\n        )\n      `)\n      .eq('id', lookId)\n      .single();\n\n    if (lookError) throw lookError;\n    if (!lookData) return { error: \"Look no encontrado.\" };\n\n    const formattedLook: Look = {\n        ...lookData,\n        prendas: lookData.look_prendas.map((lp: any) => mapDbPrendaToClient(lp.prendas)).filter(Boolean) as Prenda[]\n    };\n    return { data: formattedLook };\n\n  } catch (error) {\n    console.error('Error fetching look by ID:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado.';\n    return { error: errorMessage };\n  }\n}\n\n\nexport async function addLookAction(formData: LookFormData): Promise<{ data?: Look; error?: string; validationErrors?: z.ZodIssue[] }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in addLookAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n\n  if (!formData.nombre || formData.prenda_ids.length === 0) {\n    return { error: \"El nombre del look y al menos una prenda son requeridos.\" };\n  }\n\n  try {\n    const { data: lookData, error: lookError } = await supabase\n      .from('looks')\n      .insert([{\n        nombre: formData.nombre,\n        descripcion: formData.descripcion,\n        estilo: formData.estilo,\n        imagen_url: formData.imagen_url,\n      }])\n      .select()\n      .single();\n\n    if (lookError) throw lookError;\n    if (!lookData) throw new Error(\"Falló la creación del look.\");\n\n    const lookId = lookData.id;\n\n    const lookPrendasToInsert = formData.prenda_ids.map(prenda_id => ({\n      look_id: lookId,\n      prenda_id: prenda_id,\n    }));\n\n    const { error: lookPrendasError } = await supabase\n      .from('look_prendas')\n      .insert(lookPrendasToInsert);\n\n    if (lookPrendasError) throw lookPrendasError;\n\n    revalidatePath('/looks');\n    revalidatePath('/statistics');\n\n\n    const newLookResult = await getLookByIdAction(lookId);\n    if (newLookResult.error || !newLookResult.data) {\n        return { error: newLookResult.error || \"Look creado, pero no se pudo obtener con detalles.\" };\n    }\n    return { data: newLookResult.data };\n\n  } catch (error) {\n    console.error('Error adding look:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al agregar el look.';\n    return { error: errorMessage };\n  }\n}\n\nexport async function updateLookAction(lookId: number, formData: LookFormData): Promise<{ data?: Look; error?: string; validationErrors?: z.ZodIssue[] }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in updateLookAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n\n  if (!formData.nombre || formData.prenda_ids.length === 0) {\n    return { error: \"El nombre del look y al menos una prenda son requeridos.\" };\n  }\n\n  try {\n    const { data: updatedLookData, error: lookError } = await supabase\n      .from('looks')\n      .update({\n        nombre: formData.nombre,\n        descripcion: formData.descripcion,\n        estilo: formData.estilo,\n        imagen_url: formData.imagen_url,\n      })\n      .eq('id', lookId)\n      .select()\n      .single();\n\n    if (lookError) throw lookError;\n    if (!updatedLookData) throw new Error(\"Falló la actualización del look.\");\n\n    const { error: deleteError } = await supabase\n      .from('look_prendas')\n      .delete()\n      .eq('look_id', lookId);\n\n    if (deleteError) throw deleteError;\n\n    const lookPrendasToInsert = formData.prenda_ids.map(prenda_id => ({\n      look_id: lookId,\n      prenda_id: prenda_id,\n    }));\n\n    const { error: insertError } = await supabase\n      .from('look_prendas')\n      .insert(lookPrendasToInsert);\n\n    if (insertError) throw insertError;\n\n    revalidatePath('/looks');\n    revalidatePath(`/looks/${lookId}`);\n    revalidatePath('/statistics');\n\n\n    const finalLookResult = await getLookByIdAction(lookId);\n    if (finalLookResult.error || !finalLookResult.data) {\n        return { error: finalLookResult.error || \"Look actualizado, pero no se pudo obtener con detalles.\" };\n    }\n    return { data: finalLookResult.data };\n\n  } catch (error) {\n    console.error('Error updating look:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al actualizar el look.';\n    return { error: errorMessage };\n  }\n}\n\nexport async function deleteLookAction(lookId: number): Promise<{ success?: boolean; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in deleteLookAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  try {\n    const { error: lookPrendasError } = await supabase\n        .from('look_prendas')\n        .delete()\n        .eq('look_id', lookId);\n\n    if (lookPrendasError) {\n        console.error('Error deleting related look_prendas entries:', lookPrendasError);\n        throw lookPrendasError; \n    }\n    \n    const { error } = await supabase\n      .from('looks')\n      .delete()\n      .eq('id', lookId);\n\n    if (error) throw error;\n\n    revalidatePath('/looks');\n    revalidatePath('/calendario');\n    revalidatePath('/statistics');\n    return { success: true };\n  } catch (error) {\n    console.error('Error deleting look:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado al eliminar el look.';\n    return { error: errorMessage };\n  }\n}\n\n// --- Calendar Assignments Actions ---\n\nexport async function getCalendarAssignmentsAction(\n  currentMonthDate: Date\n): Promise<{ data?: CalendarAssignment[]; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in getCalendarAssignmentsAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n\n  const startDate = formatISO(startOfMonth(currentMonthDate), { representation: 'date' });\n  const endDate = formatISO(endOfMonth(currentMonthDate), { representation: 'date' });\n\n  try {\n    const { data: assignmentsData, error } = await supabase\n      .from('calendario_asignaciones')\n      .select(`\n        *,\n        prendas (*),\n        looks (*, look_prendas(prendas(*)))\n      `)\n      .gte('fecha', startDate)\n      .lte('fecha', endDate)\n      .order('fecha', { ascending: true });\n\n    if (error) throw error;\n\n    const formattedAssignments: CalendarAssignment[] = assignmentsData.map((assignment: any) => {\n      if (assignment.tipo_asignacion === 'prenda' && assignment.prendas) {\n        return {\n          ...assignment,\n          fecha: assignment.fecha,\n          prenda: mapDbPrendaToClient(assignment.prendas),\n          look: null,\n          look_id: null,\n        } as PrendaCalendarAssignment;\n      } else if (assignment.tipo_asignacion === 'look' && assignment.looks) {\n        return {\n          ...assignment,\n          fecha: assignment.fecha,\n          look: {\n            ...assignment.looks,\n            prendas: assignment.looks.look_prendas.map((lp: any) => mapDbPrendaToClient(lp.prendas)).filter(Boolean) as Prenda[],\n          },\n          prenda: null,\n          prenda_id: null,\n        } as LookCalendarAssignment;\n      }\n      return null; \n    }).filter(Boolean) as CalendarAssignment[]; \n    return { data: formattedAssignments };\n  } catch (error) {\n    console.error('Error fetching calendar assignments:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Ocurrió un error inesperado.';\n    return { error: errorMessage };\n  }\n}\n\nexport async function addCalendarAssignmentAction(\n  formData: CalendarAssignmentFormData\n): Promise<{ data?: CalendarAssignment; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in addCalendarAssignmentAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  try {\n    const assignmentToInsert: any = {\n      fecha: formData.fecha,\n      tipo_asignacion: formData.tipo_asignacion,\n      nota: formData.nota,\n    };\n    if (formData.tipo_asignacion === 'prenda') {\n      assignmentToInsert.prenda_id = formData.referencia_id;\n    } else {\n      assignmentToInsert.look_id = formData.referencia_id;\n    }\n\n    const { data, error } = await supabase\n      .from('calendario_asignaciones')\n      .insert(assignmentToInsert)\n      .select(`\n        *,\n        prendas (*),\n        looks (*, look_prendas(prendas(*)))\n      `)\n      .single();\n\n    if (error) throw error;\n\n    revalidatePath('/calendario');\n    revalidatePath('/statistics');\n\n\n    let fullAssignment: CalendarAssignment | undefined;\n    if (data.tipo_asignacion === 'prenda' && data.prendas) {\n        fullAssignment = {\n            ...data,\n            fecha: data.fecha,\n            prenda: mapDbPrendaToClient(data.prendas),\n            look: null, look_id: null\n        } as PrendaCalendarAssignment;\n    } else if (data.tipo_asignacion === 'look' && data.looks) {\n        fullAssignment = {\n            ...data,\n            fecha: data.fecha,\n            look: {\n                ...data.looks,\n                prendas: data.looks.look_prendas.map((lp: any) => mapDbPrendaToClient(lp.prendas)).filter(Boolean) as Prenda[]\n            },\n            prenda: null, prenda_id: null\n        } as LookCalendarAssignment;\n    }\n\n    return { data: fullAssignment };\n\n  } catch (error) {\n    console.error('Error adding calendar assignment:', error);\n    return { error: error instanceof Error ? error.message : 'No se pudo agregar la asignación.' };\n  }\n}\n\nexport async function updateCalendarAssignmentAction(\n  assignmentId: number,\n  formData: CalendarAssignmentFormData\n): Promise<{ data?: CalendarAssignment; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in updateCalendarAssignmentAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  try {\n    const assignmentToUpdate: any = {\n      fecha: formData.fecha,\n      tipo_asignacion: formData.tipo_asignacion,\n      nota: formData.nota,\n      prenda_id: null,\n      look_id: null,\n    };\n    if (formData.tipo_asignacion === 'prenda') {\n      assignmentToUpdate.prenda_id = formData.referencia_id;\n    } else {\n      assignmentToUpdate.look_id = formData.referencia_id;\n    }\n\n    const { data, error } = await supabase\n      .from('calendario_asignaciones')\n      .update(assignmentToUpdate)\n      .eq('id', assignmentId)\n      .select(`\n        *,\n        prendas (*),\n        looks (*, look_prendas(prendas(*)))\n      `)\n      .single();\n\n    if (error) throw error;\n    revalidatePath('/calendario');\n    revalidatePath('/statistics');\n\n\n    let fullAssignment: CalendarAssignment | undefined;\n    if (data.tipo_asignacion === 'prenda' && data.prendas) {\n        fullAssignment = {\n            ...data,\n            fecha: data.fecha,\n            prenda: mapDbPrendaToClient(data.prendas),\n            look: null, look_id: null\n        } as PrendaCalendarAssignment;\n    } else if (data.tipo_asignacion === 'look' && data.looks) {\n        fullAssignment = {\n            ...data,\n            fecha: data.fecha,\n            look: {\n                ...data.looks,\n                prendas: data.looks.look_prendas.map((lp: any) => mapDbPrendaToClient(lp.prendas)).filter(Boolean) as Prenda[]\n            },\n            prenda: null, prenda_id: null\n        } as LookCalendarAssignment;\n    }\n\n    return { data: fullAssignment };\n\n  } catch (error) {\n    console.error('Error updating calendar assignment:', error);\n    return { error: error instanceof Error ? error.message : 'No se pudo actualizar la asignación.' };\n  }\n}\n\nexport async function deleteCalendarAssignmentAction(\n  assignmentId: number\n): Promise<{ success?: boolean; error?: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in deleteCalendarAssignmentAction. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos. Por favor, inténtalo más tarde.\" };\n  }\n  try {\n    const { error } = await supabase\n      .from('calendario_asignaciones')\n      .delete()\n      .eq('id', assignmentId);\n\n    if (error) throw error;\n    revalidatePath('/calendario');\n    revalidatePath('/statistics');\n    return { success: true };\n  } catch (error) {\n    console.error('Error deleting calendar assignment:', error);\n    return { error: error instanceof Error ? error.message : 'No se pudo eliminar la asignación.' };\n  }\n}\n\n// --- Statistics Actions ---\n\nexport async function getStatisticsSummaryAction(): Promise<{ data?: StatisticsSummary; error?: string }> {\n  if (!supabase) {\n    console.error(\"[STATS_ERROR] Supabase client is not initialized for statistics summary. Check environment variables.\");\n    return { error: \"Error de conexión con la base de datos para resumen de estadísticas.\" };\n  }\n  try {\n    const [{ count: totalPrendas, error: prendasError }, { count: totalLooks, error: looksError }] = await Promise.all([\n      supabase.from('prendas').select('*', { count: 'exact', head: true }).eq('is_archived', false),\n      supabase.from('looks').select('*', { count: 'exact', head: true })\n    ]);\n\n    if (prendasError) {\n        console.error(\"[STATS_ERROR] Supabase error fetching totalPrendas:\", JSON.stringify(prendasError, null, 2));\n        return { error: `Error de BD al contar prendas: ${prendasError.message}` };\n    }\n    if (looksError) {\n        console.error(\"[STATS_ERROR] Supabase error fetching totalLooks:\", JSON.stringify(looksError, null, 2));\n        return { error: `Error de BD al contar looks: ${looksError.message}` };\n    }\n\n    const { data: stylesData, error: stylesError } = await supabase\n      .from('prendas')\n      .select('estilo') \n      .eq('is_archived', false)\n      .not('estilo', 'is', null)\n      .neq('estilo', ''); \n\n    if (stylesError) {\n        console.error(\"[STATS_ERROR] Supabase error fetching stylesData:\", JSON.stringify(stylesError, null, 2));\n        return { error: `Error de BD al obtener estilos: ${stylesError.message}` };\n    }\n    \n    const prendasPorEstiloCount = stylesData ? new Set(stylesData.map(s => s.estilo)).size : 0;\n\n\n    const currentMonth = new Date();\n    const firstDayOfMonth = formatISO(startOfMonth(currentMonth), { representation: 'date' });\n    const lastDayOfMonth = formatISO(endOfMonth(currentMonth), { representation: 'date' });\n\n    const { count: looksUsadosEsteMes, error: looksUsadosError } = await supabase\n      .from('calendario_asignaciones')\n      .select('*', { count: 'exact', head: true })\n      .eq('tipo_asignacion', 'look')\n      .gte('fecha', firstDayOfMonth)\n      .lte('fecha', lastDayOfMonth);\n\n    if(looksUsadosError) {\n        console.warn(\"[STATS_WARN] Supabase error fetching looks used this month, defaulting to 0:\", JSON.stringify(looksUsadosError, null, 2));\n    }\n\n\n    return {\n      data: {\n        totalPrendas: totalPrendas || 0,\n        totalLooks: totalLooks || 0,\n        prendasPorEstiloCount: prendasPorEstiloCount || 0,\n        looksUsadosEsteMes: looksUsadosEsteMes || 0,\n      }\n    };\n  } catch (error) {\n    console.error('[STATS_ERROR] Error fetching statistics summary:', error);\n    return { error: error instanceof Error ? error.message : 'Error al obtener el resumen de estadísticas.' };\n  }\n}\n\n\nconst PRENDA_COLOR_MAP_FULL: Record<string, string> = {\n  'Rojo': 'hsl(0, 72%, 51%)',\n  'Azul': 'hsl(217, 91%, 60%)',\n  'Verde': 'hsl(142, 71%, 45%)',\n  'Amarillo': 'hsl(48, 96%, 53%)',\n  'Negro': 'hsl(0, 0%, 10%)',\n  'Blanco': 'hsl(0, 0%, 100%)', \n  'Gris': 'hsl(215, 14%, 65%)',\n  'Marrón': 'hsl(30, 47%, 40%)',\n  'Naranja': 'hsl(25, 95%, 53%)',\n  'Violeta': 'hsl(271, 76%, 53%)',\n  'Rosa': 'hsl(339, 82%, 60%)',\n  'Beige': 'hsl(39, 53%, 82%)',\n  'Celeste': 'hsl(197, 71%, 73%)',\n  'Dorado': 'hsl(45, 89%, 55%)',\n  'Plateado': 'hsl(210, 17%, 79%)',\n  'Cian': 'hsl(180, 70%, 50%)',\n  'Magenta': 'hsl(300, 76%, 58%)',\n  'Lima': 'hsl(80, 61%, 60%)',\n  'Oliva': 'hsl(60, 39%, 41%)',\n  'Turquesa': 'hsl(174, 72%, 56%)',\n  'Índigo': 'hsl(240, 50%, 45%)',\n  'Salmón': 'hsl(6, 93%, 71%)',\n  'Coral': 'hsl(16, 100%, 63%)',\n  'Lavanda': 'hsl(256, 60%, 75%)',\n  'Menta': 'hsl(150, 54%, 67%)',\n  'Caqui': 'hsl(39, 31%, 56%)',\n  'Borgoña': 'hsl(348, 70%, 40%)',\n  'Fucsia': 'hsl(327, 100%, 54%)',\n  'Cuadrille': 'hsl(var(--chart-3))', \n  'Estampado': 'hsl(var(--chart-4))',\n  'Multicolor': 'hsl(var(--chart-5))',\n  'Otro': 'hsl(var(--muted))',\n};\n\n\nexport async function getColorDistributionStatsAction(): Promise<{ data?: ColorFrequency[]; error?: string }> {\n  if (!supabase) {\n    console.error(\"[STATS_ERROR] Supabase client is not initialized for getColorDistributionStatsAction.\");\n    return { error: \"Error de conexión con la base de datos para estadísticas de color.\" };\n  }\n  try {\n    const { data: prendasData, error: dbError } = await supabase\n      .from('prendas')\n      .select('color')\n      .eq('is_archived', false)\n      .not('color', 'is', null);\n\n    if (dbError) {\n      console.error(\"[STATS_ERROR] Supabase error fetching prendas for color distribution:\", JSON.stringify(dbError, null, 2));\n      return { error: `Error de base de datos al obtener colores: ${dbError.message}` };\n    }\n\n    if (!prendasData || prendasData.length === 0) {\n      console.log(\"[STATS_INFO] No active prendas with colors found for color distribution.\");\n      return { data: [] };\n    }\n\n    const colorCounts: Record<string, number> = {};\n    prendasData.forEach(p => {\n      if (p.color && PRENDA_COLORS.includes(p.color as PrendaColor)) {\n        colorCounts[p.color] = (colorCounts[p.color] || 0) + 1;\n      } else if (p.color) {\n        if (PRENDA_COLORS.includes('Otro')) {\n           colorCounts['Otro'] = (colorCounts['Otro'] || 0) + 1;\n        }\n      }\n    });\n    \n    const chartColorsFallback = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))'];\n    let fallbackIndex = 0;\n\n    const colorFrequencyData: ColorFrequency[] = Object.entries(colorCounts)\n      .filter(([, count]) => count > 0) \n      .map(([color, count]) => {\n        let fill = PRENDA_COLOR_MAP_FULL[color as keyof typeof PRENDA_COLOR_MAP_FULL];\n        if (!fill) { \n          fill = chartColorsFallback[fallbackIndex % chartColorsFallback.length];\n          fallbackIndex++;\n        }\n        return { color, count, fill };\n      })\n      .sort((a, b) => b.count - a.count);\n\n    return { data: colorFrequencyData };\n  } catch (error) {\n    console.error(\"[STATS_ERROR] Unexpected error in getColorDistributionStatsAction:\", error);\n    const errorMessage = error instanceof Error ? error.message : 'Error desconocido procesando colores.';\n    return { error: `Error inesperado al procesar distribución de colores: ${errorMessage}` };\n  }\n}\n\n\nexport async function getStyleUsageStatsAction(): Promise<{ data?: StyleUsageStat[]; error?: string }> {\n  if (!supabase) {\n    console.error(\"[STATS_ERROR] Supabase client is not initialized for getStyleUsageStatsAction.\");\n    return { error: \"Error de conexión con la base de datos para estadísticas de estilo.\" };\n  }\n  try {\n    const { data: prendas, error } = await supabase\n      .from('prendas')\n      .select('estilo')\n      .eq('is_archived', false)\n      .not('estilo', 'is', null) \n      .neq('estilo', '');        \n\n    if (error) {\n        console.error(\"[STATS_ERROR] Supabase error in getStyleUsageStatsAction fetching prendas:\", JSON.stringify(error, null, 2));\n        return { error: `Error de BD al obtener estilos para estadísticas: ${error.message}` };\n    }\n    if (!prendas || prendas.length === 0) {\n        console.log(\"[STATS_INFO] No active prendas with styles found for style usage stats.\");\n        return { data: [] };\n    }\n\n    const styleCounts: Record<string, number> = {};\n    prendas.forEach(p => {\n      if (p.estilo) {\n        const styleKey = p.estilo.charAt(0).toUpperCase() + p.estilo.slice(1).toLowerCase(); \n        styleCounts[styleKey] = (styleCounts[styleKey] || 0) + 1;\n      }\n    });\n\n    const chartColors = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))'];\n    const styleUsageStats: StyleUsageStat[] = Object.entries(styleCounts)\n      .map(([name, value], index) => ({ name, value, fill: chartColors[index % chartColors.length] }))\n      .sort((a, b) => b.value - a.value);\n\n    return { data: styleUsageStats };\n  } catch (error) {\n    console.error('[STATS_ERROR] Error fetching style usage stats:', error);\n    return { error: error instanceof Error ? error.message : 'Error al obtener estadísticas de uso de estilos.' };\n  }\n}\n\nexport async function getTimeActivityStatsAction(monthsAgo: number = 6): Promise<{ data?: TimeActivityStat[]; error?: string }> {\n  if (!supabase) {\n    console.error(\"[STATS_ERROR] Supabase client is not initialized for getTimeActivityStatsAction.\");\n    return { error: \"Error de conexión con la base de datos para actividad en el tiempo.\" };\n  }\n  try {\n    const today = new Date();\n    const activityData: Record<string, number> = {};\n    const monthLabels: string[] = [];\n\n    for (let i = monthsAgo - 1; i >= 0; i--) {\n      const targetMonth = subMonths(today, i);\n      const monthKey = format(targetMonth, 'MMM yy', { locale: es });\n      monthLabels.push(monthKey);\n      activityData[monthKey] = 0;\n    }\n\n    const startDate = formatISO(startOfMonth(subMonths(today, monthsAgo -1)), { representation: 'date' });\n    const endDate = formatISO(endOfMonth(today), { representation: 'date' });\n\n    const { data, error } = await supabase\n      .from('calendario_asignaciones')\n      .select('fecha, tipo_asignacion') \n      .gte('fecha', startDate)\n      .lte('fecha', endDate);\n\n    if (error) {\n        console.error(\"[STATS_ERROR] Supabase error in getTimeActivityStatsAction fetching assignments:\", JSON.stringify(error, null, 2));\n        return { error: `Error de BD al obtener asignaciones para actividad: ${error.message}` };\n    }\n    if (!data || data.length === 0) {\n        console.log(\"[STATS_INFO] No calendar assignments found for time activity stats.\");\n        const emptyTimeActivityStats: TimeActivityStat[] = monthLabels.map((label, index) => ({\n          date: label,\n          count: 0,\n          fill: ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))', 'hsl(var(--destructive))'][index % 6] \n        }));\n        return { data: emptyTimeActivityStats };\n    }\n\n    data.forEach(assignment => {\n      try {\n        const assignmentDate = parseISO(assignment.fecha); \n        if (isValid(assignmentDate)) {\n            const monthKey = format(assignmentDate, 'MMM yy', { locale: es });\n            if (activityData.hasOwnProperty(monthKey)) {\n            activityData[monthKey]++;\n            }\n        } else {\n        }\n      } catch(e) {\n      }\n    });\n\n    const chartColors = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))', 'hsl(var(--destructive))'];\n    const timeActivityStats: TimeActivityStat[] = monthLabels.map((label, index) => ({\n      date: label,\n      count: activityData[label] || 0,\n      fill: chartColors[index % chartColors.length] \n    }));\n\n    return { data: timeActivityStats };\n  } catch (error) {\n    console.error('[STATS_ERROR] Error fetching time activity stats:', error);\n    return { error: error instanceof Error ? error.message : 'Error al obtener estadísticas de actividad en el tiempo.' };\n  }\n}\n\nexport async function getIntelligentInsightDataAction(): Promise<{data?: IntelligentInsightData; error?: string}> {\n    if (!supabase) {\n        console.error(\"[STATS_ERROR] Supabase client is not initialized for getIntelligentInsightDataAction.\");\n        return { error: \"Error de conexión con la base de datos para insights.\" };\n    }\n    try {\n        const styleStatsResult = await getStyleUsageStatsAction();\n        if (styleStatsResult.error || !styleStatsResult.data) {\n            return { error: styleStatsResult.error || \"No se pudieron obtener estadísticas de estilo para insights.\" };\n        }\n\n        const prendasResult = await getPrendasAction();\n        if(prendasResult.error || !prendasResult.data) {\n            return { error: prendasResult.error || \"No se pudieron obtener prendas para insights.\"};\n        }\n        const activePrendas = prendasResult.data.filter(p => !p.is_archived && p.estilo);\n        const totalPrendasConEstilo = activePrendas.length;\n\n        let dominantStyle: { name: string; percentage: number } | undefined = undefined;\n\n        if (totalPrendasConEstilo > 0 && styleStatsResult.data.length > 0) {\n            const mostUsedStyle = styleStatsResult.data[0]; \n            if (mostUsedStyle.value > 0) { \n              const percentage = (mostUsedStyle.value / totalPrendasConEstilo) * 100;\n              if (percentage > 50) { \n                  dominantStyle = { name: mostUsedStyle.name, percentage: Math.round(percentage) };\n              }\n            }\n        }\n\n        return { data: { dominantStyle } };\n\n    } catch (error) {\n        console.error('[STATS_ERROR] Error generating intelligent insight data:', error);\n        return { error: error instanceof Error ? error.message : 'Error al generar la información inteligente.' };\n    }\n}\n\n// --- Optimized Outfit Suggester Action ---\nexport async function generateOptimizedOutfitSuggestionAction(\n  params: OptimizedOutfitParams\n): Promise<SuggestedOutfit | { error: string }> {\n  if (!supabase) {\n    console.error(\"Supabase client is not initialized in generateOptimizedOutfitSuggestionAction.\");\n    return { error: \"Error de conexión con la base de datos.\" };\n  }\n\n  try {\n    const { temperature, ocasion } = params; // Changed from season to ocasion\n\n    const { data: allDbPrendas, error: prendasError } = await supabase\n      .from('prendas')\n      .select('*')\n      .eq('is_archived', false)\n      .eq('estilo', ocasion); // Filter by 'estilo' column using the 'ocasion' input\n\n    if (prendasError) {\n      console.error(\"Error fetching prendas for optimized suggestion:\", prendasError);\n      return { error: `Error al obtener prendas para la ocasión '${ocasion}': ${prendasError.message}` };\n    }\n    if (!allDbPrendas || allDbPrendas.length === 0) {\n      return { error: `Tu armario no tiene prendas activas para la ocasión '${ocasion}'.` };\n    }\n\n    const allPrendas: Prenda[] = allDbPrendas.map(mapDbPrendaToClient);\n\n    const suitablePrendas = allPrendas.filter(p =>\n      (p.temperatura_min === null || p.temperatura_min <= temperature) &&\n      (p.temperatura_max === null || p.temperatura_max >= temperature)\n    );\n\n    if (suitablePrendas.length < 2) { // Need at least Cuerpo, Piernas. Zapatos can be more flexible.\n      return { error: `No hay suficientes prendas adecuadas para la temperatura de ${temperature}°C y la ocasión '${ocasion}'.` };\n    }\n\n    const prendasPorTipo: Record<TipoPrenda, Prenda[]> = {\n      'Cuerpo': [], 'Piernas': [], 'Zapatos': [], 'Abrigos': [], 'Accesorios': [],\n    };\n\n    suitablePrendas.forEach(p => {\n      if (prendasPorTipo[p.tipo]) {\n        prendasPorTipo[p.tipo].push(p);\n      }\n    });\n\n    if (prendasPorTipo['Cuerpo'].length === 0 || prendasPorTipo['Piernas'].length === 0 || prendasPorTipo['Zapatos'].length === 0) {\n      return { error: `Faltan prendas en categorías esenciales (Cuerpo, Piernas, Zapatos) para la ocasión '${ocasion}' y temperatura ${temperature}°C.` };\n    }\n\n    const MAX_ATTEMPTS = 20;\n    for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt++) {\n      const outfitCandidate: Prenda[] = [];\n\n      if (prendasPorTipo['Cuerpo'].length > 0) outfitCandidate.push(shuffleArray(prendasPorTipo['Cuerpo'])[0]); else continue;\n      if (prendasPorTipo['Piernas'].length > 0) outfitCandidate.push(shuffleArray(prendasPorTipo['Piernas'])[0]); else continue;\n      if (prendasPorTipo['Zapatos'].length > 0) outfitCandidate.push(shuffleArray(prendasPorTipo['Zapatos'])[0]); else continue;\n      \n      if (temperature <= 22 && prendasPorTipo['Abrigos'].length > 0) {\n        outfitCandidate.push(shuffleArray(prendasPorTipo['Abrigos'])[0]);\n      } else if (temperature > 22 && prendasPorTipo['Abrigos'].length > 0 && Math.random() < 0.2) { // Less chance for coat in warmer weather unless implied by occasion\n         if (ocasion.toLowerCase() === 'formal' || ocasion.toLowerCase() === 'trabajo') { // Example: formal/work might still suggest a light coat\n            outfitCandidate.push(shuffleArray(prendasPorTipo['Abrigos'])[0]);\n         }\n      }\n\n      const currentColors = outfitCandidate.map(p => p.color);\n      const distinctNonNeutralColors = currentColors.filter(c => !NEUTRAL_COLORS.includes(c as PrendaColor));\n      const uniqueNonNeutralColors = new Set(distinctNonNeutralColors);\n\n      if (uniqueNonNeutralColors.size > 3) continue;\n\n      let hasDifficultPair = false;\n      for (const pair of DIFFICULT_COLOR_PAIRS) {\n        if (currentColors.includes(pair[0]) && currentColors.includes(pair[1])) {\n          hasDifficultPair = true;\n          break;\n        }\n      }\n      if (hasDifficultPair) continue;\n      \n      const outfitItems: OutfitItem[] = outfitCandidate.map(p => ({\n        id: p.id.toString(),\n        name: p.nombre,\n        imageUrl: p.imagen_url || `https://placehold.co/300x400.png?text=${encodeURIComponent(p.nombre)}`,\n        category: p.tipo,\n        color: p.color,\n        aiHint: `${p.tipo.toLowerCase()} ${p.color.toLowerCase()}`.trim().substring(0,50) || p.nombre.toLowerCase(),\n      }));\n      \n      const outfitDescription = outfitItems.map(item => `${item.name} (${item.color})`).join(', ');\n      const temperatureRangeString = `${temperature}°C`; // Single temperature\n      const aiInput: GenerateOutfitExplanationInput = {\n        temperatureRange: temperatureRangeString,\n        selectedStyle: ocasion, // Pass 'ocasion' as 'selectedStyle' to the explanation flow\n        outfitDescription: outfitDescription,\n        userClosetInformationNeeded: true, // Assuming we want closet info for this detailed suggestion\n        ocasion: ocasion, // Pass a_ocasion also to the 'ocasion' field of the explanation flow\n      };\n\n      const aiExplanation = await generateOutfitExplanation(aiInput);\n\n      return {\n        items: outfitItems,\n        explanation: aiExplanation.explanation,\n      };\n    }\n\n    return { error: \"No se pudo encontrar una combinación de prendas armoniosa con los criterios actuales. Intenta con otras opciones o expande tu armario.\" };\n\n  } catch (error) {\n    console.error('Error generating optimized outfit suggestion:', error);\n    return { error: \"Ocurrió un error inesperado al generar la sugerencia optimizada.\" };\n  }\n}\n",
      "page.tsx": "\n// src/app/page.tsx (New Homepage - now the Dashboard)\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { StatsCard } from '@/components/dashboard/StatsCard';\nimport { ColorDistributionChart } from '@/components/dashboard/ColorDistributionChart';\nimport { OutfitSuggestion } from '@/components/OutfitSuggestion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { FileText, Palette, Shirt, Sparkles, Loader2, AlertTriangle, LayoutGrid, CalendarClock } from 'lucide-react';\nimport type { SuggestedOutfit, StatisticsSummary, ColorFrequency } from '@/types';\nimport { getAISuggestionAction, getStatisticsSummaryAction, getColorDistributionStatsAction } from './actions';\nimport { useToast } from '@/hooks/use-toast';\n// import { NuevoPrompts } from '@/components/dashboard/nuevoprompts'; // No longer used directly if PromtOptimizado handles its own content\n// import { PromtOptimizado } from '@/components/dashboard/PromtOptimizado'; // Removed this import\nimport { OptimizedOutfitSuggester } from '@/components/dashboard/OptimizedOutfitSuggester'; // Import the new component\n\nconst mockStatsSummary: StatisticsSummary = {\n  totalPrendas: 0,\n  totalLooks: 0,\n  prendasPorEstiloCount: 0,\n  looksUsadosEsteMes: 0,\n};\n\nconst mockColorFrequency: ColorFrequency[] = [\n  { color: 'Azul', count: 0, fill: 'hsl(var(--chart-1))' },\n  { color: 'Negro', count: 0, fill: 'hsl(var(--chart-2))' },\n  { color: 'Blanco', count: 0, fill: 'hsl(var(--chart-3))' },\n  { color: 'Gris', count: 0, fill: 'hsl(var(--chart-4))' },\n  { color: 'Verde', count: 0, fill: 'hsl(var(--chart-5))' },\n];\n\nexport default function HomePage() {\n  const [stats, setStats] = React.useState<StatisticsSummary>(mockStatsSummary);\n  const [colorFrequency, setColorFrequency] = React.useState<ColorFrequency[]>(mockColorFrequency);\n  const [randomSuggestion, setRandomSuggestion] = React.useState<SuggestedOutfit | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const { toast } = useToast();\n\n  const fetchDashboardData = React.useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const statsResult = await getStatisticsSummaryAction();\n      if (statsResult.error || !statsResult.data) {\n        console.warn(\"Error fetching stats summary:\", statsResult.error);\n        setStats(mockStatsSummary);\n      } else {\n        setStats(statsResult.data);\n      }\n\n      const colorsResult = await getColorDistributionStatsAction();\n      if (colorsResult.error || !colorsResult.data) {\n         console.warn(\"Error fetching color distribution:\", colorsResult.error);\n         setColorFrequency(mockColorFrequency);\n      } else {\n        setColorFrequency(colorsResult.data.length > 0 ? colorsResult.data : mockColorFrequency);\n      }\n      \n      const totalPrendasForSuggestion = statsResult.data?.totalPrendas ?? 0;\n\n      if (totalPrendasForSuggestion > 0) {\n        const styles = ['casual', 'formal', 'sporty', 'bohemian'];\n        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\n        const randomTempMin = Math.floor(Math.random() * 20) + 5;\n        const randomTempMax = randomTempMin + Math.floor(Math.random() * 10) + 5;\n\n        const suggestionResult = await getAISuggestionAction({\n          temperature: [randomTempMin, randomTempMax],\n          styleId: randomStyle,\n          useClosetInfo: true,\n        });\n        if ('error' in suggestionResult) {\n          console.warn(\"Error fetching random suggestion for dashboard:\", suggestionResult.error);\n          setRandomSuggestion(null);\n        } else {\n          setRandomSuggestion(suggestionResult);\n        }\n      } else {\n        setRandomSuggestion(null);\n      }\n\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido al cargar el dashboard.';\n      setError(errorMessage);\n      toast({ title: 'Error al cargar el dashboard', description: errorMessage, variant: 'destructive' });\n    }\n    setIsLoading(false);\n  }, [toast]);\n\n  React.useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Navbar />\n        <main className=\"flex-grow container mx-auto px-4 py-8 flex justify-center items-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error && !isLoading) {\n     return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Navbar />\n        <main className=\"flex-grow container mx-auto px-4 py-8\">\n           <div className=\"my-6 p-4 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex items-center gap-3\">\n            <AlertTriangle className=\"h-6 w-6\" />\n            <div>\n              <h3 className=\"font-semibold\">Error al cargar el dashboard</h3>\n              <p className=\"text-sm\">{error}</p>\n              <Button variant=\"link\" onClick={fetchDashboardData} className=\"p-0 h-auto text-destructive mt-1\">Intentar de nuevo</Button>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8 space-y-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Dashboard de EstilosIA</h1>\n        \n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <StatsCard title=\"Total de Prendas\" value={stats.totalPrendas.toString()} icon={Shirt} description=\"Prendas activas en tu armario\" />\n          <StatsCard title=\"Looks Guardados\" value={stats.totalLooks.toString()} icon={Sparkles} description=\"Combinaciones creadas\" />\n          <StatsCard title=\"Estilos Diferentes\" value={stats.prendasPorEstiloCount.toString()} icon={LayoutGrid} description=\"En tus prendas activas\" />\n          <StatsCard title=\"Looks Usados (Mes)\" value={stats.looksUsadosEsteMes.toString()} icon={CalendarClock} description=\"Asignaciones en calendario\" />\n        </div>\n        \n        <div className=\"grid gap-8 md:grid-cols-1 lg:grid-cols-2\"> \n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle>Distribución de Colores</CardTitle>\n              <CardDescription>Colores más frecuentes en tu armario.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {colorFrequency.length > 0 && colorFrequency.some(c => c.count > 0) ? (\n                <ColorDistributionChart data={colorFrequency} />\n              ) : (\n                <p className=\"text-muted-foreground text-center py-8\">No hay suficientes datos de colores para mostrar el gráfico.</p>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle>Sugerencia Rápida AI</CardTitle>\n              <CardDescription>Un look aleatorio para inspirarte desde tu armario.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {randomSuggestion ? (\n                <OutfitSuggestion suggestion={randomSuggestion} />\n              ) : (\n                 stats.totalPrendas > 0 ? \n                 <p className=\"text-muted-foreground text-center py-8\">No se pudo generar una sugerencia aleatoria en este momento.</p>\n                 : <p className=\"text-muted-foreground text-center py-8\">Agrega prendas a tu armario para recibir sugerencias.</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-8\">\n           <OptimizedOutfitSuggester />\n           {/* <PromtOptimizado /> Removed this component from rendering */}\n           {/* <NuevoPrompts suggestionForDisplay={randomSuggestion} />  Potentially redundant or can be merged */}\n        </div>\n\n      </main>\n      <Footer />\n    </div>\n  );\n}\n",
      "globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 98%; /* Very light gray, almost white */\n    --foreground: 220 10% 15%; /* Dark, slightly desaturated blue/gray for text */\n    \n    --card: 0 0% 100%; /* White */\n    --card-foreground: 220 10% 15%; /* Dark, slightly desaturated blue/gray for text */\n    \n    --popover: 0 0% 100%; /* White */\n    --popover-foreground: 220 10% 15%; /* Dark, slightly desaturated blue/gray for text */\n    \n    --primary: 16 100% 63%; /* Coral #FF7043 */\n    --primary-foreground: 0 0% 100%; /* White for text on coral */\n    \n    --secondary: 210 20% 92%; /* Light gray-blue */\n    --secondary-foreground: 220 10% 25%; /* Slightly darker text for secondary elements */\n    \n    --muted: 210 20% 95%; /* Very light gray-blue, lighter than secondary */\n    --muted-foreground: 210 10% 45%; /* Grayer text for muted contexts */\n    \n    --accent: 195 100% 94%; /* Light Blue #E1F5FE */\n    --accent-foreground: 195 80% 30%; /* A noticeable blue for text on light blue accent */\n    \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    \n    --border: 210 20% 88%; /* Slightly darker border for better definition */\n    --input: 210 20% 92%; /* Same as secondary, for input fields background */\n    --ring: 16 100% 63%; /* Coral for focus rings */\n    \n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n\n    /* Sidebar variables - kept for shadcn component compatibility, but not actively themed for this app */\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    /* Keeping dark mode variables, can be customized further if dark mode is implemented */\n    --background: 220 10% 10%;\n    --foreground: 0 0% 95%;\n    \n    --card: 220 10% 12%;\n    --card-foreground: 0 0% 95%;\n    \n    --popover: 220 10% 10%;\n    --popover-foreground: 0 0% 95%;\n    \n    --primary: 16 100% 63%; /* Coral #FF7043 */\n    --primary-foreground: 0 0% 100%; /* White */\n    \n    --secondary: 210 20% 20%;\n    --secondary-foreground: 0 0% 90%;\n    \n    --muted: 210 20% 15%;\n    --muted-foreground: 0 0% 60%;\n    \n    --accent: 195 100% 25%; \n    --accent-foreground: 195 80% 90%;\n    \n    --destructive: 0 70% 50%;\n    --destructive-foreground: 0 0% 98%;\n    \n    --border: 210 20% 25%;\n    --input: 210 20% 20%;\n    --ring: 16 100% 63%; /* Coral */\n    \n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
    },
    "calendario": {
      "__archivos__": {
        "page.tsx": "\n// src/app/calendario/page.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { AssignmentModal } from '@/components/calendario/AssignmentModal';\nimport { AssignmentCard } from '@/components/calendario/AssignmentCard';\nimport { PlusCircle, Info, CalendarCheck, Loader2, AlertTriangle, RotateCcw, CalendarDays } from 'lucide-react';\nimport type { CalendarAssignment, Prenda, Look, CalendarAssignmentFormData } from '@/types';\nimport { getCalendarAssignmentsAction, addCalendarAssignmentAction, updateCalendarAssignmentAction, deleteCalendarAssignmentAction, getPrendasAction, getLooksAction } from '@/app/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { format, startOfMonth, endOfMonth, isSameDay, getMonth, getYear, addMonths, subMonths } from 'date-fns';\nimport { es } from 'date-fns/locale'; // Changed from require\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\n\n\nexport default function CalendarioPage() {\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(new Date());\n  const [currentMonthView, setCurrentMonthView] = React.useState<Date>(new Date()); // For fetching assignments\n  const [assignments, setAssignments] = React.useState<CalendarAssignment[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [editingAssignment, setEditingAssignment] = React.useState<CalendarAssignment | null>(null);\n\n  const [availablePrendas, setAvailablePrendas] = React.useState<Prenda[]>([]);\n  const [availableLooks, setAvailableLooks] = React.useState<Look[]>([]);\n  \n  const [assignmentToDelete, setAssignmentToDelete] = React.useState<CalendarAssignment | null>(null);\n\n\n  const { toast } = useToast();\n\n  const fetchAssignments = React.useCallback(async (monthDate: Date) => {\n    setIsLoading(true);\n    setError(null);\n    const result = await getCalendarAssignmentsAction(monthDate);\n    if (result.error) {\n      setError(result.error);\n      toast({ title: \"Error\", description: result.error, variant: \"destructive\" });\n      setAssignments([]);\n    } else {\n      setAssignments(result.data || []);\n    }\n    setIsLoading(false);\n  }, [toast]);\n\n  const fetchPrendasAndLooks = React.useCallback(async () => {\n    // This only needs to be done once, or if prendas/looks change often\n    const [prendasResult, looksResult] = await Promise.all([\n      getPrendasAction(),\n      getLooksAction(),\n    ]);\n    if (prendasResult.data) setAvailablePrendas(prendasResult.data.filter(p => !p.is_archived));\n    if (looksResult.data) setAvailableLooks(looksResult.data);\n  }, []);\n\n  React.useEffect(() => {\n    fetchAssignments(currentMonthView);\n    fetchPrendasAndLooks();\n  }, [fetchAssignments, fetchPrendasAndLooks, currentMonthView]);\n  \n  const handleMonthChange = (month: Date) => {\n    setCurrentMonthView(month);\n  };\n\n  const handleAddOrEditAssignment = (date: Date | undefined, assignment?: CalendarAssignment) => {\n    if (!date) {\n      toast({ title: \"Error\", description: \"Por favor, selecciona una fecha primero.\", variant: \"destructive\" });\n      return;\n    }\n    setSelectedDate(date); // Ensure selectedDate is set for the modal\n    setEditingAssignment(assignment || null);\n    setIsModalOpen(true);\n  };\n\n  const handleFormSubmit = async (data: CalendarAssignmentFormData, assignmentId?: number) => {\n    const action = assignmentId\n      ? updateCalendarAssignmentAction(assignmentId, data)\n      : addCalendarAssignmentAction(data);\n    \n    const result = await action;\n    if (result.error) {\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n    } else {\n      toast({ title: 'Éxito', description: `Asignación ${assignmentId ? 'actualizada' : 'creada'}.` });\n      fetchAssignments(currentMonthView); // Refresh assignments for the current month\n    }\n    return result;\n  };\n\n  const handleDeleteConfirmation = (assignment: CalendarAssignment) => {\n    setAssignmentToDelete(assignment);\n  };\n\n  const executeDelete = async () => {\n    if (!assignmentToDelete) return;\n    const result = await deleteCalendarAssignmentAction(assignmentToDelete.id);\n    if (result.error) {\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n    } else {\n      toast({ title: 'Éxito', description: 'Asignación eliminada.' });\n      fetchAssignments(currentMonthView);\n      // If the deleted assignment was for the currently selectedDate, clear it\n      if (selectedDate && getAssignmentsForDate(selectedDate).length === 0) {\n        // No more assignments for this day after delete\n      }\n    }\n    setAssignmentToDelete(null);\n  };\n\n  const getAssignmentsForDate = (date: Date | undefined): CalendarAssignment[] => {\n    if (!date) return [];\n    return assignments.filter(event => {\n        // Ensure event.fecha is a valid date string before parsing\n        // Supabase DATE type returns 'YYYY-MM-DD' string\n        const eventDate = new Date(event.fecha + 'T00:00:00'); // Add time part to avoid timezone issues with isSameDay\n        return isSameDay(eventDate, date);\n    });\n  };\n  \n  const selectedDateAssignments = getAssignmentsForDate(selectedDate);\n\n  const eventDays = React.useMemo(() => \n    assignments.map(a => new Date(a.fecha + 'T00:00:00')) // Add time part for consistency\n  , [assignments]);\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-center mb-8 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Calendario de Atuendos</h1>\n            <p className=\"text-muted-foreground text-sm\">Organiza y visualiza tus outfits diarios.</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={() => { setSelectedDate(new Date()); setCurrentMonthView(new Date()); }} variant=\"outline\" className=\"shadow\">\n              <CalendarDays className=\"mr-2 h-4 w-4\"/> Hoy\n            </Button>\n            <Button onClick={() => handleAddOrEditAssignment(selectedDate || new Date())} className=\"shadow-md\">\n             <PlusCircle className=\"mr-2 h-5 w-5\" />\n             Asignar a Fecha\n           </Button>\n          </div>\n        </div>\n\n        {error && !isLoading && (\n          <div className=\"my-6 p-4 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex items-center gap-3\">\n            <AlertTriangle className=\"h-6 w-6\" />\n            <div>\n              <h3 className=\"font-semibold\">Error al cargar asignaciones</h3>\n              <p className=\"text-sm\">{error}</p>\n              <Button variant=\"link\" onClick={() => fetchAssignments(currentMonthView)} className=\"p-0 h-auto text-destructive mt-1\">\n                <RotateCcw className=\"mr-2 h-4 w-4\"/>Intentar de nuevo\n              </Button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <Card className=\"md:col-span-2 shadow-lg rounded-xl\">\n            <CardContent className=\"p-1 sm:p-2 flex justify-center\">\n              {isLoading && !error ? (\n                <div className=\"flex justify-center items-center h-96\">\n                  <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                </div>\n              ) : (\n                <Calendar\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={setSelectedDate}\n                  month={currentMonthView}\n                  onMonthChange={handleMonthChange}\n                  className=\"rounded-md w-full\"\n                  ISOWeek\n                  locale={es}\n                  modifiers={{ event: eventDays }}\n                  modifiersClassNames={{\n                    event: 'bg-primary/20 rounded-full text-primary-foreground font-semibold'\n                  }}\n                />\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"md:col-span-1 space-y-6\">\n            <Card className=\"shadow-lg rounded-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  {selectedDate ? format(selectedDate, \"PPP\", { locale: es }) : 'Selecciona una fecha'}\n                </CardTitle>\n                 <CardDescription>Atuendos asignados para este día.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {isLoading && <div className=\"text-center py-6\"><Loader2 className=\"h-6 w-6 animate-spin mx-auto text-muted-foreground\"/></div>}\n                {!isLoading && selectedDateAssignments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {selectedDateAssignments.map(event => (\n                      <AssignmentCard \n                        key={event.id} \n                        assignment={event}\n                        onEdit={() => handleAddOrEditAssignment(selectedDate, event)}\n                        onDelete={() => handleDeleteConfirmation(event)}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  !isLoading && (\n                    <div className=\"text-center py-6 text-muted-foreground\">\n                      <CalendarCheck className=\"mx-auto h-10 w-10 mb-3 opacity-50\" />\n                      <p>No hay atuendos asignados para esta fecha.</p>\n                      <Button variant=\"link\" className=\"mt-2\" onClick={() => handleAddOrEditAssignment(selectedDate || new Date())}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" /> Asignar uno\n                      </Button>\n                    </div>\n                  )\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {selectedDate && (\n          <AssignmentModal\n            isOpen={isModalOpen}\n            onOpenChange={setIsModalOpen}\n            onSubmit={handleFormSubmit}\n            selectedDate={selectedDate}\n            existingAssignment={editingAssignment}\n            availablePrendas={availablePrendas}\n            availableLooks={availableLooks}\n          />\n        )}\n\n        {assignmentToDelete && (\n          <AlertDialog open={!!assignmentToDelete} onOpenChange={(open) => !open && setAssignmentToDelete(null)}>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Esta acción no se puede deshacer. Esto eliminará la asignación de\n                  \"{assignmentToDelete.tipo_asignacion === 'prenda' ? assignmentToDelete.prenda?.nombre : assignmentToDelete.look?.nombre}\"\n                  para el día {assignmentToDelete.fecha ? format(new Date(assignmentToDelete.fecha + 'T00:00:00'), \"PPP\", { locale: es }) : 'desconocido'}.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel onClick={() => setAssignmentToDelete(null)}>Cancelar</AlertDialogCancel>\n                <AlertDialogAction onClick={executeDelete} className=\"bg-destructive hover:bg-destructive/90\">\n                  Eliminar\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        )}\n\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\n"
      }
    },
    "sugerenciaia": {
      "__archivos__": {
        "page.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { TemperatureControl } from '@/components/TemperatureControl';\nimport { StyleSelection } from '@/components/StyleSelection';\nimport { OutfitSuggestion } from '@/components/OutfitSuggestion';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Loader2, AlertTriangle, MessageSquareText } from 'lucide-react';\nimport { getAISuggestionAction } from '../actions'; // Adjusted import path\nimport type { SuggestedOutfit, HistoricalSuggestion } from '@/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { Footer } from '@/components/ui/Footer';\nimport { OutfitExplanation } from '@/components/OutfitExplanation';\nimport { SuggestionHistory } from '@/components/SuggestionHistory';\nimport { InspirationCard } from '@/components/InspirationCard';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\n\nconst LOCAL_STORAGE_HISTORY_KEY = 'estilosia_suggestion_history';\nconst LOCAL_STORAGE_NOTES_KEY = 'estilosia_user_notes_suggester'; // Unique key for this page's notes\n\nexport default function SugerenciaAIPage() { // Renamed from HomePage\n  const [temperature, setTemperature] = React.useState<[number, number]>([18, 22]);\n  const [selectedStyle, setSelectedStyle] = React.useState<string | null>('casual');\n  const [useClosetInfo, setUseClosetInfo] = React.useState<boolean>(true);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [suggestion, setSuggestion] = React.useState<SuggestedOutfit | null>(null);\n  const [error, setError] = React.useState<string | null>(null);\n  \n  const [suggestionHistory, setSuggestionHistory] = React.useState<HistoricalSuggestion[]>([]);\n  const [userNotes, setUserNotes] = React.useState<string>('');\n\n  const { toast } = useToast();\n\n  React.useEffect(() => {\n    const storedHistory = localStorage.getItem(LOCAL_STORAGE_HISTORY_KEY);\n    if (storedHistory) {\n      try {\n        setSuggestionHistory(JSON.parse(storedHistory));\n      } catch (e) {\n        console.error(\"Failed to parse suggestion history from localStorage\", e);\n        localStorage.removeItem(LOCAL_STORAGE_HISTORY_KEY);\n      }\n    }\n    const storedNotes = localStorage.getItem(LOCAL_STORAGE_NOTES_KEY);\n    if (storedNotes) {\n      setUserNotes(storedNotes);\n    }\n  }, []);\n\n  const saveHistory = (history: HistoricalSuggestion[]) => {\n    try {\n      localStorage.setItem(LOCAL_STORAGE_HISTORY_KEY, JSON.stringify(history));\n    } catch (e) {\n      console.error(\"Failed to save suggestion history to localStorage\", e);\n      toast({\n        title: \"Error de almacenamiento\",\n        description: \"No se pudo guardar el historial. Puede que el almacenamiento local esté lleno.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const saveNotes = (notes: string) => {\n    try {\n      localStorage.setItem(LOCAL_STORAGE_NOTES_KEY, notes);\n    } catch (e)\n    {\n      console.error(\"Failed to save notes to localStorage\", e);\n    }\n  };\n\n  const handleGetSuggestion = async () => {\n    if (!selectedStyle) {\n      toast({\n        title: 'Error de Selección',\n        description: 'Por favor, selecciona un estilo antes de continuar.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    const result = await getAISuggestionAction({\n      temperature,\n      styleId: selectedStyle,\n      useClosetInfo,\n    });\n\n    if ('error' in result) {\n      setError(result.error);\n      setSuggestion(null);\n      toast({\n        title: 'Error al generar sugerencia',\n        description: result.error,\n        variant: 'destructive',\n      });\n    } else {\n      setSuggestion(result);\n      const newHistoryItem: HistoricalSuggestion = {\n        id: Date.now().toString(),\n        timestamp: Date.now(),\n        temperature,\n        selectedStyle,\n        useClosetInfo,\n        suggestion: result,\n      };\n      const updatedHistory = [newHistoryItem, ...suggestionHistory].slice(0, 10);\n      setSuggestionHistory(updatedHistory);\n      saveHistory(updatedHistory);\n    }\n    setIsLoading(false);\n  };\n\n  const handleApplyHistoryItem = (historicalItem: HistoricalSuggestion) => {\n    setTemperature(historicalItem.temperature);\n    setSelectedStyle(historicalItem.selectedStyle);\n    setUseClosetInfo(historicalItem.useClosetInfo);\n    setSuggestion(historicalItem.suggestion);\n    setError(null);\n    toast({ title: 'Sugerencia Aplicada', description: 'Se cargaron los parámetros y la sugerencia del historial.' });\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleClearHistory = () => {\n    setSuggestionHistory([]);\n    localStorage.removeItem(LOCAL_STORAGE_HISTORY_KEY);\n    toast({ title: 'Historial Limpiado', description: 'Se han eliminado todas las sugerencias guardadas.' });\n  };\n\n  const handleUserNotesChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newNotes = event.target.value;\n    setUserNotes(newNotes);\n    saveNotes(newNotes);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-8\">\n            <TemperatureControl value={temperature} onChange={setTemperature} />\n            <StyleSelection selectedStyle={selectedStyle} onStyleSelect={setSelectedStyle} />\n\n            <div className=\"flex items-center space-x-2 p-4 bg-card rounded-xl shadow-lg\">\n              <Checkbox\n                id=\"useClosetInfo\"\n                checked={useClosetInfo}\n                onCheckedChange={(checked) => setUseClosetInfo(Boolean(checked))}\n                aria-label=\"Usar información del armario\"\n              />\n              <Label htmlFor=\"useClosetInfo\" className=\"text-sm font-medium text-foreground cursor-pointer\">\n                Personalizar con información de mi armario\n              </Label>\n            </div>\n            \n            <Button\n              onClick={handleGetSuggestion}\n              disabled={isLoading || !selectedStyle}\n              className=\"w-full py-3 text-lg font-semibold rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200\"\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              ) : (\n                'Obtener Sugerencia de Atuendo'\n              )}\n            </Button>\n\n            {error && (\n              <div className=\"mt-6 p-4 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                <p className=\"text-sm font-medium\">{error}</p>\n              </div>\n            )}\n\n            {suggestion && <OutfitSuggestion suggestion={suggestion} />}\n            {suggestion && <OutfitExplanation explanation={suggestion.explanation} />}\n\n            {suggestion && (\n                <Card className=\"shadow-lg rounded-xl mt-6\">\n                    <CardHeader>\n                        <CardTitle className=\"flex items-center text-lg font-semibold\">\n                            <MessageSquareText className=\"mr-2 h-5 w-5 text-primary\" />\n                            Mis Notas sobre este Look\n                        </CardTitle>\n                        <CardDescription className=\"text-xs\">\n                            Añade cualquier apunte o recordatorio sobre esta sugerencia.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <Textarea\n                            placeholder=\"Ej: Perfecto para la cena del viernes, probar con otros zapatos...\"\n                            value={userNotes}\n                            onChange={handleUserNotesChange}\n                            rows={4}\n                            className=\"resize-none\"\n                        />\n                    </CardContent>\n                </Card>\n            )}\n          </div>\n\n          <div className=\"lg:col-span-1 space-y-8 lg:pt-0\">\n            <SuggestionHistory history={suggestionHistory} onApplySuggestion={handleApplyHistoryItem} onClearHistory={handleClearHistory} />\n            <InspirationCard />\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "configuracion": {
      "__archivos__": {
        "page.tsx": "\n// src/app/configuracion/page.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Palette, Shirt, SunMoon, Mail, Save } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { styleOptions } from '@/components/StyleSelection'; // Reusing styleOptions\n\n// This would typically come from user settings in DB\ninterface UserPreferences {\n  favoriteColorPalette: string;\n  predominantStyle: string;\n  defaultSizes: Record<string, string>; // e.g. { \"Camisa\": \"M\", \"Pantalón\": \"32\" }\n  darkMode: boolean;\n  email?: string;\n}\n\nconst CLOTHING_TYPES_FOR_SIZES = ['Camisa', 'Pantalón', 'Zapatos', 'Chaqueta'] as const;\n\n\nexport default function ConfiguracionPage() {\n  const { toast } = useToast();\n  const [preferences, setPreferences] = React.useState<UserPreferences>({\n    favoriteColorPalette: 'neutros', // example\n    predominantStyle: 'casual', // example\n    defaultSizes: { \"Camisa\": \"M\", \"Pantalón\": \"32\" },\n    darkMode: false,\n    email: '',\n  });\n  const [isLoading, setIsLoading] = React.useState(false); // For saving state\n\n  // TODO: Implement fetching user preferences from DB\n  // React.useEffect(() => {\n  //   const fetchPrefs = async () => { /* ... */ };\n  //   fetchPrefs();\n  // }, []);\n\n  const handleInputChange = (field: keyof UserPreferences, value: any) => {\n    setPreferences(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSizeChange = (type: string, size: string) => {\n    setPreferences(prev => ({\n      ...prev,\n      defaultSizes: { ...prev.defaultSizes, [type]: size },\n    }));\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    // TODO: Implement saving preferences to DB via a server action\n    // const result = await saveUserPreferencesAction(preferences);\n    // if (result.error) {\n    //   toast({ title: \"Error\", description: result.error, variant: \"destructive\" });\n    // } else {\n    //   toast({ title: \"Éxito\", description: \"Preferencias guardadas.\" });\n    // }\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n    toast({ title: \"Guardado (Simulado)\", description: \"Tus preferencias han sido guardadas (simulación).\" });\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-8\">Configuración</h1>\n        \n        <form onSubmit={handleSubmit} className=\"max-w-2xl mx-auto space-y-8\">\n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\"><Palette className=\"mr-2 h-5 w-5 text-primary\" />Estilo Personal</CardTitle>\n              <CardDescription>Define tus preferencias de estilo para mejores sugerencias.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"favoriteColorPalette\">Paleta de Colores Favorita</Label>\n                <Select \n                  value={preferences.favoriteColorPalette} \n                  onValueChange={(value) => handleInputChange('favoriteColorPalette', value)}\n                >\n                  <SelectTrigger id=\"favoriteColorPalette\">\n                    <SelectValue placeholder=\"Selecciona tu paleta\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"neutros\">Neutros</SelectItem>\n                    <SelectItem value=\"vibrantes\">Vibrantes</SelectItem>\n                    <SelectItem value=\"pasteles\">Pasteles</SelectItem>\n                    <SelectItem value=\"oscuros\">Oscuros</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"predominantStyle\">Estilo Predominante</Label>\n                 <Select \n                  value={preferences.predominantStyle} \n                  onValueChange={(value) => handleInputChange('predominantStyle', value)}\n                >\n                  <SelectTrigger id=\"predominantStyle\">\n                    <SelectValue placeholder=\"Selecciona tu estilo principal\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {styleOptions.map(opt => <SelectItem key={opt.id} value={opt.id}>{opt.name}</SelectItem>)}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\"><Shirt className=\"mr-2 h-5 w-5 text-primary\" />Tallas por Defecto</CardTitle>\n              <CardDescription>Define tus tallas comunes para agilizar la carga de prendas.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {CLOTHING_TYPES_FOR_SIZES.map(type => (\n                <div key={type} className=\"grid grid-cols-3 gap-4 items-center\">\n                  <Label htmlFor={`size-${type}`} className=\"col-span-1\">{type}</Label>\n                  <Input \n                    id={`size-${type}`} \n                    value={preferences.defaultSizes[type] || ''}\n                    onChange={(e) => handleSizeChange(type, e.target.value)}\n                    placeholder=\"Ej: M, 32, 40\"\n                    className=\"col-span-2\"\n                  />\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\"><SunMoon className=\"mr-2 h-5 w-5 text-primary\" />Apariencia</CardTitle>\n            </CardHeader>\n            <CardContent>\n               <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"darkMode\" className=\"flex flex-col space-y-1\">\n                  <span>Modo Oscuro</span>\n                  <span className=\"font-normal leading-snug text-muted-foreground\">\n                    Activa el tema oscuro para la aplicación.\n                  </span>\n                </Label>\n                <Switch \n                  id=\"darkMode\" \n                  checked={preferences.darkMode}\n                  onCheckedChange={(checked) => handleInputChange('darkMode', checked)} \n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\"><Mail className=\"mr-2 h-5 w-5 text-primary\" />Cuenta</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div>\n                <Label htmlFor=\"email\">Correo Electrónico (Opcional)</Label>\n                <Input \n                  id=\"email\" \n                  type=\"email\" \n                  value={preferences.email || ''}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  placeholder=\"tu@email.com\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">Para notificaciones y recuperación de cuenta.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end pt-4\">\n            <Button type=\"submit\" className=\"w-full sm:w-auto\" disabled={isLoading}>\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              <Save className=\"mr-2 h-4 w-4\" /> Guardar Preferencias\n            </Button>\n          </div>\n        </form>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "deseos": {
      "__archivos__": {
        "page.tsx": "\n// src/app/deseos/page.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { Button } from '@/components/ui/button';\nimport { WishlistItemCard } from '@/components/wishlist/WishlistItemCard';\nimport { WishlistForm } from '@/components/wishlist/WishlistForm';\nimport { PlusCircle, HeartCrack, Loader2 } from 'lucide-react';\nimport type { WishlistItem, WishlistFormData } from '@/types';\nimport { useToast } from '@/hooks/use-toast';\n\n// Mock data - replace with actual data fetching\nconst mockWishlistItems: WishlistItem[] = [\n  { \n    id: '1', name: 'Zapatillas Deportivas Blancas', \n    imageUrl: 'https://placehold.co/300x400.png', \n    estimatedPrice: 75, storeUrl: 'https://ejemplo.com/zapatillas',\n    status: 'pending', added_at: new Date().toISOString()\n  },\n  { \n    id: '2', name: 'Bolso de Cuero Negro', \n    imageUrl: 'https://placehold.co/300x400.png', \n    estimatedPrice: 120,\n    status: 'pending', added_at: new Date().toISOString()\n  },\n  { \n    id: '3', name: 'Vestido Floral Verano', \n    imageUrl: 'https://placehold.co/300x400.png', \n    status: 'purchased', added_at: new Date().toISOString()\n  },\n];\n\nexport default function DeseosPage() {\n  const [wishlistItems, setWishlistItems] = React.useState<WishlistItem[]>(mockWishlistItems);\n  const [isFormOpen, setIsFormOpen] = React.useState(false);\n  const [editingItem, setEditingItem] = React.useState<WishlistItem | null>(null);\n  const [isLoading, setIsLoading] = React.useState(false); // For data fetching\n  const { toast } = useToast();\n\n  // TODO: Implement data fetching, adding, updating, deleting wishlist items via server actions\n\n  const handleFormSubmit = async (data: WishlistFormData, itemId?: string) => {\n    // Simulate API call\n    console.log(\"Submitting wishlist item:\", data, \"Item ID:\", itemId);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    if (itemId) { // Editing\n      setWishlistItems(prev => prev.map(item => item.id === itemId ? { ...item, ...data, id: itemId, status: item.status, added_at: item.added_at } : item));\n      toast({ title: \"Éxito\", description: \"Elemento de la lista de deseos actualizado.\" });\n    } else { // Adding\n      const newItem: WishlistItem = { ...data, id: Date.now().toString(), status: 'pending', added_at: new Date().toISOString() };\n      setWishlistItems(prev => [newItem, ...prev]);\n      toast({ title: \"Éxito\", description: \"Elemento agregado a la lista de deseos.\" });\n    }\n    return {}; // Return empty object or actual result\n  };\n\n  const handleEditItem = (item: WishlistItem) => {\n    setEditingItem(item);\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteItem = async (itemId: string) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setWishlistItems(prev => prev.filter(item => item.id !== itemId));\n    toast({ title: \"Eliminado\", description: \"Elemento eliminado de la lista de deseos.\" });\n  };\n\n  const handleStatusChange = async (itemId: string, status: WishlistItem['status']) => {\n     // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setWishlistItems(prev => prev.map(item => item.id === itemId ? {...item, status} : item));\n    toast({ title: \"Actualizado\", description: `Estado del elemento cambiado a ${status}.` });\n  };\n\n  const openNewForm = () => {\n    setEditingItem(null);\n    setIsFormOpen(true);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Lista de Deseos</h1>\n          <Button onClick={openNewForm} className=\"shadow-md\">\n            <PlusCircle className=\"mr-2 h-5 w-5\" />\n            Agregar Deseo\n          </Button>\n        </div>\n\n        {isLoading && (\n            <div className=\"flex justify-center items-center py-10\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n        )}\n\n        {!isLoading && wishlistItems.length === 0 && (\n          <div className=\"text-center py-10 border-2 border-dashed border-border rounded-lg\">\n            <HeartCrack className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">Tu lista de deseos está vacía</h2>\n            <p className=\"text-muted-foreground mb-4\">Añade prendas que te gustaría comprar o tener.</p>\n            <Button onClick={openNewForm}>\n              <PlusCircle className=\"mr-2 h-4 w-4\" />\n              Agregar tu Primer Deseo\n            </Button>\n          </div>\n        )}\n\n        {!isLoading && wishlistItems.length > 0 && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n            {wishlistItems.map((item) => (\n              <WishlistItemCard \n                key={item.id} \n                item={item} \n                onEdit={handleEditItem}\n                onDelete={handleDeleteItem}\n                onStatusChange={handleStatusChange}\n              />\n            ))}\n          </div>\n        )}\n\n        <WishlistForm\n          isOpen={isFormOpen}\n          onOpenChange={setIsFormOpen}\n          onSubmit={handleFormSubmit}\n          initialData={editingItem}\n        />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "archivo": {
      "__archivos__": {
        "page.tsx": "\n// src/app/archivo/page.tsx\n'use client';\n\nimport * as React from 'react';\nimport Image from 'next/image';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { ArchiveRestore, ArchiveX, Loader2 } from 'lucide-react';\nimport type { Prenda } from '@/types';\nimport { getPrendasAction, updatePrendaAction } from '@/app/actions'; // Assuming actions can handle archive flag\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function ArchivoPage() {\n  const [archivedItems, setArchivedItems] = React.useState<Prenda[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const { toast } = useToast();\n\n  const fetchArchivedItems = React.useCallback(async () => {\n    setIsLoading(true);\n    const result = await getPrendasAction(); // This action needs to be able to filter by an 'is_archived' flag\n    if (result.error || !result.data) {\n      toast({ title: \"Error\", description: result.error || \"No se pudieron cargar las prendas archivadas.\", variant: \"destructive\" });\n      setArchivedItems([]);\n    } else {\n      setArchivedItems(result.data.filter(item => item.is_archived));\n    }\n    setIsLoading(false);\n  }, [toast]);\n\n  React.useEffect(() => {\n    fetchArchivedItems();\n  }, [fetchArchivedItems]);\n\n  const handleUnarchiveItem = async (item: Prenda) => {\n    const formData = new FormData();\n    Object.entries(item).forEach(([key, value]) => {\n      if (key === 'is_archived') {\n        formData.append(key, 'false'); // Unarchive\n      } else if (value !== undefined && value !== null) {\n         if (key === 'fechacompra' && typeof value === 'string' && value) {\n           // Ensure fechacompra is passed as a string if it's already a string\n           formData.append(key, value);\n         } else if (value instanceof Date) {\n          formData.append(key, value.toISOString().split('T')[0]);\n        } else if (typeof value === 'number') {\n           formData.append(key, value.toString());\n        } else if (typeof value === 'boolean') { // handle other booleans if any\n           formData.append(key, String(value));\n        }\n         else {\n          formData.append(key, String(value));\n        }\n      }\n    });\n    \n    // Explicitly set is_archived to false for the update\n    formData.set('is_archived', 'false');\n\n    const result = await updatePrendaAction(item.id, formData);\n    if (result.error) {\n      toast({ title: \"Error\", description: `No se pudo restaurar \"${item.nombre}\". ${result.error}`, variant: \"destructive\" });\n    } else {\n      toast({ title: \"Éxito\", description: `\"${item.nombre}\" restaurada al armario principal.` });\n      fetchArchivedItems(); // Refresh the list\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-8\">Prendas Archivadas</h1>\n\n        {isLoading && (\n          <div className=\"flex justify-center items-center py-10\">\n            <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            <p className=\"ml-4 text-lg text-muted-foreground\">Cargando prendas archivadas...</p>\n          </div>\n        )}\n\n        {!isLoading && archivedItems.length === 0 && (\n          <div className=\"text-center py-10 border-2 border-dashed border-border rounded-lg\">\n            <ArchiveX className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">No tienes prendas archivadas</h2>\n            <p className=\"text-muted-foreground\">Aquí aparecerán las prendas que marques como fuera de temporada o que no uses frecuentemente.</p>\n          </div>\n        )}\n\n        {!isLoading && archivedItems.length > 0 && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n            {archivedItems.map((item) => (\n              <Card key={item.id} className=\"flex flex-col shadow-md rounded-lg overflow-hidden\">\n                <CardHeader className=\"p-0\">\n                  <div className=\"aspect-[3/4] relative w-full\">\n                    <Image\n                      src={item.imagen_url || `https://placehold.co/300x400.png?text=${encodeURIComponent(item.nombre)}`}\n                      alt={item.nombre}\n                      fill={true}\n                      sizes=\"(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw\"\n                      className=\"object-cover\"\n                       data-ai-hint={`${item.tipo.toLowerCase()} ${item.color.toLowerCase()}`.substring(0,50)}\n                    />\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-4 flex-grow\">\n                  <h3 className=\"font-semibold text-lg truncate\" title={item.nombre}>{item.nombre}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{item.tipo} - {item.color}</p>\n                </CardContent>\n                <CardFooter className=\"p-4 border-t\">\n                  <Button onClick={() => handleUnarchiveItem(item)} className=\"w-full\" variant=\"outline\">\n                    <ArchiveRestore className=\"mr-2 h-4 w-4\" />\n                    Restaurar al Armario\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "closet": {
      "__archivos__": {
        "page.tsx": "'use client';\nimport * as React from 'react';\nimport { Suspense } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { Button } from '@/components/ui/button';\nimport { ClothingForm, type PrendaFormData } from '@/components/ClothingForm';\nimport { addPrendaAction, getPrendasAction, updatePrendaAction, deletePrendaAction } from '@/app/actions';\nimport type { Prenda } from '@/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { PlusCircle, Loader2, AlertTriangle, PackageOpen, Search, X } from 'lucide-react';\nimport { ClosetFilterBar, type ClosetFilters } from '@/components/ClosetFilterBar';\nimport { GridCardsToggle, type ViewMode } from '@/components/GridCardsToggle';\nimport { ClothingTable } from '@/components/ClothingTable';\nimport { ClothingCard } from '@/components/ClothingCard';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\n\n\n// This component contains the actual content and client-side logic for the closet page.\n// It's a client component because it uses useSearchParams and various useState/useEffect hooks.\nfunction ClosetPageContent() {\n  'use client';\n\n  const [allItems, setAllItems] = React.useState<Prenda[]>([]);\n  const [filteredItems, setFilteredItems] = React.useState<Prenda[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [isFormOpen, setIsFormOpen] = React.useState(false);\n  const [editingItem, setEditingItem] = React.useState<Prenda | null>(null);\n  \n  const [filters, setFilters] = React.useState<ClosetFilters>({\n    searchTerm: '',\n    tipo: '',\n    estilo: '',\n    temporada: '',\n  });\n  const [viewMode, setViewMode] = React.useState<ViewMode>('grid');\n  const [itemToDelete, setItemToDelete] = React.useState<Prenda | null>(null);\n\n\n  const { toast } = useToast();\n  const searchParams = useSearchParams();\n\n  React.useEffect(() => {\n    if (searchParams.get('action') === 'add') {\n      setIsFormOpen(true);\n      setEditingItem(null);\n    }\n  }, [searchParams]);\n\n  const fetchItems = React.useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    const result = await getPrendasAction();\n    if (result.error) {\n      setError(result.error);\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n      setAllItems([]);\n      setFilteredItems([]);\n    } else {\n      setAllItems(result.data || []);\n      setFilteredItems(result.data || []); \n    }\n    setIsLoading(false);\n  }, [toast]);\n\n  React.useEffect(() => {\n    fetchItems();\n  }, [fetchItems]);\n\n  React.useEffect(() => {\n    let tempItems = [...allItems];\n    if (filters.searchTerm) {\n      tempItems = tempItems.filter(item =>\n        item.nombre.toLowerCase().includes(filters.searchTerm.toLowerCase())\n      );\n    }\n    if (filters.tipo) {\n      tempItems = tempItems.filter(item => item.tipo === filters.tipo);\n    }\n    if (filters.estilo) {\n      tempItems = tempItems.filter(item => item.estilo === filters.estilo);\n    }\n    if (filters.temporada) {\n      tempItems = tempItems.filter(item => item.temporada === filters.temporada);\n    }\n    setFilteredItems(tempItems);\n  }, [filters, allItems]);\n\n  const handleFilterChange = (newFilters: ClosetFilters) => {\n    setFilters(newFilters);\n  };\n\n  const handleResetFilters = () => {\n    setFilters({ searchTerm: '', tipo: '', estilo: '', temporada: '' });\n  };\n\n  const handleFormSubmit = async (data: PrendaFormData, itemId?: number) => {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (value instanceof Date) {\n          formData.append(key, value.toISOString().split('T')[0]);\n        } else if (typeof value === 'number') {\n           formData.append(key, value.toString());\n        } else {\n          formData.append(key, String(value));\n        }\n      }\n    });\n\n    const action = itemId !== undefined ? updatePrendaAction(itemId, formData) : addPrendaAction(formData);\n    const result = await action;\n\n    if (!result.error) {\n      toast({\n        title: 'Éxito',\n        description: `Prenda ${itemId ? 'actualizada' : 'agregada'} correctamente.`,\n      });\n      fetchItems(); // Refresh the list\n      setIsFormOpen(false); // Close form on success\n      setEditingItem(null);\n    } else {\n       toast({\n        title: 'Error',\n        description: result.validationErrors ? result.validationErrors.map(e => e.message).join(', ') : result.error,\n        variant: 'destructive',\n      });\n    }\n    return result;\n  };\n\n  const handleDeleteConfirmation = (item: Prenda) => {\n    setItemToDelete(item);\n  };\n\n  const executeDelete = async () => {\n    if (!itemToDelete) return;\n    const result = await deletePrendaAction(itemToDelete.id);\n    if (result.error) {\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n    } else {\n      toast({ title: 'Éxito', description: 'Prenda eliminada correctamente.' });\n      fetchItems(); // Refresh the list\n    }\n    setItemToDelete(null);\n  };\n\n  const openEditForm = (item: Prenda) => {\n    setEditingItem(item);\n    setIsFormOpen(true);\n  };\n\n  const openNewForm = () => {\n    setEditingItem(null);\n    setIsFormOpen(true);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Mi Armario</h1>\n            <p className=\"text-muted-foreground text-sm sm:text-base\">Gestiona todas tus prendas en un solo lugar.</p>\n          </div>\n          <div className=\"flex items-center gap-4 w-full sm:w-auto\">\n            <GridCardsToggle viewMode={viewMode} onViewModeChange={setViewMode} />\n            <Button onClick={openNewForm} className=\"shadow-md flex-grow sm:flex-grow-0\">\n              <PlusCircle className=\"mr-2 h-5 w-5\" />\n              Agregar Prenda\n            </Button>\n          </div>\n        </div>\n\n        <ClosetFilterBar filters={filters} onFilterChange={handleFilterChange} onResetFilters={handleResetFilters} />\n\n        {isLoading && (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            <p className=\"ml-4 text-lg text-muted-foreground\">Cargando prendas...</p>\n          </div>\n        )}\n\n        {error && !isLoading && (\n          <div className=\"my-10 p-6 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex flex-col items-center text-center gap-3\">\n            <AlertTriangle className=\"h-10 w-10\" />\n            <h3 className=\"font-semibold text-xl\">Error al cargar las prendas</h3>\n            <p className=\"text-sm\">{error}</p>\n            <Button variant=\"link\" onClick={fetchItems} className=\"p-0 h-auto text-destructive mt-2\">\n              Intentar de nuevo\n            </Button>\n          </div>\n        )}\n\n        {!isLoading && !error && allItems.length === 0 && (\n          <div className=\"text-center py-20 border-2 border-dashed border-border rounded-lg\">\n            <PackageOpen className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">Tu armario está vacío</h2>\n            <p className=\"text-muted-foreground mb-4\">Empieza agregando algunas prendas para organizar tu estilo.</p>\n            <Button onClick={openNewForm} size=\"lg\">\n              <PlusCircle className=\"mr-2 h-5 w-5\" />\n              Agregar tu Primera Prenda\n            </Button>\n          </div>\n        )}\n\n        {!isLoading && !error && allItems.length > 0 && filteredItems.length === 0 && (\n          <div className=\"text-center py-20 border-2 border-dashed border-border rounded-lg\">\n            <Search className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">No se encontraron prendas</h2>\n            <p className=\"text-muted-foreground mb-4\">Prueba ajustando los filtros o agregando nuevas prendas.</p>\n            <Button onClick={handleResetFilters} variant=\"outline\">\n                <X className=\"mr-2 h-4 w-4\" /> Limpiar Filtros\n            </Button>\n          </div>\n        )}\n        \n        {!isLoading && !error && filteredItems.length > 0 && (\n          viewMode === 'table' ? (\n            <ClothingTable items={filteredItems} onEditItem={openEditForm} onDeleteItem={handleDeleteConfirmation} />\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n              {filteredItems.map(item => (\n                <ClothingCard key={item.id} item={item} onEdit={openEditForm} onDelete={handleDeleteConfirmation} />\n              ))}\n            </div>\n          )\n        )}\n\n        <ClothingForm\n          isOpen={isFormOpen}\n          onOpenChange={setIsFormOpen}\n          onSubmit={handleFormSubmit}\n          initialData={editingItem}\n          itemId={editingItem?.id}\n        />\n\n        {itemToDelete && (\n          <AlertDialog open={!!itemToDelete} onOpenChange={(open) => !open && setItemToDelete(null)}>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Esta acción no se puede deshacer. Esto eliminará permanentemente la prenda &quot;{itemToDelete.nombre}&quot;.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel onClick={() => setItemToDelete(null)}>Cancelar</AlertDialogCancel>\n                <AlertDialogAction onClick={executeDelete} className=\"bg-destructive hover:bg-destructive/90 text-destructive-foreground\">\n                  Eliminar\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\n// Loading fallback for the Suspense boundary\nfunction ClosetPageLoading() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8 flex justify-center items-center\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n        <p className=\"ml-4 text-lg text-muted-foreground\">Cargando armario...</p>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\n// The default export for the page, which sets up the Suspense boundary\nexport default function ClosetPage() {\n  return (\n    <Suspense fallback={<ClosetPageLoading />}>\n      <ClosetPageContent />\n    </Suspense>\n  );\n}\n"
      }
    },
    "settings": {
      "__archivos__": {
        "page.tsx": "\n// src/app/settings/page.tsx\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer'; // Import Footer\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-6\">Configuración</h1>\n        <div className=\"bg-card p-6 rounded-lg shadow\">\n          <p className=\"text-muted-foreground\">\n            Esta sección está en construcción. ¡Aquí podrás configurar tus preferencias de la aplicación!\n          </p>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "privacy-policy": {
      "__archivos__": {
        "page.tsx": "\n// src/app/privacy-policy/page.tsx\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\n\nexport default function PrivacyPolicyPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <div className=\"max-w-3xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-6\">Política de Privacidad</h1>\n          <div className=\"prose prose-sm sm:prose-base lg:prose-lg dark:prose-invert bg-card p-6 rounded-lg shadow\">\n            <p>\n              Bienvenido a EstilosIA. Tu privacidad es importante para nosotros.\n            </p>\n            <p>\n              Esta es una política de privacidad de ejemplo. Deberías reemplazar este contenido\n              con tu propia política de privacidad detallada, cubriendo aspectos como:\n            </p>\n            <ul>\n              <li>Qué información recolectamos (datos personales, datos de uso, etc.).</li>\n              <li>Cómo usamos la información recolectada.</li>\n              <li>Con quién compartimos tu información.</li>\n              <li>Cómo protegemos tu información.</li>\n              <li>Tus derechos sobre tus datos personales.</li>\n              <li>Uso de cookies y tecnologías de seguimiento.</li>\n              <li>Enlaces a sitios de terceros.</li>\n              <li>Cambios a esta política de privacidad.</li>\n              <li>Información de contacto.</li>\n            </ul>\n            <p>\n              [Fecha de última actualización: DD/MM/AAAA]\n            </p>\n            <p>\n              Por favor, consulta a un profesional legal para asegurarte de que tu política de privacidad\n              cumple con todas las regulaciones aplicables.\n            </p>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "looks": {
      "__archivos__": {
        "page.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { Button } from '@/components/ui/button';\nimport { LookCard } from '@/components/looks/LookCard';\nimport { LookForm } from '@/components/looks/LookForm';\nimport { PlusCircle, Brush, Loader2, AlertTriangle } from 'lucide-react';\nimport type { Look, LookFormData, Prenda } from '@/types';\nimport { getLooksAction, addLookAction, updateLookAction, deleteLookAction, getPrendasAction } from '@/app/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\n\nexport default function LooksPage() {\n  const [looks, setLooks] = React.useState<Look[]>([]);\n  const [availablePrendas, setAvailablePrendas] = React.useState<Prenda[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isFormOpen, setIsFormOpen] = React.useState(false);\n  const [editingLook, setEditingLook] = React.useState<Look | null>(null);\n  const [lookToDelete, setLookToDelete] = React.useState<Look | null>(null);\n  const [error, setError] = React.useState<string | null>(null);\n  const { toast } = useToast();\n\n  const fetchLooksAndPrendas = React.useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const [looksResult, prendasResult] = await Promise.all([\n        getLooksAction(),\n        getPrendasAction(),\n      ]);\n\n      if (looksResult.error) throw new Error(looksResult.error);\n      setLooks(looksResult.data || []);\n\n      if (prendasResult.error) throw new Error(prendasResult.error);\n      setAvailablePrendas(prendasResult.data?.filter(p => !p.is_archived) || []);\n\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : \"Error desconocido al cargar datos.\";\n      setError(errorMessage);\n      toast({ title: 'Error', description: errorMessage, variant: 'destructive' });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [toast]);\n\n  React.useEffect(() => {\n    fetchLooksAndPrendas();\n  }, [fetchLooksAndPrendas]);\n\n  const handleOpenForm = (look?: Look) => {\n    setEditingLook(look || null);\n    setIsFormOpen(true);\n  };\n\n  const handleFormSubmit = async (data: LookFormData, lookId?: number) => {\n    const action = lookId ? updateLookAction(lookId, data) : addLookAction(data);\n    const result = await action;\n\n    if (result.error) {\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n    } else {\n      toast({ title: 'Éxito', description: `Look ${lookId ? 'actualizado' : 'creado'} correctamente.` });\n      fetchLooksAndPrendas(); // Refresh the list\n      setIsFormOpen(false);\n    }\n    return result;\n  };\n\n  const handleDeleteConfirmation = (look: Look) => {\n    setLookToDelete(look);\n  };\n\n  const executeDelete = async () => {\n    if (!lookToDelete) return;\n    const result = await deleteLookAction(lookToDelete.id);\n    if (result.error) {\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n    } else {\n      toast({ title: 'Éxito', description: 'Look eliminado correctamente.' });\n      fetchLooksAndPrendas(); // Refresh\n    }\n    setLookToDelete(null);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-center mb-8 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Mis Looks</h1>\n            <p className=\"text-muted-foreground text-sm sm:text-base\">Tus combinaciones de prendas guardadas.</p>\n          </div>\n          <Button onClick={() => handleOpenForm()} className=\"shadow-md w-full sm:w-auto\">\n            <PlusCircle className=\"mr-2 h-5 w-5\" />\n            Crear Nuevo Look\n          </Button>\n        </div>\n\n        {isLoading && (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            <p className=\"ml-4 text-lg text-muted-foreground\">Cargando looks...</p>\n          </div>\n        )}\n\n        {error && !isLoading && (\n          <div className=\"my-10 p-6 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex flex-col items-center text-center gap-3\">\n            <AlertTriangle className=\"h-10 w-10\" />\n            <h3 className=\"font-semibold text-xl\">Error al cargar los looks</h3>\n            <p className=\"text-sm\">{error}</p>\n            <Button variant=\"link\" onClick={fetchLooksAndPrendas} className=\"p-0 h-auto text-destructive mt-2\">\n              Intentar de nuevo\n            </Button>\n          </div>\n        )}\n\n        {!isLoading && !error && looks.length === 0 && (\n          <div className=\"text-center py-20 border-2 border-dashed border-border rounded-lg\">\n            <Brush className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">Aún no has guardado ningún look</h2>\n            <p className=\"text-muted-foreground mb-4\">Empieza a crear combinaciones y guárdalas aquí.</p>\n            <Button onClick={() => handleOpenForm()} size=\"lg\">\n              <PlusCircle className=\"mr-2 h-5 w-5\" />\n              Crear tu Primer Look\n            </Button>\n          </div>\n        )}\n\n        {!isLoading && !error && looks.length > 0 && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n            {looks.map((look) => (\n              <LookCard \n                key={look.id} \n                look={look} \n                onEdit={() => handleOpenForm(look)}\n                onDelete={() => handleDeleteConfirmation(look)}\n              />\n            ))}\n          </div>\n        )}\n\n        <LookForm\n          isOpen={isFormOpen}\n          onOpenChange={setIsFormOpen}\n          onSubmit={handleFormSubmit}\n          initialData={editingLook}\n          availablePrendas={availablePrendas}\n        />\n\n        {lookToDelete && (\n          <AlertDialog open={!!lookToDelete} onOpenChange={(open) => !open && setLookToDelete(null)}>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Esta acción no se puede deshacer. Esto eliminará permanentemente el look &quot;{lookToDelete.nombre}&quot;.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel onClick={() => setLookToDelete(null)}>Cancelar</AlertDialogCancel>\n                <AlertDialogAction onClick={executeDelete} className=\"bg-destructive hover:bg-destructive/90 text-destructive-foreground\">\n                  Eliminar\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "statistics": {
      "__archivos__": {
        "page.tsx": "\n// src/app/statistics/page.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { StatsCard } from '@/components/dashboard/StatsCard';\nimport { ColorDistributionChart } from '@/components/dashboard/ColorDistributionChart';\nimport { StyleUsageChart } from '@/components/statistics/StyleUsageChart';\nimport { TimeActivityChart } from '@/components/statistics/TimeActivityChart';\nimport { IntelligentInsightCard } from '@/components/statistics/IntelligentInsightCard';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, TrendingUp, Palette, BarChart3, Users, CalendarClock, AlertTriangle, Shirt, Sparkles, LayoutGrid } from 'lucide-react';\nimport type { StatisticsSummary, ColorFrequency, StyleUsageStat, TimeActivityStat, IntelligentInsightData } from '@/types';\nimport { \n  getStatisticsSummaryAction, \n  getColorDistributionStatsAction, \n  getStyleUsageStatsAction, \n  getTimeActivityStatsAction,\n  getIntelligentInsightDataAction\n} from '@/app/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\n\nexport default function StatisticsPage() {\n  const [summary, setSummary] = React.useState<StatisticsSummary | null>(null);\n  const [colorData, setColorData] = React.useState<ColorFrequency[]>([]);\n  const [styleData, setStyleData] = React.useState<StyleUsageStat[]>([]);\n  const [activityData, setActivityData] = React.useState<TimeActivityStat[]>([]);\n  const [insightData, setInsightData] = React.useState<IntelligentInsightData | null>(null);\n  \n  const [isLoadingSummary, setIsLoadingSummary] = React.useState(true);\n  const [summaryError, setSummaryError] = React.useState<string | null>(null);\n  \n  const [isLoadingColors, setIsLoadingColors] = React.useState(true);\n  const [colorsError, setColorsError] = React.useState<string | null>(null);\n  \n  const [isLoadingStyles, setIsLoadingStyles] = React.useState(true);\n  const [stylesError, setStylesError] = React.useState<string | null>(null);\n  \n  const [isLoadingActivity, setIsLoadingActivity] = React.useState(true);\n  const [activityError, setActivityError] = React.useState<string | null>(null);\n  \n  const [isLoadingInsight, setIsLoadingInsight] = React.useState(true);\n  const [insightError, setInsightError] = React.useState<string | null>(null);\n\n  const [isInitialLoading, setIsInitialLoading] = React.useState(true);\n  const [initialError, setInitialError] = React.useState<string | null>(null);\n\n  const { toast } = useToast();\n\n  const fetchData = React.useCallback(async () => {\n    setIsLoadingSummary(true);\n    setSummaryError(null);\n    setIsLoadingColors(true);\n    setColorsError(null);\n    setIsLoadingStyles(true);\n    setStylesError(null);\n    setIsLoadingActivity(true);\n    setActivityError(null);\n    setIsLoadingInsight(true);\n    setInsightError(null);\n    setInitialError(null);\n    setIsInitialLoading(true);\n\n    try {\n      const results = await Promise.allSettled([\n        getStatisticsSummaryAction(),\n        getColorDistributionStatsAction(),\n        getStyleUsageStatsAction(),\n        getTimeActivityStatsAction(),\n        getIntelligentInsightDataAction()\n      ]);\n\n      const [summaryRes, colorsRes, stylesRes, activityRes, insightRes] = results;\n\n      if (summaryRes.status === 'fulfilled') {\n        if (summaryRes.value.error) {\n          setSummaryError(summaryRes.value.error);\n          toast({ title: 'Error Resumen', description: summaryRes.value.error, variant: 'destructive' });\n        } else {\n          setSummary(summaryRes.value.data || null);\n        }\n      } else {\n        setSummaryError(summaryRes.reason?.message || \"Error desconocido al cargar resumen.\");\n        toast({ title: 'Error Resumen', description: summaryRes.reason?.message || \"Error desconocido\", variant: 'destructive' });\n      }\n      setIsLoadingSummary(false);\n\n      if (colorsRes.status === 'fulfilled') {\n        if (colorsRes.value.error) {\n          setColorsError(colorsRes.value.error);\n          toast({ title: 'Error Colores', description: colorsRes.value.error, variant: 'destructive' });\n        } else {\n          setColorData(colorsRes.value.data || []);\n        }\n      } else {\n        setColorsError(colorsRes.reason?.message || \"Error desconocido al cargar colores.\");\n        toast({ title: 'Error Colores', description: colorsRes.reason?.message || \"Error desconocido\", variant: 'destructive' });\n      }\n      setIsLoadingColors(false);\n      \n      if (stylesRes.status === 'fulfilled') {\n        if (stylesRes.value.error) {\n          setStylesError(stylesRes.value.error);\n          toast({ title: 'Error Estilos', description: stylesRes.value.error, variant: 'destructive' });\n        } else {\n          setStyleData(stylesRes.value.data || []);\n        }\n      } else {\n        setStylesError(stylesRes.reason?.message || \"Error desconocido al cargar estilos.\");\n        toast({ title: 'Error Estilos', description: stylesRes.reason?.message || \"Error desconocido\", variant: 'destructive' });\n      }\n      setIsLoadingStyles(false);\n\n      if (activityRes.status === 'fulfilled') {\n        if (activityRes.value.error) {\n          setActivityError(activityRes.value.error);\n           toast({ title: 'Error Actividad', description: activityRes.value.error, variant: 'destructive' });\n        } else {\n          setActivityData(activityRes.value.data || []);\n        }\n      } else {\n        setActivityError(activityRes.reason?.message || \"Error desconocido al cargar actividad.\");\n        toast({ title: 'Error Actividad', description: activityRes.reason?.message || \"Error desconocido\", variant: 'destructive' });\n      }\n      setIsLoadingActivity(false);\n\n      if (insightRes.status === 'fulfilled') {\n        if (insightRes.value.error) {\n          setInsightError(insightRes.value.error);\n          toast({ title: 'Error Insights', description: insightRes.value.error, variant: 'destructive' });\n        } else {\n          setInsightData(insightRes.value.data || null);\n        }\n      } else {\n        setInsightError(insightRes.reason?.message || \"Error desconocido al cargar insights.\");\n         toast({ title: 'Error Insights', description: insightRes.reason?.message || \"Error desconocido\", variant: 'destructive' });\n      }\n      setIsLoadingInsight(false);\n\n      // Check if all initial fetches failed\n      const allFailed = results.every(r => r.status === 'rejected' || (r.status === 'fulfilled' && r.value.error));\n      if (allFailed) {\n        setInitialError(\"No se pudieron cargar los datos de estadísticas. Inténtalo de nuevo.\");\n      }\n\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : \"Error general al cargar estadísticas.\";\n      setInitialError(errorMessage);\n      toast({ title: 'Error General', description: errorMessage, variant: 'destructive' });\n    } finally {\n        setIsInitialLoading(false);\n    }\n  }, [toast]);\n\n  React.useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const renderLoadingError = (sectionError: string | null, sectionName: string) => (\n    <div className=\"my-6 p-4 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex items-center gap-3\">\n      <AlertTriangle className=\"h-6 w-6\" />\n      <div>\n        <h3 className=\"font-semibold\">Error al cargar {sectionName}</h3>\n        <p className=\"text-sm\">{sectionError || \"Ocurrió un error.\"}</p>\n      </div>\n    </div>\n  );\n  \n  if (isInitialLoading && !initialError) {\n    return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Navbar />\n        <main className=\"flex-grow container mx-auto px-4 py-8 flex justify-center items-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n          <p className=\"ml-4 text-lg text-muted-foreground\">Cargando estadísticas...</p>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  if (initialError) {\n     return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Navbar />\n        <main className=\"flex-grow container mx-auto px-4 py-8\">\n           {renderLoadingError(initialError, \"las estadísticas\")}\n           <div className=\"text-center mt-4\">\n                <Button onClick={fetchData} variant=\"outline\">\n                    <TrendingUp className=\"mr-2 h-4 w-4\"/>Intentar de Nuevo\n                </Button>\n           </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8 space-y-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-center mb-2 gap-4\">\n            <div>\n                <h1 className=\"text-3xl font-bold text-foreground\">Estadísticas de tu Armario</h1>\n                <p className=\"text-muted-foreground\">Conocé tu estilo y uso de ropa.</p>\n            </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <StatsCard title=\"Total de Prendas\" value={summary?.totalPrendas?.toString() ?? '0'} icon={Shirt} description=\"Prendas activas\" isLoading={isLoadingSummary} />\n          <StatsCard title=\"Looks Guardados\" value={summary?.totalLooks?.toString() ?? '0'} icon={Sparkles} description=\"Combinaciones creadas\" isLoading={isLoadingSummary}/>\n          <StatsCard title=\"Estilos Diferentes\" value={summary?.prendasPorEstiloCount?.toString() ?? '0'} icon={LayoutGrid} description=\"En tus prendas activas\" isLoading={isLoadingSummary}/>\n          <StatsCard title=\"Looks Usados (Mes)\" value={summary?.looksUsadosEsteMes?.toString() ?? '0'} icon={CalendarClock} description=\"Asignaciones en calendario\" isLoading={isLoadingSummary}/>\n        </div>\n        {summaryError && renderLoadingError(summaryError, \"el resumen\")}\n        \n        <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n          {/* Color Distribution */}\n          <Card className=\"shadow-lg rounded-xl lg:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Palette className=\"mr-2 h-5 w-5 text-primary\" />\n                Distribución de Colores\n              </CardTitle>\n              <CardDescription>Colores más frecuentes en tus prendas.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ColorDistributionChart data={colorData} />\n               {isLoadingColors && !colorsError && <div className=\"flex justify-center items-center h-40\"><Loader2 className=\"h-8 w-8 animate-spin text-primary\" /></div>}\n               {colorsError && renderLoadingError(colorsError, \"la distribución de colores\")}\n            </CardContent>\n          </Card>\n\n          {/* Style Usage */}\n          <Card className=\"shadow-lg rounded-xl lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"mr-2 h-5 w-5 text-primary\" />\n                Uso de Estilos\n              </CardTitle>\n              <CardDescription>Cantidad de prendas por cada estilo.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <StyleUsageChart data={styleData} />\n              {isLoadingStyles && !stylesError && <div className=\"flex justify-center items-center h-40\"><Loader2 className=\"h-8 w-8 animate-spin text-primary\" /></div>}\n              {stylesError && renderLoadingError(stylesError, \"el uso de estilos\")}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid gap-8 md:grid-cols-1\">\n            {/* Time Activity */}\n            <Card className=\"shadow-lg rounded-xl\">\n                <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                    <TrendingUp className=\"mr-2 h-5 w-5 text-primary\" />\n                    Actividad en el Tiempo\n                </CardTitle>\n                <CardDescription>Prendas o looks asignados en los últimos meses.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                <TimeActivityChart data={activityData} />\n                {isLoadingActivity && !activityError && <div className=\"flex justify-center items-center h-40\"><Loader2 className=\"h-8 w-8 animate-spin text-primary\" /></div>}\n                {activityError && renderLoadingError(activityError, \"la actividad en el tiempo\")}\n                </CardContent>\n            </Card>\n        </div>\n        \n        <IntelligentInsightCard data={insightData} isLoading={isLoadingInsight} error={insightError} />\n\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    },
    "dashboard": {
      "__archivos__": {
        "page.tsx": "\n// src/app/dashboard/page.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Navbar } from '@/components/ui/Navbar';\nimport { Footer } from '@/components/ui/Footer';\nimport { StatsCard } from '@/components/dashboard/StatsCard';\nimport { ColorDistributionChart } from '@/components/dashboard/ColorDistributionChart';\nimport { OutfitSuggestion } from '@/components/OutfitSuggestion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { FileText, Palette, Shirt, Sparkles, Loader2, AlertTriangle } from 'lucide-react';\nimport type { SuggestedOutfit, DashboardStats, ColorFrequency } from '@/types';\nimport { getAISuggestionAction, getPrendasAction } from '../actions'; // Adjusted import path\nimport { useToast } from '@/hooks/use-toast';\n\nconst mockDashboardStats: DashboardStats = {\n  totalPrendas: 0,\n  totalLooks: 0,\n};\n\nconst mockColorFrequency: ColorFrequency[] = [\n  { color: 'Azul', count: 0, fill: 'hsl(var(--chart-1))' },\n  { color: 'Negro', count: 0, fill: 'hsl(var(--chart-2))' },\n  { color: 'Blanco', count: 0, fill: 'hsl(var(--chart-3))' },\n  { color: 'Gris', count: 0, fill: 'hsl(var(--chart-4))' },\n  { color: 'Verde', count: 0, fill: 'hsl(var(--chart-5))' },\n];\n\n// This component now represents the content for the /dashboard route.\n// The actual homepage (/) will have the same content.\nexport default function DashboardPage() { \n  const [stats, setStats] = React.useState<DashboardStats>(mockDashboardStats);\n  const [colorFrequency, setColorFrequency] = React.useState<ColorFrequency[]>(mockColorFrequency);\n  const [randomSuggestion, setRandomSuggestion] = React.useState<SuggestedOutfit | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const { toast } = useToast();\n\n  const fetchDashboardData = React.useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const prendasResult = await getPrendasAction();\n      if (prendasResult.error || !prendasResult.data) {\n        throw new Error(prendasResult.error || 'No se pudieron cargar las prendas.');\n      }\n      const prendas = prendasResult.data;\n\n      const totalPrendas = prendas.length;\n      setStats({ totalPrendas, totalLooks: 0 });\n\n      const colorCounts: Record<string, number> = {};\n      prendas.forEach(p => {\n        if (p.color) {\n          colorCounts[p.color] = (colorCounts[p.color] || 0) + 1;\n        }\n      });\n      \n      const chartColors = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))'];\n      const sortedColors = Object.entries(colorCounts)\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 5)\n        .map(([color, count], index) => ({ color, count, fill: chartColors[index % chartColors.length] }));\n      setColorFrequency(sortedColors.length > 0 ? sortedColors : mockColorFrequency);\n\n      if (prendas.length > 0) {\n        const styles = ['casual', 'formal', 'sporty', 'bohemian'];\n        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\n        const randomTempMin = Math.floor(Math.random() * 20) + 5;\n        const randomTempMax = randomTempMin + Math.floor(Math.random() * 10) + 5;\n\n        const suggestionResult = await getAISuggestionAction({\n          temperature: [randomTempMin, randomTempMax],\n          styleId: randomStyle,\n          useClosetInfo: true,\n        });\n        if ('error' in suggestionResult) {\n          console.warn(\"Error fetching random suggestion for dashboard:\", suggestionResult.error);\n          setRandomSuggestion(null);\n        } else {\n          setRandomSuggestion(suggestionResult);\n        }\n      } else {\n        setRandomSuggestion(null);\n      }\n\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      setError(errorMessage);\n      toast({ title: 'Error al cargar el dashboard', description: errorMessage, variant: 'destructive' });\n    }\n    setIsLoading(false);\n  }, [toast]);\n\n  React.useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Navbar />\n        <main className=\"flex-grow container mx-auto px-4 py-8 flex justify-center items-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error && !isLoading) {\n     return (\n      <div className=\"flex flex-col min-h-screen bg-background\">\n        <Navbar />\n        <main className=\"flex-grow container mx-auto px-4 py-8\">\n           <div className=\"my-6 p-4 bg-destructive/10 border border-destructive/30 text-destructive rounded-lg flex items-center gap-3\">\n            <AlertTriangle className=\"h-6 w-6\" />\n            <div>\n              <h3 className=\"font-semibold\">Error al cargar el dashboard</h3>\n              <p className=\"text-sm\">{error}</p>\n              <Button variant=\"link\" onClick={fetchDashboardData} className=\"p-0 h-auto text-destructive mt-1\">Intentar de nuevo</Button>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Navbar />\n      <main className=\"flex-grow container mx-auto px-4 py-8 space-y-8\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Dashboard</h1>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <StatsCard title=\"Total de Prendas\" value={stats.totalPrendas.toString()} icon={Shirt} description=\"Prendas en tu armario\" />\n          <StatsCard title=\"Looks Guardados\" value={stats.totalLooks.toString()} icon={Sparkles} description=\"Combinaciones creadas\" />\n          <StatsCard title=\"Tipos de Prenda\" value=\"N/A\" icon={FileText} description=\"Categorías distintas\" />\n          <StatsCard title=\"Colores Predominantes\" value=\"N/A\" icon={Palette} description=\"Diversidad de colores\" />\n        </div>\n        \n        <div className=\"grid gap-8 md:grid-cols-2\">\n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle>Distribución de Colores</CardTitle>\n              <CardDescription>Colores más frecuentes en tu armario.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {colorFrequency.length > 0 && colorFrequency.some(c => c.count > 0) ? (\n                <ColorDistributionChart data={colorFrequency} />\n              ) : (\n                <p className=\"text-muted-foreground text-center py-8\">No hay suficientes datos de colores para mostrar el gráfico.</p>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg rounded-xl\">\n            <CardHeader>\n              <CardTitle>Sugerencia Rápida</CardTitle>\n              <CardDescription>Un look aleatorio para inspirarte.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {randomSuggestion ? (\n                <OutfitSuggestion suggestion={randomSuggestion} />\n              ) : (\n                 stats.totalPrendas > 0 ? \n                 <p className=\"text-muted-foreground text-center py-8\">No se pudo generar una sugerencia aleatoria en este momento.</p>\n                 : <p className=\"text-muted-foreground text-center py-8\">Agrega prendas a tu armario para recibir sugerencias.</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
      }
    }
  },
  "hooks": {
    "__archivos__": {
      "use-mobile.tsx": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "use-toast.ts": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
    }
  },
  "data": {
    "__archivos__": {
      "ropa_filenames_example.txt": "camiseta_clasica_blanca.png\npantalon_chino_beige.png\nvestido_verano_azul_floral.png\nchaqueta_deportiva_negra.png\nsueter_lana_gris.png\nzapatos_cuero_marron.png\nfalda_plisada_rosa.png\nblusa_seda_crema.png\nshorts_denim_azul_oscuro.png\nabrigo_lana_negro.png\nzapatillas_correr_gris_naranja.png\npolo_algodon_rojo.png\nbufanda_cachemira_beige.png\ngorra_beisbol_negra.png\ntraje_lino_azul_claro.png\ncardigan_punto_verde_oliva.png\nbotas_cuero_negras.png\ncamisa_lenador_rojo_negro.png\nleggings_deportivos_negros.png\nsombrero_paja_natural.png\ncamiseta_grafica_negra.png\npantalon_cargo_verde_militar.png\nvestido_largo_estampado_floral.png\nchaqueta_vaquera_azul_medio.png\nsueter_cuello_alto_negro.png\nmocasines_cuero_negros.png\nminifalda_cuadros_rojo_negro.png\ncamisa_oxford_azul_cielo.png\npantalones_jogging_gris_jaspeado.png\ngabardina_clasica_beige.png\nsandalias_verano_marron_claro.png\nsudadera_capucha_gris_oscuro.png\ncinturon_cuero_negro.png\npanuelo_seda_estampado.png\nbermudas_lino_blancas.png\ntop_encaje_negro.png\nchaqueta_bombardero_verde_oliva.png\ncamiseta_marinera_blanco_azul.png\npantalones_palazzo_negros.png\nchaleco_sastre_gris_oscuro.png\nkimono_estampado_flores_multicolor.png\nbody_algodon_negro.png\nfalda_midi_satinada_champagne.png\nsudadera_cremallera_azul_marino.png\ncamisa_hawaiana_estampado_tropical.png\npantalon_pinzas_gris_claro.png\nvestido_camisero_blanco.png\nchubasquero_ligero_amarillo.png\nsueter_rayas_azul_blanco.png\nzapatos_tacon_negro.png\n",
      "prendas_ejemplos.csv": "id,created_at,nombre,tipo,color,modelo,temporada,fechacompra,imagen_url,temperatura_min,temperatura_max,estilo\n1,2024-01-15 10:00:00+00,Camiseta Clásica,Camisa,Blanco,M,Verano,2023-07-15,/ropa/camiseta_clasica_blanca.png,20,35,casual\n2,2024-01-16 10:05:00+00,Pantalón Chino,Pantalón,Beige,32,Todo el Año,2023-03-10,/ropa/pantalon_chino_beige.png,15,28,casual\n3,2024-01-17 10:10:00+00,Vestido Verano,Vestido,Azul Floral,S,Verano,2023-06-01,/ropa/vestido_verano_azul_floral.png,22,38,bohemian\n4,2024-01-18 10:15:00+00,Chaqueta Deportiva,Chaqueta,Negro,L,Invierno,2023-01-20,/ropa/chaqueta_deportiva_negra.png,5,15,sporty\n5,2024-01-19 10:20:00+00,Suéter Lana,Suéter,Gris,M,Invierno,2022-11-05,/ropa/sueter_lana_gris.png,-5,10,casual\n6,2024-01-20 10:25:00+00,Zapatos Cuero,Zapatos,Marrón,42,Todo el Año,2023-09-01,/ropa/zapatos_cuero_marron.png,10,30,formal\n7,2024-01-21 10:30:00+00,Falda Plisada,Falda,Rosa,S,Primavera,2023-04-10,/ropa/falda_plisada_rosa.png,18,26,casual\n8,2024-01-22 10:35:00+00,Blusa Seda,Camisa,Crema,M,Primavera,2023-05-02,/ropa/blusa_seda_crema.png,16,28,formal\n9,2024-01-23 10:40:00+00,Shorts Denim,Pantalón,Azul Oscuro,30,Verano,2023-08-15,/ropa/shorts_denim_azul_oscuro.png,25,40,casual\n10,2024-01-24 10:45:00+00,Abrigo Lana,Chaqueta,Negro,L,Invierno,2022-12-01,/ropa/abrigo_lana_negro.png,-10,8,formal\n11,2024-01-25 10:50:00+00,Zapatillas Correr,Zapatos,Gris y Naranja,43,Todo el Año,2023-02-20,/ropa/zapatillas_correr_gris_naranja.png,0,30,sporty\n12,2024-01-26 10:55:00+00,Polo Algodón,Camisa,Rojo,L,Verano,2023-07-01,/ropa/polo_algodon_rojo.png,20,35,casual\n13,2024-01-27 11:00:00+00,Bufanda Cachemira,Accesorio,Beige,Única,Invierno,2022-11-10,/ropa/bufanda_cachemira_beige.png,-5,15,casual\n14,2024-01-28 11:05:00+00,Gorra Béisbol,Accesorio,Negro,Única,Todo el Año,2023-01-01,/ropa/gorra_beisbol_negra.png,10,35,casual\n15,2024-01-29 11:10:00+00,Traje Lino,Conjunto,Azul Claro,M,Verano,2023-06-15,/ropa/traje_lino_azul_claro.png,22,35,formal\n16,2024-01-30 11:15:00+00,Cárdigan Punto,Suéter,Verde Oliva,S,Otoño,2023-09-25,/ropa/cardigan_punto_verde_oliva.png,12,22,casual\n17,2024-01-31 11:20:00+00,Botas Cuero,Zapatos,Negro,41,Invierno,2022-10-15,/ropa/botas_cuero_negras.png,-5,12,formal\n18,2024-02-01 11:25:00+00,Camisa Leñador,Camisa,Rojo y Negro,L,Otoño,2023-10-02,/ropa/camisa_lenador_rojo_negro.png,10,20,casual\n19,2024-02-02 11:30:00+00,Leggings Deportivos,Pantalón,Negro,M,Todo el Año,2023-03-01,/ropa/leggings_deportivos_negros.png,5,25,sporty\n20,2024-02-03 11:35:00+00,Sombrero Paja,Accesorio,Natural,Única,Verano,2023-07-20,/ropa/sombrero_paja_natural.png,25,40,bohemian\n21,2024-02-04 11:40:00+00,Camiseta Gráfica,Camisa,Negro,M,Todo el Año,2023-05-10,/ropa/camiseta_grafica_negra.png,15,30,casual\n22,2024-02-05 11:45:00+00,Pantalón Cargo,Pantalón,Verde Militar,34,Primavera,2023-04-01,/ropa/pantalon_cargo_verde_militar.png,16,26,casual\n23,2024-02-06 11:50:00+00,Vestido Largo,Vestido,Estampado Floral,L,Primavera,2023-05-05,/ropa/vestido_largo_estampado_floral.png,18,28,bohemian\n24,2024-02-07 11:55:00+00,Chaqueta Vaquera,Chaqueta,Azul Medio,M,Todo el Año,2022-09-15,/ropa/chaqueta_vaquera_azul_medio.png,12,25,casual\n25,2024-02-08 12:00:00+00,Suéter Cuello Alto,Suéter,Negro,S,Invierno,2022-11-20,/ropa/sueter_cuello_alto_negro.png,-5,10,formal\n26,2024-02-09 12:05:00+00,Mocasines Cuero,Zapatos,Negro,42,Otoño,2023-09-10,/ropa/mocasines_cuero_negros.png,10,22,formal\n27,2024-02-10 12:10:00+00,Minifalda Cuadros,Falda,Rojo y Negro,M,Otoño,2023-10-15,/ropa/minifalda_cuadros_rojo_negro.png,12,20,casual\n28,2024-02-11 12:15:00+00,Camisa Oxford,Camisa,Azul Cielo,L,Todo el Año,2023-01-30,/ropa/camisa_oxford_azul_cielo.png,15,28,formal\n29,2024-02-12 12:20:00+00,Pantalones Jogging,Pantalón,Gris Jaspeado,M,Todo el Año,2023-02-01,/ropa/pantalones_jogging_gris_jaspeado.png,10,25,sporty\n30,2024-02-13 12:25:00+00,Gabardina Clásica,Chaqueta,Beige,M,Primavera,2023-03-10,/ropa/gabardina_clasica_beige.png,8,18,formal\n31,2024-02-14 12:30:00+00,Sandalias Verano,Zapatos,Marrón Claro,39,Verano,2023-06-20,/ropa/sandalias_verano_marron_claro.png,25,40,casual\n32,2024-02-15 12:35:00+00,Sudadera Capucha,Suéter,Gris Oscuro,L,Otoño,2023-09-05,/ropa/sudadera_capucha_gris_oscuro.png,10,20,sporty\n33,2024-02-16 12:40:00+00,Cinturón Cuero,Accesorio,Negro,Única,Todo el Año,2022-08-01,/ropa/cinturon_cuero_negro.png,0,40,casual\n34,2024-02-17 12:45:00+00,Pañuelo Seda,Accesorio,Estampado,Única,Todo el Año,2023-05-15,/ropa/panuelo_seda_estampado.png,10,30,formal\n35,2024-02-18 12:50:00+00,Bermudas Lino,Pantalón,Blanco,32,Verano,2023-07-01,/ropa/bermudas_lino_blancas.png,24,38,casual\n36,2024-02-19 12:55:00+00,Top Encaje,Camisa,Negro,S,Verano,2023-08-10,/ropa/top_encaje_negro.png,20,32,formal\n37,2024-02-20 13:00:00+00,Chaqueta Bombardero,Chaqueta,Verde Oliva,M,Otoño,2023-10-01,/ropa/chaqueta_bombardero_verde_oliva.png,10,20,casual\n38,2024-02-21 13:05:00+00,Camiseta Marinera,Camisa,Blanco y Azul,M,Primavera,2023-04-20,/ropa/camiseta_marinera_blanco_azul.png,16,28,casual\n39,2024-02-22 13:10:00+00,Pantalones Palazzo,Pantalón,Negro,L,Verano,2023-06-05,/ropa/pantalones_palazzo_negros.png,20,30,bohemian\n40,2024-02-23 13:15:00+00,Chaleco Sastre,Chaqueta,Gris Oscuro,M,Otoño,2023-09-18,/ropa/chaleco_sastre_gris_oscuro.png,14,24,formal\n41,2024-02-24 13:20:00+00,Kimono Estampado,Otro,Flores Multicolor,Única,Primavera,2023-05-25,/ropa/kimono_estampado_flores_multicolor.png,18,30,bohemian\n42,2024-02-25 13:25:00+00,Body Algodón,Camisa,Negro,S,Todo el Año,2023-02-10,/ropa/body_algodon_negro.png,15,28,casual\n43,2024-02-26 13:30:00+00,Falda Midi Satinada,Falda,Champagne,M,Otoño,2023-10-20,/ropa/falda_midi_satinada_champagne.png,15,25,formal\n44,2024-02-27 13:35:00+00,Sudadera Cremallera,Suéter,Azul Marino,L,Invierno,2022-12-10,/ropa/sudadera_cremallera_azul_marino.png,5,18,sporty\n45,2024-02-28 13:40:00+00,Camisa Hawaiana,Camisa,Estampado Tropical,M,Verano,2023-07-12,/ropa/camisa_hawaiana_estampado_tropical.png,22,36,casual\n46,2024-03-01 13:45:00+00,Pantalón Pinzas,Pantalón,Gris Claro,30,Todo el Año,2023-03-05,/ropa/pantalon_pinzas_gris_claro.png,15,28,formal\n47,2024-03-02 13:50:00+00,Vestido Camisero,Vestido,Blanco,M,Primavera,2023-04-18,/ropa/vestido_camisero_blanco.png,18,28,casual\n48,2024-03-03 13:55:00+00,Chubasquero Ligero,Chaqueta,Amarillo,L,Primavera,2023-03-28,/ropa/chubasquero_ligero_amarillo.png,10,20,casual\n49,2024-03-04 14:00:00+00,Suéter Rayas,Suéter,Azul y Blanco,S,Otoño,2023-09-12,/ropa/sueter_rayas_azul_blanco.png,14,24,casual\n50,2024-03-05 14:05:00+00,Zapatos Tacón,Zapatos,Negro,39,Todo el Año,2023-01-05,/ropa/zapatos_tacon_negro.png,10,30,formal\n"
    }
  },
  "components": {
    "__archivos__": {
      "ClosetFilterBar.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Search, X } from 'lucide-react';\nimport { TIPO_PRENDA_ENUM_VALUES, SEASONS } from '@/types'; // Updated import\nimport { styleOptions } from '@/components/StyleSelection';\nimport { Card } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\n\nexport interface ClosetFilters {\n  searchTerm: string;\n  tipo: string;\n  estilo: string;\n  temporada: string;\n}\n\ninterface ClosetFilterBarProps {\n  filters: ClosetFilters;\n  onFilterChange: (newFilters: ClosetFilters) => void;\n  onResetFilters: () => void;\n}\n\nconst ALL_ITEMS_PLACEHOLDER_VALUE = \"--all--\";\n\nexport function ClosetFilterBar({ filters, onFilterChange, onResetFilters }: ClosetFilterBarProps) {\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange({ ...filters, searchTerm: e.target.value });\n  };\n\n  const handleSelectChange = (name: keyof Omit<ClosetFilters, 'searchTerm'>, value: string) => {\n    const actualValue = value === ALL_ITEMS_PLACEHOLDER_VALUE ? '' : value;\n    onFilterChange({ ...filters, [name]: actualValue });\n  };\n\n  return (\n    <Card className=\"mb-6 p-4 shadow-md rounded-xl\">\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 items-end\">\n        <div className=\"lg:col-span-2\">\n          <Label htmlFor=\"search-prenda\" className=\"text-sm font-medium text-muted-foreground\">Buscar por nombre</Label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-2.5 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"search-prenda\"\n              type=\"text\"\n              placeholder=\"Ej: Camisa Azul, Jean Negro...\"\n              value={filters.searchTerm}\n              onChange={handleInputChange}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"filter-tipo\" className=\"text-sm font-medium text-muted-foreground\">Tipo</Label>\n          <Select value={filters.tipo || ALL_ITEMS_PLACEHOLDER_VALUE} onValueChange={(value) => handleSelectChange('tipo', value)}>\n            <SelectTrigger id=\"filter-tipo\">\n              <SelectValue placeholder=\"Todos los tipos\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value={ALL_ITEMS_PLACEHOLDER_VALUE}>Todos los tipos</SelectItem>\n              {TIPO_PRENDA_ENUM_VALUES.map((type) => (\n                <SelectItem key={type} value={type}>\n                  {type}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"filter-estilo\" className=\"text-sm font-medium text-muted-foreground\">Estilo</Label>\n          <Select value={filters.estilo || ALL_ITEMS_PLACEHOLDER_VALUE} onValueChange={(value) => handleSelectChange('estilo', value)}>\n            <SelectTrigger id=\"filter-estilo\">\n              <SelectValue placeholder=\"Todos los estilos\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value={ALL_ITEMS_PLACEHOLDER_VALUE}>Todos los estilos</SelectItem>\n              {styleOptions.map((style) => (\n                <SelectItem key={style.id} value={style.id}>\n                  {style.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"filter-temporada\" className=\"text-sm font-medium text-muted-foreground\">Temporada</Label>\n          <Select value={filters.temporada || ALL_ITEMS_PLACEHOLDER_VALUE} onValueChange={(value) => handleSelectChange('temporada', value)}>\n            <SelectTrigger id=\"filter-temporada\">\n              <SelectValue placeholder=\"Todas las temporadas\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value={ALL_ITEMS_PLACEHOLDER_VALUE}>Todas las temporadas</SelectItem>\n              {SEASONS.map((season) => (\n                <SelectItem key={season} value={season}>\n                  {season}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      <div className=\"mt-4 flex justify-end\">\n        <Button variant=\"ghost\" onClick={onResetFilters} className=\"text-sm\">\n          <X className=\"mr-2 h-4 w-4\" />\n          Limpiar Filtros\n        </Button>\n      </div>\n    </Card>\n  );\n}\n",
      "Header.tsx": "'use client';\nimport Link from 'next/link';\nimport { Logo } from '@/components/icons/Logo';\nimport { Button } from '@/components/ui/button'; // Added for navigation\nimport { Shirt } from 'lucide-react'; // Added for closet icon\n\nexport function AppHeader() {\n  return (\n    <header className=\"py-6 px-4 md:px-8 border-b border-border/50 shadow-sm bg-card\">\n      <div className=\"container mx-auto flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Link href=\"/\" aria-label=\"Go to homepage\">\n            <Logo />\n          </Link>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <p className=\"text-sm text-muted-foreground hidden sm:block\">\n            Combinacion con IA Express\n          </p>\n          <Link href=\"/closet\" passHref legacyBehavior>\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <a>\n                <Shirt className=\"mr-2 h-4 w-4\" />\n                Mi Armario\n              </a>\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </header>\n  );\n}\n",
      "OutfitSuggestion.tsx": "\n'use client';\nimport Image from 'next/image';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport type { SuggestedOutfit, OutfitItem } from '@/types';\nimport { Sparkles, Palette } from 'lucide-react';\nimport { ColorSwatch } from './ColorSwatch'; // Import ColorSwatch\n\ninterface OutfitSuggestionProps {\n  suggestion: SuggestedOutfit;\n}\n\nfunction OutfitItemCard({ item }: { item: OutfitItem }) {\n  return (\n    <Card className=\"overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-200 rounded-lg flex flex-col\">\n      <CardContent className=\"p-0\">\n        <div className=\"aspect-[3/4] relative w-full\">\n          <Image\n            src={item.imageUrl}\n            alt={item.name}\n            fill={true}\n            sizes=\"(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw\"\n            className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-ai-hint={item.aiHint}\n          />\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-3 bg-card/80 backdrop-blur-sm mt-auto\">\n        <div>\n          <p className=\"font-semibold text-sm text-foreground truncate\" title={item.name}>{item.name}</p>\n          <p className=\"text-xs text-muted-foreground mb-1\">{item.category}</p>\n          {item.color && <ColorSwatch colorName={item.color} />}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n\nexport function OutfitSuggestion({ suggestion }: OutfitSuggestionProps) {\n  if (!suggestion || !suggestion.items || suggestion.items.length === 0) {\n    return (\n      <Card className=\"shadow-lg rounded-xl mt-8\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold\">Sugerencia de Atuendo</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">No se pudo generar una sugerencia en este momento. Intenta ajustar tus preferencias.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  const outfitColors = Array.from(new Set(suggestion.items.map(item => item.color).filter(Boolean) as string[]));\n\n  return (\n    <div className=\"mt-8 space-y-6\">\n      <Card className=\"shadow-lg rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-xl font-semibold\">\n            <Sparkles className=\"mr-2 h-6 w-6 text-primary\" />\n            Tu Atuendo Sugerido\n          </CardTitle>\n          {suggestion.previewImageUrl && (\n             <CardDescription>Una vista previa de tu look.</CardDescription>\n          )}\n        </CardHeader>\n        <CardContent>\n          {suggestion.previewImageUrl && (\n            <div className=\"mb-6 aspect-video relative w-full rounded-lg overflow-hidden shadow-md\">\n              <Image\n                src={suggestion.previewImageUrl}\n                alt=\"Vista previa del atuendo\"\n                fill={true}\n                sizes=\"100vw\"\n                className=\"object-cover\"\n                data-ai-hint=\"fashion outfit preview\"\n              />\n            </div>\n          )}\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4 mb-4\">\n            {suggestion.items.map((item) => (\n              <OutfitItemCard key={item.id} item={item} />\n            ))}\n          </div>\n          {outfitColors.length > 0 && (\n            <div className=\"mt-4 pt-4 border-t\">\n              <h4 className=\"text-sm font-medium text-muted-foreground mb-2 flex items-center\">\n                <Palette className=\"mr-2 h-4 w-4\" /> Paleta de Colores:\n              </h4>\n              <div className=\"flex flex-wrap gap-x-3 gap-y-1\">\n                {outfitColors.map(color => <ColorSwatch key={color} colorName={color} />)}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "ClothingForm.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { useForm, Controller } from 'react-hook-form'; // Import Controller\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport type { Prenda } from '@/types';\nimport { SEASONS, PRENDA_COLORS, TIPO_PRENDA_ENUM_VALUES } from '@/types';\nimport { styleOptions } from '@/components/StyleSelection';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\nimport { parseISO, isValid, format } from 'date-fns';\n\nconst prendaFormSchema = z.object({\n  nombre: z.string().min(2, { message: 'El nombre debe tener al menos 2 caracteres.' }),\n  tipo: z.enum(TIPO_PRENDA_ENUM_VALUES, { required_error: \"Por favor selecciona un tipo válido.\"}),\n  color: z.enum(PRENDA_COLORS, { errorMap: () => ({ message: \"Por favor selecciona un color válido.\" }) }),\n  modelo: z.string().min(1, { message: 'El modelo es requerido.' }),\n  temporada: z.enum(SEASONS, { required_error: 'Por favor selecciona una temporada.' }),\n  fechacompra: z.string().refine((val) => {\n    if (val === '' || val === null || val === undefined) return true;\n    const parsedDate = parseISO(val);\n    return isValid(parsedDate);\n  }, {\n    message: \"La fecha de compra debe ser válida (YYYY-MM-DD) o estar vacía.\",\n  }).optional().nullable(),\n  imagen_url: z.string().url({ message: 'Debe ser una URL válida.' }).or(z.literal(\"\")).optional(),\n  temperatura_min: z.coerce.number().optional().nullable(),\n  temperatura_max: z.coerce.number().optional().nullable(),\n  estilo: z.string().min(1, { message: 'Por favor selecciona un estilo.' }),\n  is_archived: z.preprocess(val => val === 'on' || val === 'true' || val === true, z.boolean()).optional().default(false),\n});\n\nexport type PrendaFormData = z.infer<typeof prendaFormSchema>;\n\ninterface ClothingFormProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onSubmit: (data: PrendaFormData, itemId?: number) => Promise<{error?: string, validationErrors?: z.ZodIssue[]}>;\n  initialData?: Prenda | null;\n  itemId?: number | null;\n}\n\nconst defaultFormValues: PrendaFormData = {\n  nombre: '',\n  tipo: TIPO_PRENDA_ENUM_VALUES[0],\n  color: PRENDA_COLORS[0],\n  modelo: '',\n  temporada: SEASONS[0],\n  fechacompra: '',\n  imagen_url: '',\n  temperatura_min: undefined,\n  temperatura_max: undefined,\n  estilo: styleOptions[0].id,\n  is_archived: false,\n};\n\nexport function ClothingForm({ isOpen, onOpenChange, onSubmit, initialData, itemId }: ClothingFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const form = useForm<PrendaFormData>({\n    resolver: zodResolver(prendaFormSchema),\n    defaultValues: defaultFormValues,\n  });\n\n  React.useEffect(() => {\n    if (isOpen) {\n      if (initialData) {\n        const validInitialColor = PRENDA_COLORS.includes(initialData.color as any)\n          ? initialData.color as typeof PRENDA_COLORS[number]\n          : defaultFormValues.color;\n        const validInitialTipo = TIPO_PRENDA_ENUM_VALUES.includes(initialData.tipo as any)\n          ? initialData.tipo as typeof TIPO_PRENDA_ENUM_VALUES[number]\n          : defaultFormValues.tipo;\n        const validInitialTemporada = SEASONS.includes(initialData.temporada as any)\n          ? initialData.temporada as typeof SEASONS[number]\n          : defaultFormValues.temporada;\n        const validInitialEstilo = styleOptions.some(opt => opt.id === initialData.estilo)\n          ? initialData.estilo\n          : defaultFormValues.estilo;\n\n\n        form.reset({\n          nombre: initialData.nombre,\n          tipo: validInitialTipo,\n          color: validInitialColor,\n          modelo: initialData.modelo,\n          temporada: validInitialTemporada,\n          fechacompra: initialData.fechacompra ? initialData.fechacompra : '',\n          imagen_url: initialData.imagen_url,\n          temperatura_min: initialData.temperatura_min ?? undefined,\n          temperatura_max: initialData.temperatura_max ?? undefined,\n          estilo: validInitialEstilo,\n          is_archived: initialData.is_archived || false,\n        });\n      } else {\n        form.reset(defaultFormValues);\n      }\n    }\n  }, [initialData, form, isOpen]);\n\n\n  const handleFormSubmit = async (data: PrendaFormData) => {\n    setIsSubmitting(true);\n    const result = await onSubmit(data, itemId !== null && itemId !== undefined ? itemId : undefined);\n    setIsSubmitting(false);\n\n    if (result.error) {\n      if (result.validationErrors) {\n        result.validationErrors.forEach(err => {\n          form.setError(err.path[0] as keyof PrendaFormData, { message: err.message });\n        });\n        toast({\n          title: 'Error de validación',\n          description: 'Por favor corrige los errores en el formulario.',\n          variant: 'destructive',\n        });\n      } else {\n        toast({\n          title: 'Error',\n          description: result.error,\n          variant: 'destructive',\n        });\n      }\n    } else {\n      toast({\n        title: 'Éxito',\n        description: `Prenda ${initialData ? 'actualizada' : 'agregada'} correctamente.`,\n        variant: 'default',\n      });\n      onOpenChange(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!isSubmitting) onOpenChange(open); }}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>{initialData ? 'Editar Prenda' : 'Agregar Nueva Prenda'}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)}>\n          <ScrollArea className=\"h-[60vh] pr-6\">\n            <div className=\"grid gap-4 py-4\">\n              {/* Nombre */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"nombre\" className=\"text-right\">Nombre</Label>\n                <Input id=\"nombre\" {...form.register('nombre')} className=\"col-span-3\" />\n                {form.formState.errors.nombre && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.nombre.message}</p>}\n              </div>\n\n              {/* Tipo */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"tipo\" className=\"text-right\">Tipo</Label>\n                <Controller\n                  name=\"tipo\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <SelectTrigger id=\"tipo\" className=\"col-span-3\">\n                        <SelectValue placeholder=\"Selecciona un tipo\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {TIPO_PRENDA_ENUM_VALUES.map(type => <SelectItem key={type} value={type}>{type}</SelectItem>)}\n                      </SelectContent>\n                    </Select>\n                  )}\n                />\n                {form.formState.errors.tipo && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.tipo.message}</p>}\n              </div>\n\n              {/* Color */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"color\" className=\"text-right\">Color</Label>\n                <Controller\n                  name=\"color\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <SelectTrigger id=\"color\" className=\"col-span-3\">\n                        <SelectValue placeholder=\"Selecciona un color\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {PRENDA_COLORS.map(colorName => <SelectItem key={colorName} value={colorName}>{colorName}</SelectItem>)}\n                      </SelectContent>\n                    </Select>\n                  )}\n                />\n                {form.formState.errors.color && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.color.message}</p>}\n              </div>\n\n              {/* Modelo */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"modelo\" className=\"text-right\">Modelo</Label>\n                <Input id=\"modelo\" {...form.register('modelo')} className=\"col-span-3\" />\n                {form.formState.errors.modelo && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.modelo.message}</p>}\n              </div>\n\n              {/* Temporada */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"temporada\" className=\"text-right\">Temporada</Label>\n                <Controller\n                  name=\"temporada\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <SelectTrigger id=\"temporada\" className=\"col-span-3\">\n                        <SelectValue placeholder=\"Selecciona una temporada\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {SEASONS.map(season => <SelectItem key={season} value={season}>{season}</SelectItem>)}\n                      </SelectContent>\n                    </Select>\n                  )}\n                />\n                {form.formState.errors.temporada && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.temporada.message}</p>}\n              </div>\n\n              {/* Fecha Compra */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"fechacompra\" className=\"text-right\">Fecha Compra</Label>\n                <Input id=\"fechacompra\" type=\"date\" {...form.register('fechacompra')} className=\"col-span-3\" />\n                {form.formState.errors.fechacompra && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.fechacompra.message}</p>}\n              </div>\n\n              {/* Estilo */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"estilo\" className=\"text-right\">Estilo</Label>\n                <Controller\n                  name=\"estilo\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <SelectTrigger id=\"estilo\" className=\"col-span-3\">\n                        <SelectValue placeholder=\"Selecciona un estilo\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {styleOptions.map(style => <SelectItem key={style.id} value={style.id}>{style.name}</SelectItem>)}\n                      </SelectContent>\n                    </Select>\n                  )}\n                />\n                {form.formState.errors.estilo && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.estilo.message}</p>}\n              </div>\n\n              {/* Image URL */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"imagen_url\" className=\"text-right\">URL de Imagen</Label>\n                <Input id=\"imagen_url\" {...form.register('imagen_url')} className=\"col-span-3\" placeholder=\"https://ejemplo.com/imagen.png\" />\n                {form.formState.errors.imagen_url && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.imagen_url.message}</p>}\n              </div>\n\n              {/* Min Temp */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"temperatura_min\" className=\"text-right\">Temp. Mín (°C)</Label>\n                <Input id=\"temperatura_min\" type=\"number\" {...form.register('temperatura_min')} className=\"col-span-3\" />\n                 {form.formState.errors.temperatura_min && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.temperatura_min.message}</p>}\n              </div>\n\n              {/* Max Temp */}\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"temperatura_max\" className=\"text-right\">Temp. Máx (°C)</Label>\n                <Input id=\"temperatura_max\" type=\"number\" {...form.register('temperatura_max')} className=\"col-span-3\" />\n                {form.formState.errors.temperatura_max && <p className=\"col-span-4 text-sm text-destructive\">{form.formState.errors.temperatura_max.message}</p>}\n              </div>\n            </div>\n          </ScrollArea>\n          <DialogFooter className=\"pt-4\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\" disabled={isSubmitting}>Cancelar</Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {initialData ? 'Guardar Cambios' : 'Agregar Prenda'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n",
      "ClothingTable.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport Image from 'next/image';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Edit, Trash2 } from 'lucide-react';\nimport type { Prenda } from '@/types';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\n\ninterface ClothingTableProps {\n  items: Prenda[];\n  onEditItem: (item: Prenda) => void;\n  onDeleteItem: (item: Prenda) => void;\n}\n\nexport function ClothingTable({ items, onEditItem, onDeleteItem }: ClothingTableProps) {\n  const [itemToConfirmDelete, setItemToConfirmDelete] = React.useState<Prenda | null>(null);\n\n  const handleDeleteConfirmation = (item: Prenda) => {\n    setItemToConfirmDelete(item);\n  };\n\n  const executeDelete = () => {\n    if (itemToConfirmDelete) {\n      onDeleteItem(itemToConfirmDelete);\n      setItemToConfirmDelete(null);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"rounded-xl border overflow-hidden shadow-md bg-card\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[70px] sm:w-[80px] px-2 sm:px-4\">Imagen</TableHead>\n              <TableHead>Nombre</TableHead>\n              <TableHead className=\"hidden md:table-cell\">Tipo</TableHead>\n              <TableHead className=\"hidden md:table-cell\">Color</TableHead>\n              <TableHead className=\"hidden lg:table-cell\">Modelo</TableHead>\n              <TableHead className=\"hidden lg:table-cell\">Estilo</TableHead>\n              <TableHead className=\"hidden sm:table-cell\">Fecha Compra</TableHead>\n              <TableHead className=\"text-right w-[100px] sm:w-[120px] px-2 sm:px-4\">Acciones</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {items.map((item) => (\n              <TableRow key={item.id}>\n                <TableCell className=\"px-2 sm:px-4\">\n                  <div className=\"relative h-12 w-12 sm:h-16 sm:w-16 rounded-md overflow-hidden border border-border\">\n                    <Image\n                      src={item.imagen_url || `https://placehold.co/64x64.png?text=${encodeURIComponent(item.nombre.substring(0,2))}`}\n                      alt={item.nombre}\n                      fill={true}\n                      sizes=\"64px\"\n                      className=\"object-cover\"\n                      data-ai-hint={`${item.tipo.toLowerCase()} ${item.color.toLowerCase()}`.substring(0,50)}\n                    />\n                  </div>\n                </TableCell>\n                <TableCell className=\"font-medium py-2 sm:py-4\">{item.nombre}</TableCell>\n                <TableCell className=\"hidden md:table-cell py-2 sm:py-4\">{item.tipo}</TableCell>\n                <TableCell className=\"hidden md:table-cell py-2 sm:py-4\">{item.color}</TableCell>\n                <TableCell className=\"hidden lg:table-cell py-2 sm:py-4\">{item.modelo}</TableCell>\n                <TableCell className=\"hidden lg:table-cell py-2 sm:py-4 capitalize\">{item.estilo}</TableCell>\n                <TableCell className=\"hidden sm:table-cell py-2 sm:py-4\">\n                  {item.fechacompra ? new Date(item.fechacompra + 'T00:00:00').toLocaleDateString() : '-'}\n                </TableCell>\n                <TableCell className=\"text-right px-2 sm:px-4 py-2 sm:py-4\">\n                  <Button variant=\"ghost\" size=\"icon\" onClick={() => onEditItem(item)} className=\"mr-1 sm:mr-2 hover:text-primary h-8 w-8 sm:h-auto sm:w-auto\">\n                    <Edit className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Editar</span>\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDeleteConfirmation(item)} className=\"hover:text-destructive h-8 w-8 sm:h-auto sm:w-auto\">\n                    <Trash2 className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Eliminar</span>\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {itemToConfirmDelete && (\n        <AlertDialog open={!!itemToConfirmDelete} onOpenChange={(open) => !open && setItemToConfirmDelete(null)}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n              <AlertDialogDescription>\n                Esta acción no se puede deshacer. Esto eliminará permanentemente la prenda &quot;{itemToConfirmDelete.nombre}&quot;.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel onClick={() => setItemToConfirmDelete(null)}>Cancelar</AlertDialogCancel>\n              <AlertDialogAction onClick={executeDelete} className=\"bg-destructive hover:bg-destructive/90 text-destructive-foreground\">\n                Eliminar\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n    </>\n  );\n}\n",
      "ClothingCard.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport Image from 'next/image';\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Edit, Trash2, CalendarDays, ThermometerSnowflake, ThermometerSun } from 'lucide-react';\nimport type { Prenda } from '@/types';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\n\ninterface ClothingCardProps {\n  item: Prenda;\n  onEdit: (item: Prenda) => void;\n  onDelete: (item: Prenda) => void;\n}\n\nexport function ClothingCard({ item, onEdit, onDelete }: ClothingCardProps) {\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = React.useState(false);\n\n  const handleDeleteConfirm = () => {\n    onDelete(item);\n    setIsDeleteDialogOpen(false);\n  };\n\n  return (\n    <Card className=\"flex flex-col overflow-hidden shadow-lg rounded-xl hover:shadow-2xl transition-shadow duration-300 h-full\">\n      <CardHeader className=\"p-0\">\n        <div className=\"aspect-[3/4] relative w-full bg-muted\">\n          <Image\n            src={item.imagen_url || `https://placehold.co/300x400.png?text=${encodeURIComponent(item.nombre.substring(0,2))}`}\n            alt={item.nombre}\n            fill={true}\n            sizes=\"(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, (max-width: 1280px) 25vw, 20vw\"\n            className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-ai-hint={`${item.tipo.toLowerCase()} ${item.color.toLowerCase()}`.substring(0,50)}\n          />\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4 flex-grow flex flex-col\">\n        <CardTitle className=\"text-lg font-semibold truncate mb-1\" title={item.nombre}>{item.nombre}</CardTitle>\n        <CardDescription className=\"text-sm text-muted-foreground mb-2\">\n          {item.tipo} - {item.color} - {item.modelo}\n        </CardDescription>\n        <div className=\"space-y-1 text-xs text-muted-foreground mb-3\">\n          <div className=\"flex items-center gap-1.5\">\n            <Badge variant=\"outline\" className=\"capitalize\">{item.estilo}</Badge>\n            <Badge variant=\"outline\">{item.temporada}</Badge>\n          </div>\n          {item.fechacompra && (\n            <div className=\"flex items-center gap-1.5\">\n              <CalendarDays className=\"h-3.5 w-3.5\" />\n              <span>Compra: {new Date(item.fechacompra + 'T00:00:00').toLocaleDateString()}</span>\n            </div>\n          )}\n          {(item.temperatura_min !== null && item.temperatura_min !== undefined) || (item.temperatura_max !== null && item.temperatura_max !== undefined) ? (\n            <div className=\"flex items-center gap-1.5\">\n              {item.temperatura_min !== null && item.temperatura_min !== undefined && item.temperatura_max !== null && item.temperatura_max !== undefined ? (\n                <>\n                  <ThermometerSun className=\"h-3.5 w-3.5\" />\n                  <span>{item.temperatura_min}°C - {item.temperatura_max}°C</span>\n                </>\n              ): item.temperatura_min !== null && item.temperatura_min !== undefined ? (\n                <> <ThermometerSnowflake className=\"h-3.5 w-3.5\" /> Min: {item.temperatura_min}°C </>\n              ) : (\n                <> <ThermometerSun className=\"h-3.5 w-3.5\" /> Max: {item.temperatura_max}°C </>\n              )\n              }\n            </div>\n          ) : null}\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-3 border-t mt-auto\">\n        <div className=\"flex w-full justify-end gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(item)} className=\"flex-1\">\n            <Edit className=\"mr-1.5 h-4 w-4\" /> Editar\n          </Button>\n          <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n            <AlertDialogTrigger asChild>\n              <Button variant=\"destructive\" size=\"sm\" onClick={() => setIsDeleteDialogOpen(true)} className=\"flex-1\">\n                <Trash2 className=\"mr-1.5 h-4 w-4\" /> Eliminar\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Esta acción no se puede deshacer. Esto eliminará permanentemente la prenda &quot;{item.nombre}&quot;.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDeleteConfirm} className=\"bg-destructive hover:bg-destructive/90\">\n                  Eliminar\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "ColorSwatch.tsx": "\n// src/components/ColorSwatch.tsx\n'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface ColorSwatchProps {\n  colorName?: string; \n  hexColor?: string; \n  className?: string;\n}\n\n// Basic mapping for common color names to Tailwind classes\nconst commonColorMap: Record<string, string> = {\n  rojo: 'bg-red-500',\n  azul: 'bg-blue-500',\n  verde: 'bg-green-500',\n  amarillo: 'bg-yellow-400',\n  negro: 'bg-black',\n  blanco: 'bg-white border border-slate-300',\n  gris: 'bg-gray-400',\n  marrón: 'bg-yellow-700', // Using yellow for brown\n  naranja: 'bg-orange-500',\n  violeta: 'bg-purple-500',\n  morado: 'bg-purple-500',\n  rosa: 'bg-pink-400',\n  celeste: 'bg-sky-400',\n  beige: 'bg-yellow-100 border border-yellow-300',\n  crema: 'bg-orange-50 border border-orange-200',\n  oliva: 'bg-lime-700',\n  turquesa: 'bg-cyan-400',\n  salmon: 'bg-red-300',\n  lavanda: 'bg-purple-300',\n  // Add more specific colors as needed\n};\n\nexport function ColorSwatch({ colorName, hexColor, className }: ColorSwatchProps) {\n  const colorClass = colorName ? commonColorMap[colorName.toLowerCase()] || 'bg-gray-200 border border-gray-300' : 'bg-gray-200 border border-gray-300';\n\n  return (\n    <div className={cn(\"flex items-center gap-1.5\", className)}>\n      <div\n        className={cn(\"h-3 w-3 rounded-full shadow-sm\", hexColor ? '' : colorClass)}\n        style={hexColor ? { backgroundColor: hexColor } : {}}\n        title={colorName || 'Color desconocido'}\n      />\n      {colorName && <span className=\"text-xs capitalize text-muted-foreground\">{colorName}</span>}\n    </div>\n  );\n}\n",
      "InspirationCard.tsx": "\n// src/components/InspirationCard.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Lightbulb } from 'lucide-react';\n\ninterface InspirationCardProps {\n  quote: string;\n  author?: string;\n}\n\nconst defaultInspirations: InspirationCardProps[] = [\n  { quote: \"La moda se desvanece, solo el estilo permanece igual.\", author: \"Coco Chanel\" },\n  { quote: \"Vístete vulgar y solo verán el vestido, vístete elegante y verán a la mujer.\", author: \"Coco Chanel\" },\n  { quote: \"La simplicidad es la clave de la verdadera elegancia.\", author: \"Coco Chanel\" },\n  { quote: \"No sigas las tendencias. No dejes que la moda te posea, decide quién eres, qué quieres expresar por la forma en que te vistes y la forma en que vives.\", author: \"Gianni Versace\" },\n  { quote: \"El estilo es una forma de decir quién eres sin tener que hablar.\", author: \"Rachel Zoe\" },\n  { quote: \"La diferencia entre estilo y moda está en la calidad.\", author: \"Giorgio Armani\" },\n  { quote: \"La moda es armadura para sobrevivir a la realidad de la vida cotidiana.\", author: \"Bill Cunningham\" },\n  { quote: \"Menos es más. Combina básicos con una prenda statement.\", author: \"EstilosIA\" },\n  { quote: \"Atrévete a experimentar con un color que normalmente no usarías.\", author: \"EstilosIA\" },\n  { quote: \"Los accesorios son el signo de exclamación de un outfit.\", author: \"Michael Kors\" },\n];\n\n\nexport function InspirationCard() {\n  const [inspiration, setInspiration] = React.useState<InspirationCardProps | null>(null);\n\n  React.useEffect(() => {\n    setInspiration(defaultInspirations[Math.floor(Math.random() * defaultInspirations.length)]);\n  }, []);\n\n  if (!inspiration) return null;\n\n  return (\n    <Card className=\"shadow-md rounded-xl bg-secondary/50 border-secondary mt-6\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center text-md font-semibold text-secondary-foreground\">\n          <Lightbulb className=\"mr-2 h-5 w-5 text-secondary-foreground/80\" />\n          Inspiración del Día\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <blockquote className=\"text-sm text-secondary-foreground/90 italic\">\n          &ldquo;{inspiration.quote}&rdquo;\n        </blockquote>\n        {inspiration.author && (\n          <p className=\"text-xs text-muted-foreground mt-2 text-right\">- {inspiration.author}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "TemperatureControl.tsx": "'use client';\n\nimport * as React from 'react';\nimport { Slider } from '@/components/ui/slider';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Thermometer } from 'lucide-react';\n\ninterface TemperatureControlProps {\n  value: [number, number];\n  onChange: (value: [number, number]) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport function TemperatureControl({\n  value,\n  onChange,\n  min = -20,\n  max = 40,\n  step = 1,\n}: TemperatureControlProps) {\n  const [localValue, setLocalValue] = React.useState<[number, number]>(value);\n\n  React.useEffect(() => {\n    setLocalValue(value);\n  }, [value]);\n\n  const handleValueChange = (newVal: [number, number]) => {\n    setLocalValue(newVal);\n  };\n  \n  const handleCommit = (committedVal: [number, number]) => {\n    onChange(committedVal);\n  };\n\n\n  return (\n    <Card className=\"shadow-lg rounded-xl\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center text-xl font-semibold\">\n          <Thermometer className=\"mr-2 h-6 w-6 text-primary\" />\n          Control de Temperatura\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between text-sm font-medium text-foreground\">\n            <span>{localValue[0]}°C</span>\n            <span>{localValue[1]}°C</span>\n          </div>\n          <Slider\n            value={localValue}\n            onValueChange={handleValueChange}\n            onValueCommit={handleCommit}\n            min={min}\n            max={max}\n            step={step}\n            aria-label=\"Temperature range slider\"\n            className=\"[&>.slider-thumb]:bg-primary [&>.slider-range]:bg-primary/80\"\n          />\n          <Label htmlFor=\"temperature-slider\" className=\"sr-only\">\n            Rango de Temperatura (°C)\n          </Label>\n          <p className=\"text-xs text-muted-foreground text-center\">\n            Desliza para seleccionar el rango de temperatura deseado.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "StyleSelection.tsx": "'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\nimport type { StyleOption } from '@/types';\nimport { Shirt, Briefcase, Dumbbell, Feather, Wand2 } from 'lucide-react';\n\nexport const styleOptions: StyleOption[] = [\n  { id: 'casual', name: 'Casual', icon: Shirt, description: 'Cómodo y relajado para el día a día.' },\n  { id: 'formal', name: 'Formal', icon: Briefcase, description: 'Elegante y profesional para eventos especiales.' },\n  { id: 'sporty', name: 'Deportivo', icon: Dumbbell, description: 'Funcional y activo para tus entrenamientos.' },\n  { id: 'bohemian', name: 'Bohemio', icon: Feather, description: 'Libre y artístico con toques étnicos.' },\n];\n\ninterface StyleSelectionProps {\n  selectedStyle: string | null;\n  onStyleSelect: (styleId: string) => void;\n}\n\nexport function StyleSelection({ selectedStyle, onStyleSelect }: StyleSelectionProps) {\n  return (\n    <Card className=\"shadow-lg rounded-xl\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center text-xl font-semibold\">\n          <Wand2 className=\"mr-2 h-6 w-6 text-primary\" />\n          Selecciona tu Estilo\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {styleOptions.map((style) => (\n            <Card\n              key={style.id}\n              onClick={() => onStyleSelect(style.id)}\n              className={cn(\n                'cursor-pointer transition-all duration-200 ease-in-out hover:shadow-xl hover:border-primary/80',\n                selectedStyle === style.id ? 'border-primary ring-2 ring-primary shadow-xl' : 'border-border'\n              )}\n              tabIndex={0}\n              onKeyDown={(e) => e.key === 'Enter' && onStyleSelect(style.id)}\n              role=\"button\"\n              aria-pressed={selectedStyle === style.id}\n              aria-label={`Select ${style.name} style`}\n            >\n              <CardContent className=\"p-4 flex flex-col items-center justify-center aspect-square\">\n                <style.icon className={cn(\n                  'h-10 w-10 mb-3 transition-colors',\n                  selectedStyle === style.id ? 'text-primary' : 'text-muted-foreground group-hover:text-primary/80'\n                )} />\n                <p className={cn(\n                  'font-medium text-center text-sm',\n                  selectedStyle === style.id ? 'text-primary' : 'text-foreground'\n                )}>\n                  {style.name}\n                </p>\n                <p className=\"text-xs text-muted-foreground text-center mt-1 hidden sm:block\">\n                  {style.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n         <p className=\"text-xs text-muted-foreground text-center mt-4\">\n            Elige el estilo que mejor se adapte a tu ocasión o preferencia.\n          </p>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "SuggestionHistory.tsx": "\n// src/components/SuggestionHistory.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { History, RotateCcw, ShoppingBag } from 'lucide-react';\nimport type { HistoricalSuggestion } from '@/types';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\ninterface SuggestionHistoryProps {\n  history: HistoricalSuggestion[];\n  onApplySuggestion: (suggestion: HistoricalSuggestion) => void;\n  onClearHistory: () => void;\n}\n\nexport function SuggestionHistory({ history, onApplySuggestion, onClearHistory }: SuggestionHistoryProps) {\n  if (!history || history.length === 0) {\n    return (\n      <Card className=\"mt-8 shadow-lg rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg font-semibold\">\n            <History className=\"mr-2 h-5 w-5 text-primary\" />\n            Historial de Sugerencias\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-6 text-muted-foreground\">\n            <ShoppingBag className=\"mx-auto h-12 w-12 mb-3 opacity-50\" />\n            <p>Aún no has generado ninguna sugerencia.</p>\n            <p className=\"text-xs mt-1\">¡Prueba a crear tu primer look!</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Sort history by timestamp, newest first, and take last 5\n  const sortedHistory = [...history]\n    .sort((a, b) => b.timestamp - a.timestamp)\n    .slice(0, 5);\n\n  return (\n    <Card className=\"mt-8 shadow-lg rounded-xl\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n        <div>\n          <CardTitle className=\"flex items-center text-lg font-semibold\">\n            <History className=\"mr-2 h-5 w-5 text-primary\" />\n            Historial Reciente\n          </CardTitle>\n          <CardDescription className=\"text-xs\">Últimas 5 sugerencias generadas.</CardDescription>\n        </div>\n        {history.length > 0 && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClearHistory} className=\"text-xs text-muted-foreground hover:text-destructive\">\n                Limpiar Historial\n            </Button>\n        )}\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[250px] pr-3\">\n          <div className=\"space-y-3\">\n            {sortedHistory.map((item) => (\n              <div key={item.id} className=\"p-3 border rounded-lg bg-background hover:shadow-md transition-shadow\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">\n                      {item.selectedStyle.charAt(0).toUpperCase() + item.selectedStyle.slice(1)} ({item.temperature[0]}°C - {item.temperature[1]}°C)\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {format(new Date(item.timestamp), \"dd MMM yyyy, HH:mm\", { locale: es })}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1 truncate\">\n                      Prendas: {item.suggestion.items.map(p => p.name).join(', ')}\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onApplySuggestion(item)}\n                    className=\"ml-2 text-xs shrink-0\"\n                    title=\"Volver a aplicar esta sugerencia\"\n                  >\n                    <RotateCcw className=\"mr-1.5 h-3 w-3\" /> Aplicar\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "GridCardsToggle.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { TableIcon, LayoutGrid } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport type ViewMode = 'table' | 'grid';\n\ninterface GridCardsToggleProps {\n  viewMode: ViewMode;\n  onViewModeChange: (mode: ViewMode) => void;\n}\n\nexport function GridCardsToggle({ viewMode, onViewModeChange }: GridCardsToggleProps) {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Button\n        variant={viewMode === 'table' ? 'secondary' : 'ghost'}\n        size=\"icon\"\n        onClick={() => onViewModeChange('table')}\n        aria-pressed={viewMode === 'table'}\n        title=\"Vista de Tabla\"\n        className={cn(viewMode === 'table' && \"bg-accent text-accent-foreground\")}\n      >\n        <TableIcon className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Vista de Tabla</span>\n      </Button>\n      <Button\n        variant={viewMode === 'grid' ? 'secondary' : 'ghost'}\n        size=\"icon\"\n        onClick={() => onViewModeChange('grid')}\n        aria-pressed={viewMode === 'grid'}\n        title=\"Vista de Tarjetas\"\n        className={cn(viewMode === 'grid' && \"bg-accent text-accent-foreground\")}\n      >\n        <LayoutGrid className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Vista de Tarjetas</span>\n      </Button>\n    </div>\n  );\n}\n",
      "OutfitExplanation.tsx": "\n// src/components/OutfitExplanation.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { TextQuote, Copy, Check } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface OutfitExplanationProps {\n  explanation: string;\n}\n\nexport function OutfitExplanation({ explanation }: OutfitExplanationProps) {\n  const { toast } = useToast();\n  const [copied, setCopied] = React.useState(false);\n\n  const handleCopyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(explanation);\n      setCopied(true);\n      toast({ title: 'Copiado', description: 'Explicación copiada al portapapeles.' });\n      setTimeout(() => setCopied(false), 2000); // Reset icon after 2 seconds\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n      toast({ title: 'Error', description: 'No se pudo copiar la explicación.', variant: 'destructive' });\n    }\n  };\n\n  if (!explanation) {\n    return null;\n  }\n\n  return (\n    <Card className=\"shadow-lg rounded-xl bg-accent/30 border-accent mt-6\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"flex items-center text-lg font-semibold text-accent-foreground\">\n          <TextQuote className=\"mr-2 h-5 w-5 text-accent-foreground/80\" />\n          Análisis de Estilo IA\n        </CardTitle>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={handleCopyToClipboard}\n          className=\"h-8 w-8 text-accent-foreground/70 hover:text-accent-foreground hover:bg-accent/50\"\n          aria-label=\"Copiar explicación\"\n        >\n          {copied ? <Check className=\"h-4 w-4 text-green-500\" /> : <Copy className=\"h-4 w-4\" />}\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-accent-foreground/90 leading-relaxed whitespace-pre-wrap\">\n          {explanation}\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n"
    },
    "wishlist": {
      "__archivos__": {
        "WishlistForm.tsx": "\n// src/components/wishlist/WishlistForm.tsx\n'use client';\n\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport type { WishlistItem, WishlistFormData } from '@/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\n\nconst wishlistFormSchema = z.object({\n  name: z.string().min(2, { message: 'El nombre debe tener al menos 2 caracteres.' }),\n  description: z.string().optional(),\n  imageUrl: z.string().url({ message: 'Debe ser una URL válida para la imagen.' }).or(z.literal(\"\")).optional(),\n  estimatedPrice: z.coerce.number().positive({ message: 'El precio debe ser un número positivo.' }).optional().nullable(),\n  storeUrl: z.string().url({ message: 'Debe ser una URL válida para la tienda.' }).or(z.literal(\"\")).optional(),\n});\n\ninterface WishlistFormProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onSubmit: (data: WishlistFormData, itemId?: string) => Promise<{ error?: string; validationErrors?: z.ZodIssue[] }>;\n  initialData?: WishlistItem | null;\n}\n\nexport function WishlistForm({ isOpen, onOpenChange, onSubmit, initialData }: WishlistFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const form = useForm<WishlistFormData>({\n    resolver: zodResolver(wishlistFormSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      imageUrl: '',\n      estimatedPrice: undefined,\n      storeUrl: '',\n    },\n  });\n\n  React.useEffect(() => {\n    if (isOpen) {\n      if (initialData) {\n        form.reset({\n          name: initialData.name,\n          description: initialData.description || '',\n          imageUrl: initialData.imageUrl || '',\n          estimatedPrice: initialData.estimatedPrice ?? undefined,\n          storeUrl: initialData.storeUrl || '',\n        });\n      } else {\n        form.reset({\n          name: '', description: '', imageUrl: '', estimatedPrice: undefined, storeUrl: ''\n        });\n      }\n    }\n  }, [initialData, form, isOpen]);\n\n  const handleFormSubmit = async (data: WishlistFormData) => {\n    setIsSubmitting(true);\n    const result = await onSubmit(data, initialData?.id);\n    setIsSubmitting(false);\n\n    if (result.error) {\n        if (result.validationErrors) {\n            result.validationErrors.forEach(err => {\n            form.setError(err.path[0] as keyof WishlistFormData, { message: err.message });\n            });\n            toast({ title: 'Error de validación', description: 'Por favor corrige los errores.', variant: 'destructive' });\n        } else {\n            toast({ title: 'Error', description: result.error, variant: 'destructive' });\n        }\n    } else {\n      toast({\n        title: 'Éxito',\n        description: `Elemento ${initialData ? 'actualizado' : 'agregado'} a la lista de deseos.`,\n      });\n      onOpenChange(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!isSubmitting) onOpenChange(open); }}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>{initialData ? 'Editar Deseo' : 'Agregar Nuevo Deseo'}</DialogTitle>\n          <DialogDescription>\n            Añade o modifica los detalles del artículo que deseas.\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)}>\n          <ScrollArea className=\"h-[60vh] pr-6\">\n            <div className=\"grid gap-4 py-4\">\n              <div>\n                <Label htmlFor=\"name\">Nombre del Artículo</Label>\n                <Input id=\"name\" {...form.register('name')} />\n                {form.formState.errors.name && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.name.message}</p>}\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Descripción (Opcional)</Label>\n                <Textarea id=\"description\" {...form.register('description')} />\n              </div>\n              <div>\n                <Label htmlFor=\"imageUrl\">URL de Imagen (Opcional)</Label>\n                <Input id=\"imageUrl\" {...form.register('imageUrl')} placeholder=\"https://ejemplo.com/imagen.png\" />\n                 {form.formState.errors.imageUrl && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.imageUrl.message}</p>}\n              </div>\n              <div>\n                <Label htmlFor=\"estimatedPrice\">Precio Estimado (Opcional)</Label>\n                <Input id=\"estimatedPrice\" type=\"number\" step=\"0.01\" {...form.register('estimatedPrice')} placeholder=\"75.00\" />\n                {form.formState.errors.estimatedPrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.estimatedPrice.message}</p>}\n              </div>\n              <div>\n                <Label htmlFor=\"storeUrl\">URL de Tienda (Opcional)</Label>\n                <Input id=\"storeUrl\" {...form.register('storeUrl')} placeholder=\"https://tienda.ejemplo.com/articulo\" />\n                {form.formState.errors.storeUrl && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.storeUrl.message}</p>}\n              </div>\n            </div>\n          </ScrollArea>\n          <DialogFooter className=\"pt-4\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\" disabled={isSubmitting}>Cancelar</Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {initialData ? 'Guardar Cambios' : 'Agregar a Lista'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
        "WishlistItemCard.tsx": "\n// src/components/wishlist/WishlistItemCard.tsx\nimport * as React from 'react';\nimport Image from 'next/image';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Edit, Trash2, CheckCircle, Circle, Archive, MoreVertical, ExternalLink, Shirt } from 'lucide-react';\nimport type { WishlistItem } from '@/types';\n\ninterface WishlistItemCardProps {\n  item: WishlistItem;\n  onEdit: (item: WishlistItem) => void;\n  onDelete: (itemId: string) => void;\n  onStatusChange: (itemId: string, status: WishlistItem['status']) => void;\n}\n\nexport function WishlistItemCard({ item, onEdit, onDelete, onStatusChange }: WishlistItemCardProps) {\n  const statusBadgeVariant = {\n    pending: 'secondary',\n    purchased: 'default',\n    discarded: 'outline',\n  } as const;\n  \n  const statusText = {\n    pending: 'Pendiente',\n    purchased: 'Comprado',\n    discarded: 'Descartado',\n  };\n\n\n  return (\n    <Card className=\"flex flex-col overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-200 rounded-lg\">\n      <CardHeader className=\"p-0\">\n        <div className=\"aspect-square relative w-full bg-muted\">\n          {item.imageUrl ? (\n            <Image\n              src={item.imageUrl}\n              alt={item.name}\n              fill={true}\n              sizes=\"(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, (max-width: 1280px) 25vw, 20vw\"\n              className=\"object-cover\"\n              data-ai-hint=\"fashion clothing wishlist\"\n            />\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <Shirt className=\"w-16 h-16 text-muted-foreground/50\" />\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4 flex-grow\">\n        <div className=\"flex justify-between items-start mb-1\">\n            <CardTitle className=\"text-md font-semibold leading-tight\" title={item.name}>{item.name}</CardTitle>\n            <Badge variant={statusBadgeVariant[item.status]} className=\"text-xs ml-2 shrink-0\">{statusText[item.status]}</Badge>\n        </div>\n        {item.description && <CardDescription className=\"text-xs mt-1 truncate\" title={item.description}>{item.description}</CardDescription>}\n        {item.estimatedPrice && <p className=\"text-sm font-medium text-primary mt-1.5\">${item.estimatedPrice.toFixed(2)}</p>}\n      </CardContent>\n      <CardFooter className=\"p-3 border-t flex items-center justify-between\">\n        {item.storeUrl && (\n          <Button variant=\"outline\" size=\"sm\" asChild>\n            <a href={item.storeUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <ExternalLink className=\"mr-1.5 h-3 w-3\" /> Tienda\n            </a>\n          </Button>\n        )}\n        <div className=\"flex-grow\"></div> {/* Spacer */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n              <MoreVertical className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Más opciones</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onEdit(item)}>\n              <Edit className=\"mr-2 h-4 w-4\" /> Editar\n            </DropdownMenuItem>\n            {item.status !== 'purchased' && (\n              <DropdownMenuItem onClick={() => onStatusChange(item.id, 'purchased')}>\n                <CheckCircle className=\"mr-2 h-4 w-4\" /> Marcar como Comprado\n              </DropdownMenuItem>\n            )}\n            {item.status !== 'pending' && (\n                <DropdownMenuItem onClick={() => onStatusChange(item.id, 'pending')}>\n                    <Circle className=\"mr-2 h-4 w-4\" /> Marcar como Pendiente\n                </DropdownMenuItem>\n            )}\n            {item.status !== 'discarded' && (\n              <DropdownMenuItem onClick={() => onStatusChange(item.id, 'discarded')}>\n                <Archive className=\"mr-2 h-4 w-4\" /> Marcar como Descartado\n              </DropdownMenuItem>\n            )}\n            <DropdownMenuItem onClick={() => onDelete(item.id)} className=\"text-destructive focus:text-destructive focus:bg-destructive/10\">\n              <Trash2 className=\"mr-2 h-4 w-4\" /> Eliminar\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardFooter>\n    </Card>\n  );\n}\n"
      }
    },
    "calendario": {
      "__archivos__": {
        "AssignmentCard.tsx": "\n// src/components/calendario/AssignmentCard.tsx\n'use client';\n\nimport * as React from 'react';\nimport Image from 'next/image';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Shirt, Sparkles, Edit, Trash2, CalendarDays } from 'lucide-react';\nimport type { CalendarAssignment } from '@/types';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\ninterface AssignmentCardProps {\n  assignment: CalendarAssignment;\n  onEdit: (assignment: CalendarAssignment) => void;\n  onDelete: (assignmentId: number) => void;\n}\n\nexport function AssignmentCard({ assignment, onEdit, onDelete }: AssignmentCardProps) {\n  const isPrenda = assignment.tipo_asignacion === 'prenda';\n  const item = isPrenda ? assignment.prenda : assignment.look;\n  const imageUrl = item?.imagen_url || \n                   (isPrenda \n                     ? `https://placehold.co/200x200.png?text=${encodeURIComponent(item?.nombre?.substring(0,2) || 'P')}` \n                     : `https://placehold.co/200x200.png?text=${encodeURIComponent(item?.nombre?.substring(0,2) || 'L')}`);\n  \n  if (!item) {\n    return (\n      <Card className=\"shadow-md rounded-xl\">\n        <CardHeader>\n          <CardTitle>Asignación no encontrada</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Los detalles de esta asignación no están disponibles.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-md rounded-xl animate-in fade-in-50\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n            <div>\n                <CardTitle className=\"text-lg font-semibold flex items-center\">\n                {isPrenda ? <Shirt className=\"mr-2 h-5 w-5 text-primary\" /> : <Sparkles className=\"mr-2 h-5 w-5 text-primary\" />}\n                {item.nombre}\n                </CardTitle>\n                <CardDescription className=\"text-xs text-muted-foreground\">\n                {isPrenda ? 'Prenda asignada' : 'Look asignado'} para el {format(new Date(assignment.fecha + 'T00:00:00'), \"PPP\", { locale: es })}\n                </CardDescription>\n            </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"aspect-square relative w-full max-w-xs mx-auto rounded-md overflow-hidden border bg-muted\">\n          <Image\n            src={imageUrl}\n            alt={item.nombre}\n            fill={true}\n            sizes=\"320px\" // max-w-xs is 20rem = 320px\n            className=\"object-cover\"\n             data-ai-hint={isPrenda ? `${item.tipo} ${item.color}` : item.estilo}\n          />\n        </div>\n        {item.estilo && (\n          <p className=\"text-sm\">\n            <span className=\"font-medium text-muted-foreground\">Estilo: </span>\n            <span className=\"capitalize\">{item.estilo}</span>\n          </p>\n        )}\n        {assignment.nota && (\n          <div>\n            <p className=\"text-sm font-medium text-muted-foreground mb-1\">Notas:</p>\n            <p className=\"text-sm p-2 bg-accent/50 rounded-md whitespace-pre-wrap\">{assignment.nota}</p>\n          </div>\n        )}\n         {!isPrenda && (assignment.look?.prendas?.length ?? 0) > 0 && (\n           <div>\n            <p className=\"text-sm font-medium text-muted-foreground mb-1\">Prendas en este look:</p>\n             <ul className=\"list-disc list-inside text-sm pl-2 space-y-0.5\">\n              {assignment.look!.prendas.slice(0, 3).map(p => <li key={p.id} className=\"truncate\" title={p.nombre}>{p.nombre}</li>)}\n              {assignment.look!.prendas.length > 3 && <li>y {assignment.look!.prendas.length - 3} más...</li>}\n            </ul>\n           </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex justify-end gap-2 pt-4 border-t\">\n        <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(assignment)}>\n          <Edit className=\"mr-2 h-4 w-4\" /> Editar\n        </Button>\n        <Button variant=\"destructive\" size=\"sm\" onClick={() => onDelete(assignment.id)}>\n          <Trash2 className=\"mr-2 h-4 w-4\" /> Eliminar\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "AssignmentModal.tsx": "\n// src/components/calendario/AssignmentModal.tsx\n'use client';\n\nimport * as React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Check, ChevronsUpDown, Loader2, Tag, Sparkles } from 'lucide-react';\nimport type { CalendarAssignmentFormData, Prenda, Look, CalendarAssignment } from '@/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\nconst assignmentFormSchema = z.object({\n  fecha: z.string(), // Already in YYYY-MM-DD\n  tipo_asignacion: z.enum(['prenda', 'look'], { required_error: \"Debes seleccionar un tipo de asignación.\" }),\n  referencia_id: z.coerce.number({ invalid_type_error: \"Debes seleccionar una prenda o look.\"}).min(1, \"Debes seleccionar una prenda o look.\"),\n  nota: z.string().optional(),\n});\n\ninterface AssignmentModalProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onSubmit: (data: CalendarAssignmentFormData, assignmentId?: number) => Promise<{ data?: CalendarAssignment; error?: string }>;\n  selectedDate: Date | null; // Can be null initially\n  existingAssignment?: CalendarAssignment | null;\n  availablePrendas: Prenda[];\n  availableLooks: Look[];\n}\n\nexport function AssignmentModal({\n  isOpen,\n  onOpenChange,\n  onSubmit,\n  selectedDate,\n  existingAssignment,\n  availablePrendas,\n  availableLooks,\n}: AssignmentModalProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [selectedType, setSelectedType] = React.useState<'prenda' | 'look' | ''>(existingAssignment?.tipo_asignacion || '');\n  \n  const [prendaPopoverOpen, setPrendaPopoverOpen] = React.useState(false);\n  const [lookPopoverOpen, setLookPopoverOpen] = React.useState(false);\n\n  const form = useForm<CalendarAssignmentFormData>({\n    resolver: zodResolver(assignmentFormSchema),\n    defaultValues: {\n      fecha: selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '',\n      tipo_asignacion: 'prenda', \n      referencia_id: 0, \n      nota: '',\n    },\n  });\n  \n  const { register, handleSubmit, control, watch, setValue, reset, formState: { errors } } = form;\n  const currentTipoAsignacion = watch('tipo_asignacion');\n\n  React.useEffect(() => {\n    if (isOpen) {\n      const defaultValues: CalendarAssignmentFormData = {\n        fecha: selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '',\n        tipo_asignacion: existingAssignment?.tipo_asignacion || 'prenda',\n        referencia_id: existingAssignment && existingAssignment.tipo_asignacion && (existingAssignment.tipo_asignacion === 'prenda' ? existingAssignment.prenda_id : existingAssignment.look_id)\n          ? (existingAssignment.tipo_asignacion === 'prenda' ? existingAssignment.prenda_id! : existingAssignment.look_id!)\n          : 0,\n        nota: existingAssignment?.nota || '',\n      };\n      reset(defaultValues);\n      setSelectedType(existingAssignment?.tipo_asignacion || 'prenda');\n    }\n  }, [isOpen, selectedDate, existingAssignment, reset]);\n\n  const handleFormSubmit = async (data: CalendarAssignmentFormData) => {\n    setIsSubmitting(true);\n    const result = await onSubmit(data, existingAssignment?.id);\n    setIsSubmitting(false);\n\n    if (result.error) {\n      toast({ title: 'Error', description: result.error, variant: 'destructive' });\n    } else {\n      toast({ title: 'Éxito', description: `Asignación ${existingAssignment ? 'actualizada' : 'creada'}.` });\n      onOpenChange(false);\n    }\n  };\n  \n  const itemsForSelection = React.useMemo(() => {\n    return currentTipoAsignacion === 'prenda' ? availablePrendas : availableLooks;\n  }, [currentTipoAsignacion, availablePrendas, availableLooks]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!isSubmitting) onOpenChange(open); }}>\n      <DialogContent className=\"sm:max-w-[525px]\">\n        <DialogHeader>\n          <DialogTitle>{existingAssignment ? 'Editar Asignación' : 'Asignar a Calendario'}</DialogTitle>\n          {selectedDate && <DialogDescription>Asignando para el {format(selectedDate, \"PPP\", { locale: es })}.</DialogDescription>}\n        </DialogHeader>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-4\">\n          <input type=\"hidden\" {...register('fecha')} />\n          \n          <div>\n            <Label htmlFor=\"tipo_asignacion\">Tipo de Asignación</Label>\n            <Controller\n              name=\"tipo_asignacion\"\n              control={control}\n              render={({ field }) => (\n                <Select \n                  onValueChange={(value) => {\n                    field.onChange(value);\n                    setSelectedType(value as 'prenda' | 'look');\n                    setValue('referencia_id', 0); // Reset reference when type changes\n                  }} \n                  value={field.value}\n                >\n                  <SelectTrigger id=\"tipo_asignacion\">\n                    <SelectValue placeholder=\"Selecciona un tipo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"prenda\">Prenda</SelectItem>\n                    <SelectItem value=\"look\">Look</SelectItem>\n                  </SelectContent>\n                </Select>\n              )}\n            />\n            {errors.tipo_asignacion && <p className=\"text-sm text-destructive mt-1\">{errors.tipo_asignacion.message}</p>}\n          </div>\n\n          {currentTipoAsignacion && (\n            <div>\n              <Label htmlFor=\"referencia_id\">{currentTipoAsignacion === 'prenda' ? 'Prenda' : 'Look'}</Label>\n              <Controller\n                name=\"referencia_id\"\n                control={control}\n                render={({ field }) => (\n                  <Popover open={currentTipoAsignacion === 'prenda' ? prendaPopoverOpen : lookPopoverOpen} onOpenChange={currentTipoAsignacion === 'prenda' ? setPrendaPopoverOpen : setLookPopoverOpen}>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        role=\"combobox\"\n                        aria-expanded={currentTipoAsignacion === 'prenda' ? prendaPopoverOpen : lookPopoverOpen}\n                        className=\"w-full justify-between\"\n                      >\n                        {field.value && itemsForSelection.find(item => item.id === field.value)?.nombre\n                          ? itemsForSelection.find(item => item.id === field.value)?.nombre\n                          : `Selecciona un${currentTipoAsignacion === 'prenda' ? 'a prenda' : ' look'}`}\n                        <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n                      <Command>\n                        <CommandInput placeholder={`Buscar ${currentTipoAsignacion === 'prenda' ? 'prenda' : 'look'}...`} />\n                        <CommandEmpty>No se encontró.</CommandEmpty>\n                        <CommandList>\n                          <CommandGroup>\n                            {itemsForSelection.map((item) => (\n                              <CommandItem\n                                key={item.id}\n                                value={item.nombre}\n                                onSelect={() => {\n                                  setValue('referencia_id', item.id, { shouldValidate: true });\n                                  if (currentTipoAsignacion === 'prenda') setPrendaPopoverOpen(false);\n                                  else setLookPopoverOpen(false);\n                                }}\n                              >\n                                <Check\n                                  className={cn(\n                                    \"mr-2 h-4 w-4\",\n                                    field.value === item.id ? \"opacity-100\" : \"opacity-0\"\n                                  )}\n                                />\n                                <div className=\"flex items-center\">\n                                {currentTipoAsignacion === 'prenda' ? <Tag className=\"mr-2 h-4 w-4 text-muted-foreground\" /> : <Sparkles className=\"mr-2 h-4 w-4 text-muted-foreground\" />}\n                                {item.nombre}\n                                </div>\n                              </CommandItem>\n                            ))}\n                          </CommandGroup>\n                        </CommandList>\n                      </Command>\n                    </PopoverContent>\n                  </Popover>\n                )}\n              />\n              {errors.referencia_id && <p className=\"text-sm text-destructive mt-1\">{errors.referencia_id.message}</p>}\n            </div>\n          )}\n\n          <div>\n            <Label htmlFor=\"nota\">Nota (Opcional)</Label>\n            <Textarea id=\"nota\" {...register('nota')} />\n          </div>\n\n          <DialogFooter className=\"pt-4\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\" disabled={isSubmitting}>Cancelar</Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {existingAssignment ? 'Actualizar' : 'Guardar'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n"
      }
    },
    "ui": {
      "__archivos__": {
        "command.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item> & {\n    /**\n     * If true, prevents the popover (if used within one, like in MultiSelectCommand) \n     * from closing when this item is selected. Useful for multi-select scenarios.\n     */\n    preventPopoverClose?: boolean; \n  }\n>(({ className, children, preventPopoverClose, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    // Stop propagation to prevent popover close if preventPopoverClose is true\n    onClickCapture={preventPopoverClose ? (e) => e.stopPropagation() : undefined}\n    {...props}\n  >\n    {children}\n  </CommandPrimitive.Item>\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n\n",
        "dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
        "progress.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
        "skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
        "separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
        "popover.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
        "scroll-area.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
        "sheet.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
        "accordion.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
        "badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
        "avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
        "menubar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
        "dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
        "button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
        "alert-dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
        "calendar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
        "toast.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
        "label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
        "card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
        "slider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
        "MultiSelectCommand.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Check, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { Button } from './button';\n\nexport interface MultiSelectItem {\n  value: string; // Typically the ID\n  label: string; // Display name\n  icon?: React.ElementType; // Optional icon\n}\n\ninterface MultiSelectCommandProps {\n  options: MultiSelectItem[];\n  selectedValues: string[];\n  onSelectedValuesChange: (newSelectedValues: string[]) => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  emptyResultText?: string;\n  className?: string;\n}\n\nexport function MultiSelectCommand({\n  options,\n  selectedValues,\n  onSelectedValuesChange,\n  placeholder = \"Selecciona opciones...\",\n  searchPlaceholder = \"Buscar opciones...\",\n  emptyResultText = \"No se encontraron opciones.\",\n  className,\n}: MultiSelectCommandProps) {\n  const [open, setOpen] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleSelect = (value: string) => {\n    const newSelected = selectedValues.includes(value)\n      ? selectedValues.filter((v) => v !== value)\n      : [...selectedValues, value];\n    onSelectedValuesChange(newSelected);\n  };\n\n  const handleRemove = (value: string) => {\n    onSelectedValuesChange(selectedValues.filter((v) => v !== value));\n  };\n\n  const selectedOptions = options.filter(option => selectedValues.includes(option.value));\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        role=\"combobox\"\n        aria-expanded={open}\n        className=\"w-full justify-between h-auto min-h-10 py-1.5\"\n        onClick={() => setOpen(!open)}\n      >\n        <div className=\"flex flex-wrap gap-1\">\n          {selectedOptions.length > 0\n            ? selectedOptions.map((option) => (\n                <Badge\n                  key={option.value}\n                  variant=\"secondary\"\n                  className=\"rounded-sm px-2 py-0.5 text-xs\"\n                >\n                  {option.label}\n                  <button\n                    aria-label={`Eliminar ${option.label}`}\n                    onMouseDown={(e) => e.preventDefault()} // Prevent popover close on click\n                    onClick={(e) => {\n                      e.stopPropagation(); // Prevent popover toggle\n                      handleRemove(option.value);\n                    }}\n                    className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              ))\n            : <span className=\"text-muted-foreground text-sm\">{placeholder}</span>}\n        </div>\n        {/* <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" /> */}\n      </Button>\n\n      {open && (\n        <div className=\"absolute z-50 mt-1 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in fade-in-0 zoom-in-95\">\n          <Command>\n            <CommandInput ref={inputRef} placeholder={searchPlaceholder} />\n            <CommandList className=\"max-h-[200px] overflow-y-auto\">\n              <CommandEmpty>{emptyResultText}</CommandEmpty>\n              <CommandGroup>\n                {options.map((option) => {\n                  const isSelected = selectedValues.includes(option.value);\n                  return (\n                    <CommandItem\n                      key={option.value}\n                      value={option.label} // CommandInput searches based on this\n                      onSelect={() => {\n                        handleSelect(option.value);\n                        // Optional: keep focus on input after selection\n                        // inputRef.current?.focus(); \n                      }}\n                      className={cn(\"flex items-center justify-between cursor-pointer\", isSelected ? \"font-medium\" : \"\")}\n                    >\n                      <div className=\"flex items-center\">\n                        {option.icon && <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />}\n                        {option.label}\n                      </div>\n                      <Check\n                        className={cn(\n                          \"h-4 w-4\",\n                          isSelected ? \"opacity-100\" : \"opacity-0\"\n                        )}\n                      />\n                    </CommandItem>\n                  );\n                })}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </div>\n      )}\n    </div>\n  );\n}\n",
        "checkbox.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
        "Navbar.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { Logo } from '@/components/icons/Logo';\nimport { Button } from '@/components/ui/button';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  SheetClose,\n} from '@/components/ui/sheet';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Menu,\n  X,\n  Shirt,\n  BarChart3,\n  Settings,\n  Sparkles,\n  LayoutDashboard,\n  CalendarDays,\n  Archive,\n  ShoppingBag,\n  ChevronDown,\n  Wand2, \n  SlidersHorizontal,\n  Home,\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface NavLinkItem {\n  href: string;\n  label: string;\n  icon: React.ElementType;\n}\n\nconst mainDesktopLinks: NavLinkItem[] = [\n  { href: '/', label: 'Dashboard', icon: LayoutDashboard },\n  { href: '/closet', label: 'Armario', icon: Shirt },\n  { href: '/calendario', label: 'Calendario', icon: CalendarDays },\n  { href: '/statistics', label: 'Estadísticas', icon: BarChart3 },\n];\n\nconst suggestionsDropdownItems: NavLinkItem[] = [\n  { href: '/sugerenciaia', label: 'Sugerencias AI', icon: Home },\n  { href: '/looks', label: 'Mis Looks', icon: Sparkles },\n];\n\nconst moreSettingsDropdownItems: NavLinkItem[] = [\n  { href: '/configuracion', label: 'Configuración', icon: Settings },\n  { href: '/archivo', label: 'Archivo', icon: Archive },\n  { href: '/deseos', label: 'Lista Deseos', icon: ShoppingBag },\n];\n\nconst allMobileNavLinks: NavLinkItem[] = [\n  { href: '/', label: 'Dashboard', icon: LayoutDashboard },\n  { href: '/sugerenciaia', label: 'Sugerencias AI', icon: Home },\n  { href: '/closet', label: 'Armario', icon: Shirt },\n  { href: '/looks', label: 'Mis Looks', icon: Sparkles },\n  { href: '/calendario', label: 'Calendario', icon: CalendarDays },\n  { href: '/statistics', label: 'Estadísticas', icon: BarChart3 },\n  { href: '/archivo', label: 'Archivo', icon: Archive },\n  { href: '/deseos', label: 'Lista Deseos', icon: ShoppingBag },\n  { href: '/configuracion', label: 'Configuración', icon: Settings },\n];\n\nexport function Navbar() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = React.useState(false);\n  const pathname = usePathname();\n\n  const isLinkActive = (href: string) => {\n    if (href === '/' && pathname === '/') return true;\n    return href !== '/' && pathname.startsWith(href);\n  };\n\n  const isDropdownActive = (itemHrefs: string[]) => {\n    return itemHrefs.some(href => isLinkActive(href));\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border/70 shadow-sm sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex-shrink-0\">\n            <Link href=\"/\" aria-label=\"EstilosIA Home\" className=\"flex items-center\">\n              <Logo className=\"h-8 w-auto\" />\n            </Link>\n          </div>\n\n          <div className=\"hidden md:flex md:ml-6 md:space-x-1 lg:space-x-2 items-center\">\n            {mainDesktopLinks.map((link) => (\n              <Button\n                key={link.label}\n                variant=\"ghost\"\n                asChild\n                className={cn(\n                  \"px-3 py-2 rounded-md text-sm font-medium text-foreground hover:bg-accent hover:text-accent-foreground\",\n                  isLinkActive(link.href) && \"bg-accent text-accent-foreground\"\n                )}\n              >\n                <Link href={link.href}>\n                  <link.icon className=\"mr-2 h-4 w-4 opacity-80\" />\n                  {link.label}\n                </Link>\n              </Button>\n            ))}\n\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"px-3 py-2 rounded-md text-sm font-medium text-foreground hover:bg-accent hover:text-accent-foreground flex items-center\",\n                    isDropdownActive(suggestionsDropdownItems.map(item => item.href)) && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Wand2 className=\"mr-2 h-4 w-4 opacity-80\" />\n                  Sugerencias\n                  <ChevronDown className=\"ml-1 h-4 w-4 opacity-70\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                {suggestionsDropdownItems.map((item) => (\n                  <DropdownMenuItem key={item.label} asChild>\n                    <Link href={item.href} passHref className={cn(isLinkActive(item.href) && \"bg-accent/50\")}>\n                      <item.icon className=\"mr-2 h-4 w-4 opacity-80\" />\n                      {item.label}\n                    </Link>\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"px-3 py-2 rounded-md text-sm font-medium text-foreground hover:bg-accent hover:text-accent-foreground flex items-center\",\n                     isDropdownActive(moreSettingsDropdownItems.map(item => item.href)) && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <SlidersHorizontal className=\"mr-2 h-4 w-4 opacity-80\" />\n                  Más Ajustes\n                  <ChevronDown className=\"ml-1 h-4 w-4 opacity-70\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                {moreSettingsDropdownItems.map((item) => (\n                  <DropdownMenuItem key={item.label} asChild>\n                    <Link href={item.href} passHref className={cn(isLinkActive(item.href) && \"bg-accent/50\")}>\n                      <item.icon className=\"mr-2 h-4 w-4 opacity-80\" />\n                      {item.label}\n                    </Link>\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <div className=\"md:hidden\">\n              <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" aria-label=\"Abrir menú principal\">\n                    <Menu className=\"h-6 w-6\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"left\" className=\"w-72 sm:w-80 bg-card p-0 flex flex-col\">\n                  <SheetHeader className=\"p-4 border-b border-border flex-row justify-between items-center\">\n                     <SheetTitle asChild>\n                       <Link href=\"/\" onClick={() => setIsMobileMenuOpen(false)} aria-label=\"EstilosIA Home\">\n                          <Logo className=\"h-7 w-auto\" />\n                       </Link>\n                     </SheetTitle>\n                    <SheetClose asChild>\n                      <Button variant=\"ghost\" size=\"icon\" aria-label=\"Cerrar menú\">\n                        <X className=\"h-6 w-6\" />\n                      </Button>\n                    </SheetClose>\n                  </SheetHeader>\n                  <div className=\"flex-grow py-4 px-2 space-y-1 overflow-y-auto\">\n                    {allMobileNavLinks.map((link) => ( \n                      <SheetClose asChild key={link.label}>\n                        <Link\n                          href={link.href}\n                          passHref\n                          className={cn(\n                            'flex items-center px-3 py-3 rounded-md text-base font-medium text-foreground hover:bg-accent hover:text-accent-foreground transition-colors group',\n                            isLinkActive(link.href) && \"bg-accent text-accent-foreground\"\n                          )}\n                          onClick={() => setIsMobileMenuOpen(false)}\n                        >\n                          <link.icon className={cn(\"mr-3 h-5 w-5 text-muted-foreground group-hover:text-accent-foreground\", isLinkActive(link.href) && \"text-accent-foreground\")} />\n                          {link.label}\n                        </Link>\n                      </SheetClose>\n                    ))}\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n",
        "radio-group.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
        "chart.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
        "textarea.tsx": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n",
        "Footer.tsx": "\nimport Link from 'next/link';\nimport { Separator } from '@/components/ui/separator';\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-card border-t border-border/70 mt-auto\">\n      <div className=\"container mx-auto px-4 py-8 sm:px-6 lg:px-8\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            © {currentYear} EstilosIA. Gestión de Armario.\n          </div>\n          <Separator className=\"w-1/2 max-w-xs\" />\n          <nav className=\"flex flex-wrap justify-center gap-x-6 gap-y-2 text-sm\">\n            <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              Política de Privacidad\n            </Link>\n            {/* Add more links here if needed, e.g., Terms of Service */}\n          </nav>\n        </div>\n      </div>\n    </footer>\n  );\n}\n",
        "toaster.tsx": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
        "sidebar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
        "table.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, children, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  >\n    {React.Children.toArray(children).filter(child => React.isValidElement(child))}\n  </tr>\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
        "select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
        "form.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
        "tooltip.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
        "switch.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
        "tabs.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
        "alert.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
        "input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
      }
    },
    "icons": {
      "__archivos__": {
        "Logo.tsx": "import type { SVGProps } from 'react';\n\nexport function Logo(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 200 50\"\n      width=\"120\"\n      height=\"30\"\n      aria-label=\"EstilosIA Logo\"\n      {...props}\n    >\n      <defs>\n        <linearGradient id=\"logoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" style={{ stopColor: 'hsl(var(--primary))', stopOpacity: 1 }} />\n          <stop offset=\"100%\" style={{ stopColor: 'hsl(var(--accent))', stopOpacity: 1 }} />\n        </linearGradient>\n      </defs>\n      <text\n        x=\"10\"\n        y=\"35\"\n        fontFamily=\"var(--font-geist-sans), Arial, sans-serif\"\n        fontSize=\"30\"\n        fontWeight=\"bold\"\n        fill=\"url(#logoGradient)\"\n      >\n        EstilosIA\n      </text>\n    </svg>\n  );\n}\n"
      }
    },
    "looks": {
      "__archivos__": {
        "LookForm.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport type { Look, LookFormData, Prenda } from '@/types';\nimport { styleOptions } from '@/components/StyleSelection';\nimport { MultiSelectCommand, type MultiSelectItem } from '@/components/ui/MultiSelectCommand';\nimport { getPrendasAction } from '@/app/actions';\nimport { Loader2, Image as ImageIcon } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst lookFormSchema = z.object({\n  nombre: z.string().min(2, { message: 'El nombre debe tener al menos 2 caracteres.' }),\n  descripcion: z.string().optional(),\n  estilo: z.string().min(1, { message: 'Por favor selecciona un estilo.' }),\n  imagen_url: z.string().url({ message: 'Debe ser una URL válida.' }).or(z.literal(\"\")).optional(),\n  prenda_ids: z.array(z.number().int().positive()).min(1, { message: 'Debes seleccionar al menos una prenda.' }),\n});\n\ninterface LookFormProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onSubmit: (data: LookFormData, lookId?: number) => Promise<{ data?: Look; error?: string; validationErrors?: z.ZodIssue[] }>;\n  initialData?: Look | null;\n  availablePrendas: Prenda[];\n}\n\nexport function LookForm({ isOpen, onOpenChange, onSubmit, initialData, availablePrendas }: LookFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  \n  const prendaOptions: MultiSelectItem[] = React.useMemo(() => \n    availablePrendas.map(p => ({ value: p.id.toString(), label: p.nombre }))\n  , [availablePrendas]);\n\n  const form = useForm<LookFormData>({\n    resolver: zodResolver(lookFormSchema),\n    defaultValues: {\n      nombre: '',\n      descripcion: '',\n      estilo: '',\n      imagen_url: '',\n      prenda_ids: [],\n    },\n  });\n\n  React.useEffect(() => {\n    if (initialData) {\n      form.reset({\n        nombre: initialData.nombre,\n        descripcion: initialData.descripcion || '',\n        estilo: initialData.estilo,\n        imagen_url: initialData.imagen_url || '',\n        prenda_ids: initialData.prendas.map(p => p.id),\n      });\n    } else {\n      form.reset({ // Reset to default empty values for new form\n        nombre: '',\n        descripcion: '',\n        estilo: '',\n        imagen_url: '',\n        prenda_ids: [],\n      });\n    }\n  }, [initialData, form, isOpen]); // isOpen ensures reset when dialog opens\n\n  const handleFormSubmit = async (data: LookFormData) => {\n    setIsSubmitting(true);\n    const result = await onSubmit(data, initialData?.id);\n    setIsSubmitting(false);\n\n    if (result.error) {\n      if (result.validationErrors) {\n        result.validationErrors.forEach(err => {\n          // @ts-ignore\n          form.setError(err.path[0] as keyof LookFormData, { message: err.message });\n        });\n      }\n      toast({\n        title: 'Error',\n        description: result.error || 'Por favor corrige los errores en el formulario.',\n        variant: 'destructive',\n      });\n    } else {\n      toast({\n        title: 'Éxito',\n        description: `Look ${initialData ? 'actualizado' : 'creado'} correctamente.`,\n      });\n      onOpenChange(false); // Close dialog on success\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!isSubmitting) onOpenChange(open); }}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>{initialData ? 'Editar Look' : 'Crear Nuevo Look'}</DialogTitle>\n          <DialogDescription>\n            {initialData ? 'Modifica los detalles de tu look.' : 'Combina tus prendas para crear un nuevo look.'}\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)}>\n          <ScrollArea className=\"max-h-[70vh] p-1 pr-3\"> {/* Added padding for scrollbar */}\n            <div className=\"grid gap-5 py-4\">\n              <div>\n                <Label htmlFor=\"nombre\" className=\"font-medium\">Nombre del Look</Label>\n                <Input id=\"nombre\" {...form.register('nombre')} className=\"mt-1\" placeholder=\"Ej: Casual de Fin de Semana\"/>\n                {form.formState.errors.nombre && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.nombre.message}</p>}\n              </div>\n\n              <div>\n                <Label htmlFor=\"descripcion\" className=\"font-medium\">Descripción (Opcional)</Label>\n                <Textarea id=\"descripcion\" {...form.register('descripcion')} className=\"mt-1\" placeholder=\"Perfecto para...\"/>\n                {form.formState.errors.descripcion && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.descripcion.message}</p>}\n              </div>\n\n              <div>\n                <Label htmlFor=\"estilo\" className=\"font-medium\">Estilo</Label>\n                <Controller\n                  name=\"estilo\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Select onValueChange={field.onChange} value={field.value} defaultValue={field.value}>\n                      <SelectTrigger id=\"estilo\" className=\"mt-1\">\n                        <SelectValue placeholder=\"Selecciona un estilo\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {styleOptions.map(option => (\n                          <SelectItem key={option.id} value={option.id}>{option.name}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  )}\n                />\n                {form.formState.errors.estilo && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.estilo.message}</p>}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"prendas\" className=\"font-medium\">Prendas Incluidas</Label>\n                 <Controller\n                  name=\"prenda_ids\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <MultiSelectCommand\n                      options={prendaOptions}\n                      selectedValues={field.value.map(String)} // MultiSelectCommand expects string values\n                      onSelectedValuesChange={(newValues) => field.onChange(newValues.map(Number))} // Convert back to numbers\n                      placeholder=\"Selecciona prendas...\"\n                      searchPlaceholder=\"Buscar prendas...\"\n                      emptyResultText=\"No se encontraron prendas.\"\n                      className=\"mt-1\"\n                    />\n                  )}\n                />\n                {form.formState.errors.prenda_ids && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.prenda_ids.message}</p>}\n              </div>\n\n              <div>\n                <Label htmlFor=\"imagen_url\" className=\"font-medium\">URL de Imagen (Opcional)</Label>\n                 <div className=\"flex items-center gap-2 mt-1\">\n                    <ImageIcon className=\"h-5 w-5 text-muted-foreground\" />\n                    <Input id=\"imagen_url\" {...form.register('imagen_url')} placeholder=\"https://ejemplo.com/imagen.png\"/>\n                 </div>\n                {form.formState.errors.imagen_url && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.imagen_url.message}</p>}\n              </div>\n            </div>\n          </ScrollArea>\n          <DialogFooter className=\"pt-6\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\" disabled={isSubmitting}>Cancelar</Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {initialData ? 'Guardar Cambios' : 'Crear Look'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
        "LookCard.tsx": "\n'use client';\n\nimport * as React from 'react';\nimport Image from 'next/image';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Edit, Trash2, Shirt, CalendarDays } from 'lucide-react';\nimport type { Look } from '@/types';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\ninterface LookCardProps {\n  look: Look;\n  onEdit: (look: Look) => void;\n  onDelete: (lookId: number) => void;\n}\n\nexport function LookCard({ look, onEdit, onDelete }: LookCardProps) {\n  return (\n    <Card className=\"flex flex-col overflow-hidden shadow-lg rounded-xl hover:shadow-2xl transition-shadow duration-300 h-full bg-card\">\n      <CardHeader className=\"p-0 relative\">\n        <div className=\"aspect-[4/3] w-full bg-muted overflow-hidden relative\">\n          <Image\n            src={look.imagen_url || `https://placehold.co/400x300.png?text=${encodeURIComponent(look.nombre.substring(0,3))}`}\n            alt={look.nombre}\n            fill={true}\n            sizes=\"(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw\"\n            className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-ai-hint={`look ${look.estilo || ''}`.trim()}\n          />\n        </div>\n         {look.estilo && <Badge variant=\"secondary\" className=\"absolute top-3 right-3 capitalize\">{look.estilo}</Badge>}\n      </CardHeader>\n      <CardContent className=\"p-4 flex-grow\">\n        <CardTitle className=\"text-lg font-semibold truncate mb-1\" title={look.nombre}>\n          {look.nombre}\n        </CardTitle>\n        {look.descripcion && (\n          <CardDescription className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n            {look.descripcion}\n          </CardDescription>\n        )}\n        <div className=\"space-y-1.5 text-xs text-muted-foreground mt-2\">\n          {look.prendas && look.prendas.length > 0 && (\n            <div className=\"flex items-center gap-1.5\">\n              <Shirt className=\"h-3.5 w-3.5\" />\n              <span>\n                {look.prendas.slice(0, 3).map(p => p.nombre).join(', ')}\n                {look.prendas.length > 3 ? ` y ${look.prendas.length - 3} más...` : ''}\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-1.5\">\n            <CalendarDays className=\"h-3.5 w-3.5\" />\n            <span>Creado: {format(new Date(look.created_at), \"dd MMM yyyy\", { locale: es })}</span>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-3 border-t mt-auto\">\n        <div className=\"flex w-full justify-end gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(look)} className=\"flex-1\">\n            <Edit className=\"mr-1.5 h-4 w-4\" /> Editar\n          </Button>\n          <Button variant=\"destructive\" size=\"sm\" onClick={() => onDelete(look.id)} className=\"flex-1\">\n            <Trash2 className=\"mr-1.5 h-4 w-4\" /> Eliminar\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n"
      }
    },
    "statistics": {
      "__archivos__": {
        "TimeActivityChart.tsx": "\n// src/components/statistics/TimeActivityChart.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Bar, BarChart, Line, LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport type { TimeActivityStat } from '@/types';\nimport { ChartContainer, ChartTooltipContent } from '@/components/ui/chart';\n\ninterface TimeActivityChartProps {\n  data: TimeActivityStat[];\n  isLoading?: boolean;\n  error?: string | null;\n  chartType?: 'line' | 'bar';\n}\n\nexport function TimeActivityChart({ data, isLoading, error, chartType = 'bar' }: TimeActivityChartProps) {\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-64 text-muted-foreground\">Cargando actividad en el tiempo...</div>;\n  }\n  if (error) {\n    return <div className=\"flex items-center justify-center h-64 text-destructive\">{error}</div>;\n  }\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n        No hay suficientes datos de actividad para mostrar el gráfico.\n      </div>\n    );\n  }\n  \n  const chartConfig = {\n    count: {\n      label: \"Asignaciones\",\n      color: \"hsl(var(--chart-1))\",\n    },\n  };\n\n  const ChartComponent = chartType === 'line' ? LineChart : BarChart;\n  const DataComponent = chartType === 'line' ? Line : Bar;\n\n\n  return (\n    <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n            <ChartComponent\n                data={data}\n                margin={{\n                    top: 5,\n                    right: 20,\n                    left: 0,\n                    bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                <XAxis\n                    dataKey=\"date\"\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={12}\n                    tickLine={false}\n                    axisLine={false}\n                />\n                <YAxis\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={12}\n                    tickLine={false}\n                    axisLine={false}\n                    allowDecimals={false}\n                />\n                <Tooltip\n                    cursor={{ fill: 'hsl(var(--muted))' }}\n                    content={<ChartTooltipContent hideLabel />}\n                />\n                <Legend verticalAlign=\"top\" height={36} />\n                 <DataComponent\n                    dataKey=\"count\"\n                    type=\"monotone\"\n                    name=\"Asignaciones\"\n                    stroke=\"hsl(var(--chart-1))\"\n                    fill=\"hsl(var(--chart-1))\"\n                    strokeWidth={chartType === 'line' ? 2 : undefined}\n                    dot={chartType === 'line' ? { r: 4, fill: 'hsl(var(--chart-1))', stroke: 'hsl(var(--background))' } : undefined}\n                    radius={chartType === 'bar' ? [4, 4, 0, 0] : undefined}\n                />\n            </ChartComponent>\n        </ResponsiveContainer>\n    </ChartContainer>\n  );\n}\n",
        "StyleUsageChart.tsx": "\n// src/components/statistics/StyleUsageChart.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport type { StyleUsageStat } from '@/types';\nimport { ChartContainer, ChartTooltipContent } from '@/components/ui/chart'; // Using ShadCN's Chart components\n\ninterface StyleUsageChartProps {\n  data: StyleUsageStat[];\n  isLoading?: boolean;\n  error?: string | null;\n}\n\nexport function StyleUsageChart({ data, isLoading, error }: StyleUsageChartProps) {\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-64 text-muted-foreground\">Cargando datos de estilos...</div>;\n  }\n  if (error) {\n    return <div className=\"flex items-center justify-center h-64 text-destructive\">{error}</div>;\n  }\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n        No hay suficientes datos de uso de estilos para mostrar el gráfico.\n      </div>\n    );\n  }\n\n  const chartConfig = data.reduce((acc, item) => {\n    acc[item.name] = { label: item.name, color: item.fill || 'hsl(var(--chart-1))' };\n    return acc;\n  }, {} as Record<string, { label: string; color: string }>);\n\n\n  return (\n    <ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart \n          data={data} \n          layout=\"vertical\"\n          margin={{ top: 5, right: 20, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\n          <XAxis type=\"number\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} tickLine={false} axisLine={false} />\n          <YAxis \n            dataKey=\"name\" \n            type=\"category\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12} \n            tickLine={false} \n            axisLine={false}\n            width={80}\n          />\n          <Tooltip\n            cursor={{ fill: 'hsl(var(--muted))' }}\n            content={<ChartTooltipContent hideLabel />}\n          />\n          <Legend verticalAlign=\"top\" height={36} />\n          <Bar dataKey=\"value\" name=\"Prendas\" radius={[0, 4, 4, 0]} />\n        </BarChart>\n      </ResponsiveContainer>\n    </ChartContainer>\n  );\n}\n",
        "IntelligentInsightCard.tsx": "\n// src/components/statistics/IntelligentInsightCard.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Lightbulb, Sparkles, TrendingUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport type { IntelligentInsightData } from '@/types';\n\ninterface IntelligentInsightCardProps {\n  data?: IntelligentInsightData | null;\n  isLoading?: boolean;\n  error?: string | null;\n}\n\nexport function IntelligentInsightCard({ data, isLoading, error }: IntelligentInsightCardProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-lg rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <Lightbulb className=\"mr-2 h-5 w-5 text-primary\" />\n            Análisis Inteligente\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-24 flex items-center justify-center\">\n          <p className=\"text-muted-foreground\">Analizando tus datos...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"shadow-lg rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <Lightbulb className=\"mr-2 h-5 w-5 text-primary\" />\n            Análisis Inteligente\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-24 flex items-center justify-center\">\n          <p className=\"text-destructive\">{error}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  let insightMessage = \"¡Sigue explorando tu estilo y registrando tus outfits!\";\n  let callToAction: React.ReactNode = null;\n\n  if (data?.dominantStyle) {\n    insightMessage = `Notamos que tu estilo predominante es '${data.dominantStyle.name}' (aproximadamente ${data.dominantStyle.percentage}% de tus prendas). ¡Es genial que tengas un estilo definido!`;\n    callToAction = (\n      <Link href=\"/sugerenciaia\" passHref legacyBehavior>\n        <Button variant=\"link\" className=\"mt-2 p-0 h-auto text-primary\">\n          ¿Quizás explorar algunas sugerencias de otros estilos? <Sparkles className=\"ml-1 h-4 w-4\" />\n        </Button>\n      </Link>\n    );\n  } else if (data && !data.dominantStyle) {\n     insightMessage = \"¡Tienes un armario muy variado! Tu estilo es diverso y eso te da mucha flexibilidad.\";\n     callToAction = (\n      <Link href=\"/looks\" passHref legacyBehavior>\n        <Button variant=\"link\" className=\"mt-2 p-0 h-auto text-primary\">\n          Crea nuevos looks para aprovechar tu versatilidad <TrendingUp className=\"ml-1 h-4 w-4\" />\n        </Button>\n      </Link>\n    );\n  }\n\n\n  return (\n    <Card className=\"shadow-lg rounded-xl bg-accent/30 border-accent\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-lg\">\n          <Lightbulb className=\"mr-2 h-5 w-5 text-primary\" />\n          Análisis Inteligente\n        </CardTitle>\n        <CardDescription>Pequeñas ideas basadas en tu armario.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-accent-foreground/90\">{insightMessage}</p>\n        {callToAction}\n      </CardContent>\n    </Card>\n  );\n}\n"
      }
    },
    "dashboard": {
      "__archivos__": {
        "ColorDistributionChart.tsx": "\n// src/components/dashboard/ColorDistributionChart.tsx\n'use client';\n\nimport * as React from 'react';\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport type { ColorFrequency } from '@/types';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface ColorDistributionChartProps {\n  data: ColorFrequency[];\n}\n\nexport function ColorDistributionChart({ data }: ColorDistributionChartProps) {\n  if (!data || data.length === 0 || data.every(d => d.count === 0)) {\n    return (\n      <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n        No hay datos de color para mostrar.\n      </div>\n    );\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          dataKey=\"count\"\n          nameKey=\"color\"\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.fill} />\n          ))}\n        </Pie>\n        <Tooltip\n          formatter={(value: number, name: string) => [`${value} prendas`, name]}\n          wrapperStyle={{ backgroundColor: \"hsl(var(--background))\", border: \"1px solid hsl(var(--border))\", borderRadius: \"var(--radius)\", padding: \"0.5rem\" }}\n          labelStyle={{ color: \"hsl(var(--foreground))\" }}\n          itemStyle={{ color: \"hsl(var(--foreground))\" }}\n        />\n        <Legend />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n",
        "StatsCard.tsx": "\n// src/components/dashboard/StatsCard.tsx\nimport * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport type { LucideIcon } from 'lucide-react';\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  description?: string;\n  className?: string;\n}\n\nexport function StatsCard({ title, value, icon: Icon, description, className }: StatsCardProps) {\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-5 w-5 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      </CardContent>\n    </Card>\n  );\n}\n",
        "OptimizedOutfitSuggester.tsx": "\n// src/components/dashboard/OptimizedOutfitSuggester.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Loader2, AlertTriangle, Sparkles } from 'lucide-react';\nimport type { SuggestedOutfit, OptimizedOutfitParams } from '@/types';\nimport { styleOptions } from '@/components/StyleSelection'; // Using styleOptions for Occasion\nimport { generateOptimizedOutfitSuggestionAction } from '@/app/actions';\nimport { OutfitSuggestion } from '@/components/OutfitSuggestion';\nimport { useToast } from '@/hooks/use-toast';\nimport { OutfitExplanation } from '@/components/OutfitExplanation';\n\nexport function OptimizedOutfitSuggester() {\n  const [temperature, setTemperature] = React.useState<number | undefined>(20);\n  const [ocasion, setOcasion] = React.useState<string>(styleOptions[0].id); // Default to the first style as occasion\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [error, setError] = React.useState<string | null>(null);\n  const [suggestedOutfit, setSuggestedOutfit] = React.useState<SuggestedOutfit | null>(null);\n  const { toast } = useToast();\n\n  const handleGetSuggestion = async () => {\n    if (temperature === undefined) {\n      toast({ title: \"Error de Validación\", description: \"Por favor, ingresa una temperatura.\", variant: \"destructive\" });\n      return;\n    }\n    if (!ocasion) {\n      toast({ title: \"Error de Validación\", description: \"Por favor, selecciona una ocasión.\", variant: \"destructive\" });\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setSuggestedOutfit(null);\n\n    const params: OptimizedOutfitParams = { temperature, ocasion };\n    const result = await generateOptimizedOutfitSuggestionAction(params);\n\n    if (result.error) {\n      setError(result.error);\n      toast({ title: \"Error al Generar Sugerencia\", description: result.error, variant: \"destructive\" });\n    } else {\n      setSuggestedOutfit(result);\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Card className=\"shadow-lg rounded-xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold\">\n          <Sparkles className=\"mr-3 h-6 w-6 text-primary\" />\n          Sugerencia de Atuendo Optimizado\n        </CardTitle>\n        <CardDescription>\n          Genera un conjunto completo de tu armario basado en la temperatura y ocasión, con armonía de colores.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"opt-temperature\">Temperatura Actual (°C)</Label>\n            <Input\n              id=\"opt-temperature\"\n              type=\"number\"\n              value={temperature === undefined ? '' : temperature}\n              onChange={(e) => setTemperature(e.target.value === '' ? undefined : parseInt(e.target.value, 10))}\n              placeholder=\"Ej: 20\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"opt-ocasion\">Ocasión</Label>\n            <Select value={ocasion} onValueChange={(value) => setOcasion(value)}>\n              <SelectTrigger id=\"opt-ocasion\">\n                <SelectValue placeholder=\"Selecciona una ocasión\" />\n              </SelectTrigger>\n              <SelectContent>\n                {styleOptions.map(opt => ( // Using styleOptions for Occasion\n                  <SelectItem key={opt.id} value={opt.id}>{opt.name}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <Button\n          onClick={handleGetSuggestion}\n          disabled={isLoading || temperature === undefined || !ocasion}\n          className=\"w-full py-3 text-lg font-semibold\"\n          size=\"lg\"\n        >\n          {isLoading ? (\n            <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n          ) : (\n            'Obtener Sugerencia Optimizada'\n          )}\n        </Button>\n\n        {error && (\n          <div className=\"mt-4 p-3 bg-destructive/10 border border-destructive/30 text-destructive rounded-md flex items-center gap-2 text-sm\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            <p>{error}</p>\n          </div>\n        )}\n\n        {suggestedOutfit && (\n          <div className=\"mt-6 space-y-4\">\n            <h3 className=\"text-lg font-semibold mb-2 text-center text-foreground\">Tu Atuendo Sugerido:</h3>\n            <OutfitSuggestion suggestion={suggestedOutfit} />\n            {suggestedOutfit.explanation && (\n              <OutfitExplanation explanation={suggestedOutfit.explanation} />\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
        "nuevoprompts.tsx": "\n// src/components/dashboard/nuevoprompts.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { ScrollText, Sparkles } from 'lucide-react';\nimport type { SuggestedOutfit } from '@/types';\nimport { OutfitSuggestion } from '@/components/OutfitSuggestion'; // Import OutfitSuggestion\n\nconst promptText = `\nEres un asistente experto en moda que ayuda a crear outfits personalizados. Tu tarea es sugerir un conjunto completo con una prenda de cada categoría principal (Cuerpo, Piernas, Zapatos y Abrigos), asegurando que la combinación sea adecuada para la temperatura actual y la estación del año.\n\nCOMBINACIÓN DE COLORES:\n- Asegúrate que los colores combinen siguiendo reglas básicas de armonía cromática\n- Evita más de 3 colores diferentes en el outfit completo\n- Colores neutros (Negro, Blanco, Gris, Beige) combinan con todo\n- Combina colores complementarios (Rojo con Verde, Azul con Naranja, Amarillo con Violeta)\n- Evita combinaciones difíciles como Rojo con Rosa fuerte o Marrón con Negro\n\nIMPORTANTE: Si la temperatura es superior a 22°C, el abrigo puede ser \"ninguno\" excepto si es para una ocasión formal o de noche. Los zapatos deben ser acordes al nivel de formalidad del resto del outfit.\n`;\n\ninterface NuevoPromptsProps {\n  suggestionForDisplay?: SuggestedOutfit | null;\n}\n\nexport function NuevoPrompts({ suggestionForDisplay }: NuevoPromptsProps) {\n  return (\n    <div className=\"space-y-8\">\n      <Card className=\"shadow-lg rounded-xl col-span-1 md:col-span-2 lg:col-span-4\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <ScrollText className=\"mr-2 h-5 w-5 text-primary\" />\n            Prompt Ejemplo para IA de Moda\n          </CardTitle>\n          <CardDescription>\n            Un ejemplo de prompt detallado para guiar a una IA en la creación de outfits.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"whitespace-pre-wrap text-sm text-muted-foreground bg-muted p-4 rounded-md leading-relaxed\">\n            {promptText.trim()}\n          </pre>\n        </CardContent>\n      </Card>\n\n      <Card className=\"shadow-lg rounded-xl col-span-1 md:col-span-2 lg:col-span-4\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Sparkles className=\"mr-2 h-5 w-5 text-primary\" />\n            Ejemplo de Sugerencia Generada (desde tu armario)\n          </CardTitle>\n          <CardDescription>\n            Esta es una sugerencia real basada en las prendas de tu armario y un escenario aleatorio.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {suggestionForDisplay ? (\n            <OutfitSuggestion suggestion={suggestionForDisplay} />\n          ) : (\n            <p className=\"text-muted-foreground text-center py-8\">\n              No hay sugerencia disponible para mostrar en este momento o tu armario está vacío.\n            </p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
        "PromtOptimizado.tsx": "\n// src/components/dashboard/PromtOptimizado.tsx\n'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { ScrollText } from 'lucide-react';\n\nconst promptText = `\nEres un asistente experto en moda que ayuda a crear outfits personalizados. Tu tarea es sugerir un conjunto completo con una prenda de cada categoría principal (Cuerpo, Piernas, Zapatos y Abrigos), asegurando que la combinación sea adecuada para la temperatura actual y la estación del año.\n\nCOMBINACIÓN DE COLORES:\n- Asegúrate que los colores combinen siguiendo reglas básicas de armonía cromática\n- Evita más de 3 colores diferentes en el outfit completo\n- Colores neutros (Negro, Blanco, Gris, Beige) combinan con todo\n- Combina colores complementarios (Rojo con Verde, Azul con Naranja, Amarillo con Violeta)\n- Evita combinaciones difíciles como Rojo con Rosa fuerte o Marrón con Negro\n\nIMPORTANTE: Si la temperatura es superior a 22°C, el abrigo puede ser \"ninguno\" excepto si es para una ocasión formal o de noche. Los zapatos deben ser acordes al nivel de formalidad del resto del outfit.\n`;\n\nexport function PromtOptimizado() {\n  return (\n    <Card className=\"shadow-lg rounded-xl col-span-1 md:col-span-2 lg:col-span-4\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold\">\n          <ScrollText className=\"mr-3 h-6 w-6 text-primary\" />\n          Prompt Ejemplo para IA de Moda\n        </CardTitle>\n        <CardDescription className=\"text-sm\">\n          Un ejemplo de prompt detallado para guiar a una IA en la creación de outfits.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <pre className=\"whitespace-pre-wrap text-sm text-foreground bg-muted/50 p-4 rounded-md leading-relaxed shadow-inner\">\n          {promptText.trim()}\n        </pre>\n      </CardContent>\n    </Card>\n  );\n}\n"
      }
    }
  },
  "types": {
    "__archivos__": {
      "index.ts": "\nimport type { LucideIcon } from 'lucide-react';\n\nexport const PRENDA_COLORS = [\n  'Rojo', 'Azul', 'Verde', 'Amarillo', 'Negro', 'Blanco', 'Gris', 'Marrón',\n  'Naranja', 'Violeta', 'Rosa', 'Beige', 'Celeste', 'Dorado', 'Plateado',\n  'Multicolor', 'Estampado', 'Otro', 'Cian', 'Magenta', 'Lima', 'Oliva',\n  'Turquesa', 'Índigo', 'Salmón', 'Coral', 'Lavanda', 'Menta', 'Caqui',\n  'Borgoña', 'Fucsia', 'Cuadrille'\n] as const;\n\nexport type PrendaColor = typeof PRENDA_COLORS[number];\n\n\nexport interface StyleOption {\n  id: string;\n  name: string;\n  icon: LucideIcon;\n  description: string;\n}\n\nexport interface OutfitItem {\n  id: string;\n  name: string;\n  imageUrl: string;\n  category: string;\n  aiHint: string;\n  color?: PrendaColor | string;\n}\n\nexport interface SuggestedOutfit {\n  items: OutfitItem[];\n  explanation: string;\n  previewImageUrl?: string;\n}\n\n// --- Closet Management Types ---\nexport const TIPO_PRENDA_ENUM_VALUES = ['Cuerpo', 'Piernas', 'Zapatos', 'Abrigos', 'Accesorios'] as const;\nexport type TipoPrenda = typeof TIPO_PRENDA_ENUM_VALUES[number];\n\nexport interface Prenda {\n  id: number;\n  created_at: string;\n  nombre: string;\n  tipo: TipoPrenda;\n  color: PrendaColor;\n  modelo: string;\n  temporada: string;\n  fechacompra: string; // YYYY-MM-DD\n  imagen_url: string;\n  temperatura_min?: number | null;\n  temperatura_max?: number | null;\n  estilo: string;\n  is_archived: boolean;\n}\n\nexport const SEASONS = ['Verano', 'Invierno', 'Otoño', 'Primavera', 'Todo el Año'] as const;\nexport type TemporadaPrenda = typeof SEASONS[number];\n\nexport type EstiloPrenda = StyleOption['id'];\n\n\n// --- Looks Page Types ---\nexport interface Look {\n  id: number;\n  created_at: string;\n  nombre: string;\n  descripcion?: string | null;\n  estilo: string;\n  imagen_url?: string | null;\n  prendas: Prenda[];\n}\n\nexport interface LookFormData {\n  nombre: string;\n  descripcion?: string;\n  estilo: string;\n  imagen_url?: string;\n  prenda_ids: number[];\n}\n\n// --- Calendar Page Types ---\nexport interface CalendarAssignmentBase {\n  id: number;\n  fecha: string; // Date in YYYY-MM-DD format\n  tipo_asignacion: 'prenda' | 'look';\n  nota?: string | null;\n  created_at: string;\n}\n\nexport interface PrendaCalendarAssignment extends CalendarAssignmentBase {\n  tipo_asignacion: 'prenda';\n  prenda_id: number;\n  prenda?: Prenda;\n  look_id?: null;\n  look?: null;\n}\n\nexport interface LookCalendarAssignment extends CalendarAssignmentBase {\n  tipo_asignacion: 'look';\n  look_id: number;\n  look?: Look;\n  prenda_id?: null;\n  prenda?: null;\n}\n\nexport type CalendarAssignment = PrendaCalendarAssignment | LookCalendarAssignment;\n\nexport interface CalendarAssignmentFormData {\n  fecha: string; // YYYY-MM-DD\n  tipo_asignacion: 'prenda' | 'look';\n  referencia_id: number; // prenda_id or look_id\n  nota?: string;\n}\n\n\n// --- Wishlist Page Types ---\nexport interface WishlistItem {\n  id: string;\n  name: string;\n  description?: string;\n  imageUrl?: string;\n  estimatedPrice?: number;\n  storeUrl?: string;\n  status: 'pending' | 'purchased' | 'discarded';\n  added_at: string;\n}\n\nexport type WishlistFormData = Omit<WishlistItem, 'id' | 'status' | 'added_at'>;\n\n// --- Dashboard & Statistics Types ---\nexport interface DashboardStats { // Original, might be deprecated by StatisticsSummary for / page\n  totalPrendas: number;\n  totalLooks: number;\n}\n\nexport interface ColorFrequency {\n  color: string;\n  count: number;\n  fill: string;\n}\n\nexport interface StyleUsageStat {\n  name: string; // Style name\n  value: number; // Count of prendas\n  fill?: string; // Optional fill color for charts\n}\n\nexport interface TimeActivityStat {\n  date: string; // e.g., \"Ene '24\", \"Semana 1\"\n  count: number; // e.g., looks used, prendas assigned\n  fill?: string;\n}\n\nexport interface StatisticsSummary { // Used by /statistics and new / page\n  totalPrendas: number;\n  totalLooks: number;\n  prendasPorEstiloCount: number;\n  looksUsadosEsteMes: number;\n}\n\nexport interface IntelligentInsightData {\n  dominantStyle?: { name: string; percentage: number };\n}\n\n// --- SugerenciaIA Page (formerly HomePage) Types ---\nexport interface HistoricalSuggestion {\n  id: string;\n  timestamp: number;\n  temperature: [number, number];\n  selectedStyle: string;\n  useClosetInfo: boolean;\n  suggestion: SuggestedOutfit;\n}\n\n// --- Optimized Outfit Suggester Types ---\nexport interface OptimizedOutfitParams {\n  temperature: number;\n  ocasion: string; // Changed from season: TemporadaPrenda\n}\n\nexport const NEUTRAL_COLORS: PrendaColor[] = ['Negro', 'Blanco', 'Gris', 'Beige'];\nexport const DIFFICULT_COLOR_PAIRS: [PrendaColor, PrendaColor][] = [\n  ['Marrón', 'Negro'],\n  ['Rojo', 'Rosa'],\n];\n"
    }
  },
  "lib": {
    "__archivos__": {
      "utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "supabaseClient.ts": "import { createClient } from '@supabase/supabase-js';\n\n// IMPORTANT: Replace with your actual Supabase URL and Anon Key\n// It's recommended to store these in environment variables\n// Create a .env.local file in the root of your project with:\n// NEXT_PUBLIC_SUPABASE_URL=your_supabase_url\n// NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn(\n    'Supabase URL or Anon Key is missing. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables.'\n  );\n}\n\nexport const supabase = supabaseUrl && supabaseAnonKey ? createClient(supabaseUrl, supabaseAnonKey) : null;\n\n// Example of how to use it (optional, for demonstration):\n// async function getCountries() {\n//   if (!supabase) return [];\n//   const { data, error } = await supabase.from('countries').select();\n//   if (error) {\n//     console.error('Error fetching countries:', error);\n//     return [];\n//   }\n//   return data;\n// }\n",
      "dataMappers.ts": "\n// src/lib/dataMappers.ts\n// 'use server' directive removed from here\n\nimport type { Prenda } from '@/types';\nimport { format, parseISO, isValid } from 'date-fns';\n\nexport function mapDbPrendaToClient(dbRecord: any): Prenda {\n  let formattedFechacompra = '';\n  if (dbRecord.fechacompra) {\n    try {\n      // Check if it's already a 'YYYY-MM-DD' string or needs parsing from a Date object or full ISO string\n      let dateObj: Date;\n      if (typeof dbRecord.fechacompra === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(dbRecord.fechacompra)) {\n        // Already in YYYY-MM-DD format, may need to adjust for timezone if parsing\n        dateObj = parseISO(dbRecord.fechacompra + 'T00:00:00'); // Assume UTC if just date\n      } else if (typeof dbRecord.fechacompra === 'string') {\n        dateObj = parseISO(dbRecord.fechacompra);\n      } else if (dbRecord.fechacompra instanceof Date) {\n        dateObj = dbRecord.fechacompra;\n      } else {\n        // If it's null or undefined, or an unexpected type, let it default to empty string later\n        // console.warn(`Unexpected type for fechacompra: ${typeof dbRecord.fechacompra}, value: ${dbRecord.fechacompra}`);\n        throw new Error('Invalid date type for fechacompra');\n      }\n      \n      if (isValid(dateObj)) {\n        formattedFechacompra = format(dateObj, 'yyyy-MM-dd');\n      } else {\n        // console.warn(`Invalid date for fechacompra (after parsing attempt): ${dbRecord.fechacompra}. Setting to empty string.`);\n      }\n    } catch (e) {\n      // console.warn(`Error parsing date for fechacompra: ${dbRecord.fechacompra}`, e);\n      // formattedFechacompra remains ''\n    }\n  }\n\n  return {\n    id: Number(dbRecord.id),\n    created_at: String(dbRecord.created_at),\n    nombre: dbRecord.nombre || '',\n    tipo: dbRecord.tipo || '',\n    color: dbRecord.color || '',\n    modelo: dbRecord.modelo || '', \n    temporada: dbRecord.temporada || '',\n    fechacompra: formattedFechacompra,\n    imagen_url: dbRecord.imagen_url || '',\n    temperatura_min: dbRecord.temperatura_min,\n    temperatura_max: dbRecord.temperatura_max,\n    estilo: dbRecord.estilo || '',\n    is_archived: dbRecord.is_archived || false,\n  };\n}\n"
    }
  },
  "ai": {
    "__archivos__": {
      "genkit.ts": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n",
      "dev.ts": "import { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/generate-outfit-explanation.ts';",
      "ai-instance.ts": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GEMINI_API_KEY\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});"
    },
    "flows": {
      "__archivos__": {
        "generate-outfit-explanation.ts": "\n'use server';\n\n/**\n * @fileOverview Generates an explanation for a suggested outfit based on temperature, style, occasion, and user's closet.\n *\n * - generateOutfitExplanation - A function that generates the outfit explanation.\n * - GenerateOutfitExplanationInput - The input type for the generateOutfitExplanation function.\n * - GenerateOutfitExplanationOutput - The return type for the generateOutfitExplanation function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { supabase } from '@/lib/supabaseClient';\nimport { mapDbPrendaToClient } from '@/lib/dataMappers';\nimport type { Prenda } from '@/types';\n\nconst GenerateOutfitExplanationInputSchema = z.object({\n  temperatureRange: z.string().describe('The temperature range for which the outfit is suggested (e.g., \"15-25 degrees Celsius\").'),\n  selectedStyle: z.string().describe('The user selected style (e.g., \"Casual\", \"Formal\", \"Bohemian\").'),\n  outfitDescription: z.string().describe('A description of the suggested outfit (e.g., \"Jeans, t-shirt, and sneakers\"). This outfit is already selected from the user\\'s closet.'),\n  userClosetInformationNeeded: z.boolean().describe('Whether information about other items in the user\\'s closet should be considered to enrich the explanation.'),\n  ocasion: z.string().optional().describe('The occasion for which the outfit is suggested (e.g., \"a casual day out\", \"a business meeting\").'),\n  previewImageUrl: z.string().url().optional().describe('An optional URL of an image preview of the suggested outfit.')\n});\nexport type GenerateOutfitExplanationInput = z.infer<typeof GenerateOutfitExplanationInputSchema>;\n\nconst GenerateOutfitExplanationOutputSchema = z.object({\n  explanation: z.string().describe('The explanation for the suggested outfit, considering temperature, style, occasion, and optionally user closet information.'),\n});\nexport type GenerateOutfitExplanationOutput = z.infer<typeof GenerateOutfitExplanationOutputSchema>;\n\n\nconst GetUserClosetInformationToolInputSchema = z.object({\n  style: z.string().describe(\"The style of clothing to filter the closet by.\"),\n  temperatureRange: z.string().describe(\"The current temperature range, e.g., '15-25 degrees Celsius', to help filter relevant items.\"),\n});\n\nconst GetUserClosetInformationToolOutputSchema = z.object({\n  closetSummary: z.string().describe(\"A summary of relevant items in the user's closet for the given style and temperature range. E.g., 'User has several casual tops and jeans suitable for this weather.' or 'No specific complementary items were identified for this exact context, but the user has a diverse wardrobe.'\"),\n});\n\nconst getUserClosetInformation = ai.defineTool(\n  {\n    name: 'getUserClosetInformation',\n    description: \"Retrieves a summary of the user's closet items matching a given style and temperature range, to help personalize outfit explanations. This tool focuses on *other* items in the closet that might complement or show versatility with the *already suggested* outfit.\",\n    inputSchema: GetUserClosetInformationToolInputSchema,\n    outputSchema: GetUserClosetInformationToolOutputSchema,\n  },\n  async (input) => {\n    if (!supabase) {\n      console.error(\"Supabase client is not initialized in getUserClosetInformation tool. Check environment variables.\");\n      return { closetSummary: \"No se pudo acceder a la información del armario debido a un problema de conexión con la base de datos.\" };\n    }\n    try {\n      const { data: dbData, error: dbError } = await supabase\n        .from('prendas')\n        .select('*')\n        .eq('is_archived', false)\n        .eq('estilo', input.style.toLowerCase()); // Filter by style directly in query\n\n      if (dbError) {\n        console.error(\"Supabase error fetching prendas for tool:\", dbError);\n        return { closetSummary: \"No se pudo obtener la información del armario en este momento debido a un error de la base de datos.\" };\n      }\n      \n      if (!dbData || dbData.length === 0) {\n        return { closetSummary: `El armario del usuario no tiene artículos que coincidan con el estilo ${input.style} o están todos archivados.` };\n      }\n\n      const allClientPrendas: Prenda[] = dbData.map(mapDbPrendaToClient);\n      \n      const tempMatch = input.temperatureRange.match(/(-?\\d+)\\s*-\\s*(-?\\d+)/);\n      let minUserTemp: number | null = null;\n      let maxUserTemp: number | null = null;\n      if (tempMatch) {\n        minUserTemp = parseInt(tempMatch[1], 10);\n        maxUserTemp = parseInt(tempMatch[2], 10);\n      } else {\n        console.warn(`Could not parse temperature range: ${input.temperatureRange}`);\n        return { closetSummary: `No se pudo determinar el rango de temperatura para filtrar el armario de estilo ${input.style}.`};\n      }\n\n      const relevantPrendas = allClientPrendas.filter(p => {\n        if (minUserTemp !== null && maxUserTemp !== null && typeof p.temperatura_min === 'number' && typeof p.temperatura_max === 'number') {\n          return p.temperatura_min <= maxUserTemp && p.temperatura_max >= minUserTemp;\n        }\n        return true; \n      });\n\n\n      if (relevantPrendas.length === 0) {\n        return { closetSummary: `No se encontraron artículos específicos en el armario del usuario que coincidan estrechamente con el estilo ${input.style} para el rango de ${input.temperatureRange}, más allá de los artículos ya sugeridos.` };\n      }\n\n      const typeCounts: Record<string, number> = {};\n      relevantPrendas.forEach(p => {\n        typeCounts[p.tipo] = (typeCounts[p.tipo] || 0) + 1;\n      });\n\n      const summaryParts: string[] = [];\n      for (const [type, count] of Object.entries(typeCounts)) {\n        if (count > 1) {\n          summaryParts.push(`varias ${type.toLowerCase()}s`);\n        } else {\n          summaryParts.push(`una ${type.toLowerCase()}`); \n        }\n      }\n\n      if (summaryParts.length === 0) {\n         return { closetSummary: `El usuario tiene artículos en el estilo ${input.style} adecuados para diversas condiciones, complementando la sugerencia actual.`};\n      }\n\n      return { closetSummary: `Para el estilo ${input.style} y el rango de temperatura de ${input.temperatureRange}, el armario del usuario también incluye ${summaryParts.join(', y ')}. Esto sugiere que el atuendo sugerido puede integrarse bien.` };\n\n    } catch (error) {\n      console.error(\"Error in getUserClosetInformation tool:\", error);\n      return { closetSummary: \"Ocurrió un error al intentar acceder a la información del armario.\" };\n    }\n  }\n);\n\nexport async function generateOutfitExplanation(input: GenerateOutfitExplanationInput): Promise<GenerateOutfitExplanationOutput> {\n  if (!ai) {\n    console.error(\"Genkit AI instance is not available in generateOutfitExplanation.\");\n    return { explanation: \"El servicio de IA no está disponible en este momento. Por favor, inténtalo más tarde.\" };\n  }\n  return generateOutfitExplanationFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateOutfitExplanationPrompt',\n  model: 'googleai/gemini-1.5-flash-latest',\n  input: { schema: GenerateOutfitExplanationInputSchema },\n  output: { schema: GenerateOutfitExplanationOutputSchema },\n  tools: [getUserClosetInformation],\n  prompt: `Eres un asistente de moda IA amigable, experto y muy útil. Tu tarea principal es generar una explicación cálida, detallada y personalizada para el siguiente atuendo sugerido, que ya ha sido seleccionado del armario del usuario.\n\nDetalles del Atuendo (ya seleccionado):\n- Descripción del Atuendo: {{{outfitDescription}}}\n- Rango de Temperatura: {{{temperatureRange}}}\n- Estilo Seleccionado: {{{selectedStyle}}}\n{{#if ocasion}}\n- Ocasión: {{{ocasion}}}\n{{/if}}\n{{#if previewImageUrl}}\n- Imagen de Vista Previa: {{media url=previewImageUrl}} (Considera elementos visuales de esta imagen si es relevante, como colores o tipos de prendas específicas de la descripción).\n{{/if}}\n\nInstrucciones para la explicación:\n1.  Tono: Sé amigable, positivo y da consejos como si fueras un estilista personal experto. Usa un lenguaje natural y cercano.\n2.  Principios de un Buen Atuendo: Al formular tu explicación, considera que un conjunto bien armado usualmente incluye prendas para las categorías principales: Cuerpo (ej. camisa, remera), Piernas (ej. pantalón, falda), Zapatos y Abrigos (este último, si la temperatura o la ocasión lo ameritan).\n3.  Contenido Principal:\n    *   Explica POR QUÉ esta combinación de prendas (de {{{outfitDescription}}}) es una buena elección.\n    *   No repitas literalmente la descripción del atuendo. En lugar de eso, comenta sobre cómo las piezas funcionan juntas para lograr el estilo {{{selectedStyle}}} y adaptarse al rango de temperatura y ocasión (si se proporciona). Por ejemplo, en lugar de decir \"Una camiseta y jeans\", podrías decir \"La combinación de una camiseta cómoda con unos jeans versátiles crea un look relajado y funcional...\"\n    *   Relaciona la selección con los \"Principios de un Buen Atuendo\" (punto 2). Si el atuendo sugerido ({{{outfitDescription}}}) no incluye una prenda para cada categoría principal (Cuerpo, Piernas, Zapatos, Abrigos), explica por qué sigue siendo adecuado (ej. \"Para este clima cálido, un abrigo no es necesario, y el enfoque está en la comodidad de la parte superior y los pantalones.\").\n4.  Combinación de Colores:\n    *   Analiza y comenta la armonía de colores en el atuendo {{{outfitDescription}}}.\n    *   Asegúrate que los colores combinen siguiendo reglas básicas de armonía cromática.\n    *   Idealmente, no debería haber más de 3 colores diferentes en el outfit completo (sin contar variaciones muy sutiles o estampados que integren esos colores).\n    *   Recuerda: colores neutros (Negro, Blanco, Gris, Beige) combinan con casi todo. Se pueden combinar colores complementarios (Rojo con Verde, Azul con Naranja, Amarillo con Violeta) con cuidado. Evita combinaciones visualmente conflictivas como Rojo intenso con Rosa fuerte, o Marrón oscuro con Negro (a menos que sea una elección de estilo deliberada y sofisticada).\n5.  Adecuación del Abrigo:\n    *   Si la temperatura ({{{temperatureRange}}}) es superior a 22°C, un abrigo generalmente no es necesario, a menos que la ocasión ({{{ocasion}}}) sea formal o de noche. Justifica la presencia o ausencia del abrigo.\n    *   Los zapatos deben ser acordes al nivel de formalidad del resto del outfit y la ocasión.\n6.  Personalización (si {{{userClosetInformationNeeded}}} es true):\n    *   Utiliza la herramienta 'getUserClosetInformation' para obtener un resumen de OTROS artículos relevantes en el armario del usuario que coincidan con el estilo y la temperatura.\n    *   Integra esta información de forma natural. Por ejemplo: \"Este conjunto es una excelente opción, y dado que en tu armario tienes [resumen de la herramienta getUserClosetInformation], podrás combinar estas piezas de múltiples maneras.\" o \"Como ya cuentas con varias prendas de estilo {{{selectedStyle}}} que se adaptan a este clima, este atuendo te resultará fácil de armar y muy versátil.\"\n    *   El objetivo es hacer que el usuario sienta que la sugerencia es coherente con lo que ya posee y su estilo.\n7.  Naturalidad: Evita frases robóticas. Haz que la explicación fluya como una conversación.\n8.  Ejemplo de inicio: \"¡Este look es perfecto para...\" o \"Para un día con temperaturas entre..., te sugiero...\"\n\nGenera la explicación detallada y útil.\n  `,\n});\n\nconst generateOutfitExplanationFlow = ai.defineFlow(\n  {\n    name: 'generateOutfitExplanationFlow',\n    inputSchema: GenerateOutfitExplanationInputSchema,\n    outputSchema: GenerateOutfitExplanationOutputSchema,\n  },\n  async (input) => {\n    if (!ai) {\n      console.error(\"Genkit AI instance is not available in generateOutfitExplanationFlow.\");\n      return { explanation: \"El servicio de IA no está disponible para el flujo en este momento.\" };\n    }\n    const { output } = await prompt(input);\n    if (!output) {\n      console.warn(\"AI prompt did not return an output for input:\", JSON.stringify(input));\n      return { explanation: \"No se pudo generar una explicación en este momento. Por favor, intenta de nuevo.\" };\n    }\n    return output;\n  }\n);\n\n"
      }
    }
  }
}